// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "city_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* cityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GarrisonHeroRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GarrisonHeroRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GarrisonHeroResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GarrisonHeroResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HarvestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HarvestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HarvestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HarvestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommanderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommanderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelUpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelUpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelUpResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_city_5fprotocol_2eproto() {
  protobuf_AddDesc_city_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "city_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  cityResponse_descriptor_ = file->message_type(0);
  static const int cityResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cityResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cityResponse, citylist_),
  };
  cityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cityResponse_descriptor_,
      cityResponse::default_instance_,
      cityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cityResponse));
  CityInfo_descriptor_ = file->message_type(1);
  static const int CityInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, cityid_),
  };
  CityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityInfo_descriptor_,
      CityInfo::default_instance_,
      CityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityInfo));
  GarrisonHeroRequest_descriptor_ = file->message_type(2);
  static const int GarrisonHeroRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroRequest, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroRequest, heroa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroRequest, herob_),
  };
  GarrisonHeroRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GarrisonHeroRequest_descriptor_,
      GarrisonHeroRequest::default_instance_,
      GarrisonHeroRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GarrisonHeroRequest));
  GarrisonHeroResponse_descriptor_ = file->message_type(3);
  static const int GarrisonHeroResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroResponse, retval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroResponse, extpe_),
  };
  GarrisonHeroResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GarrisonHeroResponse_descriptor_,
      GarrisonHeroResponse::default_instance_,
      GarrisonHeroResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarrisonHeroResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GarrisonHeroResponse));
  HarvestRequest_descriptor_ = file->message_type(4);
  static const int HarvestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvestRequest, cityid_),
  };
  HarvestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HarvestRequest_descriptor_,
      HarvestRequest::default_instance_,
      HarvestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HarvestRequest));
  HarvestResponse_descriptor_ = file->message_type(5);
  static const int HarvestResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvestResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvestResponse, role_),
  };
  HarvestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HarvestResponse_descriptor_,
      HarvestResponse::default_instance_,
      HarvestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HarvestResponse));
  CommanderResponse_descriptor_ = file->message_type(6);
  static const int CommanderResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommanderResponse, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommanderResponse, citylist_),
  };
  CommanderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommanderResponse_descriptor_,
      CommanderResponse::default_instance_,
      CommanderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommanderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommanderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommanderResponse));
  LevelUpRequest_descriptor_ = file->message_type(7);
  static const int LevelUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpRequest, cityid_),
  };
  LevelUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelUpRequest_descriptor_,
      LevelUpRequest::default_instance_,
      LevelUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelUpRequest));
  LevelUpResponse_descriptor_ = file->message_type(8);
  static const int LevelUpResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpResponse, city_),
  };
  LevelUpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelUpResponse_descriptor_,
      LevelUpResponse::default_instance_,
      LevelUpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelUpResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_city_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cityResponse_descriptor_, &cityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityInfo_descriptor_, &CityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GarrisonHeroRequest_descriptor_, &GarrisonHeroRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GarrisonHeroResponse_descriptor_, &GarrisonHeroResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HarvestRequest_descriptor_, &HarvestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HarvestResponse_descriptor_, &HarvestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommanderResponse_descriptor_, &CommanderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelUpRequest_descriptor_, &LevelUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelUpResponse_descriptor_, &LevelUpResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_city_5fprotocol_2eproto() {
  delete cityResponse::default_instance_;
  delete cityResponse_reflection_;
  delete CityInfo::default_instance_;
  delete CityInfo_reflection_;
  delete GarrisonHeroRequest::default_instance_;
  delete GarrisonHeroRequest_reflection_;
  delete GarrisonHeroResponse::default_instance_;
  delete GarrisonHeroResponse_reflection_;
  delete HarvestRequest::default_instance_;
  delete HarvestRequest_reflection_;
  delete HarvestResponse::default_instance_;
  delete HarvestResponse_reflection_;
  delete CommanderResponse::default_instance_;
  delete CommanderResponse_reflection_;
  delete LevelUpRequest::default_instance_;
  delete LevelUpRequest_reflection_;
  delete LevelUpResponse::default_instance_;
  delete LevelUpResponse_reflection_;
}

void protobuf_AddDesc_city_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fcity_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2frole_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023city_protocol.proto\022\006protos\032\030common/ci"
    "ty_common.proto\032\030common/role_common.prot"
    "o\"E\n\014cityResponse\022\016\n\006roleId\030\001 \002(\005\022%\n\010cit"
    "yList\030\002 \003(\0132\023.protos.common.City\"\032\n\010City"
    "Info\022\016\n\006cityId\030\001 \002(\005\"C\n\023GarrisonHeroRequ"
    "est\022\016\n\006cityId\030\001 \002(\005\022\r\n\005heroA\030\002 \002(\005\022\r\n\005he"
    "roB\030\003 \002(\005\"5\n\024GarrisonHeroResponse\022\016\n\006ret"
    "Val\030\001 \002(\010\022\r\n\005extPE\030\002 \001(\005\" \n\016HarvestReque"
    "st\022\016\n\006cityId\030\001 \002(\005\"D\n\017HarvestResponse\022\016\n"
    "\006result\030\001 \002(\010\022!\n\004role\030\002 \001(\0132\023.protos.com"
    "mon.Role\"]\n\021CommanderResponse\022!\n\004info\030\001 "
    "\002(\0132\023.protos.common.City\022%\n\010cityList\030\002 \003"
    "(\0132\023.protos.common.City\" \n\016LevelUpReques"
    "t\022\016\n\006cityId\030\001 \002(\005\"D\n\017LevelUpResponse\022\016\n\006"
    "result\030\001 \002(\005\022!\n\004city\030\002 \001(\0132\023.protos.comm"
    "on.CityB0\n\036anvin.server.gameserver.proto"
    "sB\014CityProtocolH\001", 657);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "city_protocol.proto", &protobuf_RegisterTypes);
  cityResponse::default_instance_ = new cityResponse();
  CityInfo::default_instance_ = new CityInfo();
  GarrisonHeroRequest::default_instance_ = new GarrisonHeroRequest();
  GarrisonHeroResponse::default_instance_ = new GarrisonHeroResponse();
  HarvestRequest::default_instance_ = new HarvestRequest();
  HarvestResponse::default_instance_ = new HarvestResponse();
  CommanderResponse::default_instance_ = new CommanderResponse();
  LevelUpRequest::default_instance_ = new LevelUpRequest();
  LevelUpResponse::default_instance_ = new LevelUpResponse();
  cityResponse::default_instance_->InitAsDefaultInstance();
  CityInfo::default_instance_->InitAsDefaultInstance();
  GarrisonHeroRequest::default_instance_->InitAsDefaultInstance();
  GarrisonHeroResponse::default_instance_->InitAsDefaultInstance();
  HarvestRequest::default_instance_->InitAsDefaultInstance();
  HarvestResponse::default_instance_->InitAsDefaultInstance();
  CommanderResponse::default_instance_->InitAsDefaultInstance();
  LevelUpRequest::default_instance_->InitAsDefaultInstance();
  LevelUpResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_city_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_city_5fprotocol_2eproto {
  StaticDescriptorInitializer_city_5fprotocol_2eproto() {
    protobuf_AddDesc_city_5fprotocol_2eproto();
  }
} static_descriptor_initializer_city_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int cityResponse::kRoleIdFieldNumber;
const int cityResponse::kCityListFieldNumber;
#endif  // !_MSC_VER

cityResponse::cityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cityResponse::InitAsDefaultInstance() {
}

cityResponse::cityResponse(const cityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cityResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cityResponse::~cityResponse() {
  SharedDtor();
}

void cityResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cityResponse_descriptor_;
}

const cityResponse& cityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

cityResponse* cityResponse::default_instance_ = NULL;

cityResponse* cityResponse::New() const {
  return new cityResponse;
}

void cityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  citylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cityList;
        break;
      }

      // repeated .protos.common.City cityList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_citylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cityList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // repeated .protos.common.City cityList = 2;
  for (int i = 0; i < this->citylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->citylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // repeated .protos.common.City cityList = 2;
  for (int i = 0; i < this->citylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->citylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  // repeated .protos.common.City cityList = 2;
  total_size += 1 * this->citylist_size();
  for (int i = 0; i < this->citylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->citylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cityResponse::MergeFrom(const cityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  citylist_.MergeFrom(from.citylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cityResponse::CopyFrom(const cityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < citylist_size(); i++) {
    if (!this->citylist(i).IsInitialized()) return false;
  }
  return true;
}

void cityResponse::Swap(cityResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    citylist_.Swap(&other->citylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cityResponse_descriptor_;
  metadata.reflection = cityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityInfo::kCityIdFieldNumber;
#endif  // !_MSC_VER

CityInfo::CityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CityInfo::InitAsDefaultInstance() {
}

CityInfo::CityInfo(const CityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CityInfo::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityInfo::~CityInfo() {
  SharedDtor();
}

void CityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityInfo_descriptor_;
}

const CityInfo& CityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

CityInfo* CityInfo::default_instance_ = NULL;

CityInfo* CityInfo::New() const {
  return new CityInfo;
}

void CityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityInfo::MergeFrom(const CityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityInfo::CopyFrom(const CityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CityInfo::Swap(CityInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityInfo_descriptor_;
  metadata.reflection = CityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GarrisonHeroRequest::kCityIdFieldNumber;
const int GarrisonHeroRequest::kHeroAFieldNumber;
const int GarrisonHeroRequest::kHeroBFieldNumber;
#endif  // !_MSC_VER

GarrisonHeroRequest::GarrisonHeroRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GarrisonHeroRequest::InitAsDefaultInstance() {
}

GarrisonHeroRequest::GarrisonHeroRequest(const GarrisonHeroRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GarrisonHeroRequest::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0;
  heroa_ = 0;
  herob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarrisonHeroRequest::~GarrisonHeroRequest() {
  SharedDtor();
}

void GarrisonHeroRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GarrisonHeroRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GarrisonHeroRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarrisonHeroRequest_descriptor_;
}

const GarrisonHeroRequest& GarrisonHeroRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

GarrisonHeroRequest* GarrisonHeroRequest::default_instance_ = NULL;

GarrisonHeroRequest* GarrisonHeroRequest::New() const {
  return new GarrisonHeroRequest;
}

void GarrisonHeroRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0;
    heroa_ = 0;
    herob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarrisonHeroRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroA;
        break;
      }

      // required int32 heroA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroa_)));
          set_has_heroa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroB;
        break;
      }

      // required int32 heroB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herob_)));
          set_has_herob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GarrisonHeroRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cityid(), output);
  }

  // required int32 heroA = 2;
  if (has_heroa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heroa(), output);
  }

  // required int32 heroB = 3;
  if (has_herob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->herob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GarrisonHeroRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cityid(), target);
  }

  // required int32 heroA = 2;
  if (has_heroa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heroa(), target);
  }

  // required int32 heroB = 3;
  if (has_herob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->herob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GarrisonHeroRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

    // required int32 heroA = 2;
    if (has_heroa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroa());
    }

    // required int32 heroB = 3;
    if (has_herob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarrisonHeroRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GarrisonHeroRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GarrisonHeroRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GarrisonHeroRequest::MergeFrom(const GarrisonHeroRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_heroa()) {
      set_heroa(from.heroa());
    }
    if (from.has_herob()) {
      set_herob(from.herob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarrisonHeroRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarrisonHeroRequest::CopyFrom(const GarrisonHeroRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarrisonHeroRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GarrisonHeroRequest::Swap(GarrisonHeroRequest* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(heroa_, other->heroa_);
    std::swap(herob_, other->herob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GarrisonHeroRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GarrisonHeroRequest_descriptor_;
  metadata.reflection = GarrisonHeroRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GarrisonHeroResponse::kRetValFieldNumber;
const int GarrisonHeroResponse::kExtPEFieldNumber;
#endif  // !_MSC_VER

GarrisonHeroResponse::GarrisonHeroResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GarrisonHeroResponse::InitAsDefaultInstance() {
}

GarrisonHeroResponse::GarrisonHeroResponse(const GarrisonHeroResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GarrisonHeroResponse::SharedCtor() {
  _cached_size_ = 0;
  retval_ = false;
  extpe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarrisonHeroResponse::~GarrisonHeroResponse() {
  SharedDtor();
}

void GarrisonHeroResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GarrisonHeroResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GarrisonHeroResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarrisonHeroResponse_descriptor_;
}

const GarrisonHeroResponse& GarrisonHeroResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

GarrisonHeroResponse* GarrisonHeroResponse::default_instance_ = NULL;

GarrisonHeroResponse* GarrisonHeroResponse::New() const {
  return new GarrisonHeroResponse;
}

void GarrisonHeroResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retval_ = false;
    extpe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarrisonHeroResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool retVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retval_)));
          set_has_retval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_extPE;
        break;
      }

      // optional int32 extPE = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extPE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extpe_)));
          set_has_extpe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GarrisonHeroResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool retVal = 1;
  if (has_retval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->retval(), output);
  }

  // optional int32 extPE = 2;
  if (has_extpe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->extpe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GarrisonHeroResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool retVal = 1;
  if (has_retval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->retval(), target);
  }

  // optional int32 extPE = 2;
  if (has_extpe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->extpe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GarrisonHeroResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool retVal = 1;
    if (has_retval()) {
      total_size += 1 + 1;
    }

    // optional int32 extPE = 2;
    if (has_extpe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extpe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarrisonHeroResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GarrisonHeroResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GarrisonHeroResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GarrisonHeroResponse::MergeFrom(const GarrisonHeroResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retval()) {
      set_retval(from.retval());
    }
    if (from.has_extpe()) {
      set_extpe(from.extpe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarrisonHeroResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarrisonHeroResponse::CopyFrom(const GarrisonHeroResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarrisonHeroResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GarrisonHeroResponse::Swap(GarrisonHeroResponse* other) {
  if (other != this) {
    std::swap(retval_, other->retval_);
    std::swap(extpe_, other->extpe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GarrisonHeroResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GarrisonHeroResponse_descriptor_;
  metadata.reflection = GarrisonHeroResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HarvestRequest::kCityIdFieldNumber;
#endif  // !_MSC_VER

HarvestRequest::HarvestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HarvestRequest::InitAsDefaultInstance() {
}

HarvestRequest::HarvestRequest(const HarvestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HarvestRequest::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HarvestRequest::~HarvestRequest() {
  SharedDtor();
}

void HarvestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HarvestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HarvestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HarvestRequest_descriptor_;
}

const HarvestRequest& HarvestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

HarvestRequest* HarvestRequest::default_instance_ = NULL;

HarvestRequest* HarvestRequest::New() const {
  return new HarvestRequest;
}

void HarvestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HarvestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HarvestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HarvestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HarvestRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HarvestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HarvestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HarvestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HarvestRequest::MergeFrom(const HarvestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HarvestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarvestRequest::CopyFrom(const HarvestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarvestRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HarvestRequest::Swap(HarvestRequest* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HarvestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HarvestRequest_descriptor_;
  metadata.reflection = HarvestRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HarvestResponse::kResultFieldNumber;
const int HarvestResponse::kRoleFieldNumber;
#endif  // !_MSC_VER

HarvestResponse::HarvestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HarvestResponse::InitAsDefaultInstance() {
  role_ = const_cast< ::protos::common::Role*>(&::protos::common::Role::default_instance());
}

HarvestResponse::HarvestResponse(const HarvestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HarvestResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HarvestResponse::~HarvestResponse() {
  SharedDtor();
}

void HarvestResponse::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void HarvestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HarvestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HarvestResponse_descriptor_;
}

const HarvestResponse& HarvestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

HarvestResponse* HarvestResponse::default_instance_ = NULL;

HarvestResponse* HarvestResponse::New() const {
  return new HarvestResponse;
}

void HarvestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_role()) {
      if (role_ != NULL) role_->::protos::common::Role::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HarvestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // optional .protos.common.Role role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HarvestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional .protos.common.Role role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HarvestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional .protos.common.Role role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HarvestResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional .protos.common.Role role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HarvestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HarvestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HarvestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HarvestResponse::MergeFrom(const HarvestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role()) {
      mutable_role()->::protos::common::Role::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HarvestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarvestResponse::CopyFrom(const HarvestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarvestResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void HarvestResponse::Swap(HarvestResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HarvestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HarvestResponse_descriptor_;
  metadata.reflection = HarvestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommanderResponse::kInfoFieldNumber;
const int CommanderResponse::kCityListFieldNumber;
#endif  // !_MSC_VER

CommanderResponse::CommanderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommanderResponse::InitAsDefaultInstance() {
  info_ = const_cast< ::protos::common::City*>(&::protos::common::City::default_instance());
}

CommanderResponse::CommanderResponse(const CommanderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommanderResponse::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommanderResponse::~CommanderResponse() {
  SharedDtor();
}

void CommanderResponse::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void CommanderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommanderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommanderResponse_descriptor_;
}

const CommanderResponse& CommanderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

CommanderResponse* CommanderResponse::default_instance_ = NULL;

CommanderResponse* CommanderResponse::New() const {
  return new CommanderResponse;
}

void CommanderResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::protos::common::City::Clear();
    }
  }
  citylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommanderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protos.common.City info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cityList;
        break;
      }

      // repeated .protos.common.City cityList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_citylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cityList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommanderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protos.common.City info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated .protos.common.City cityList = 2;
  for (int i = 0; i < this->citylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->citylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommanderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protos.common.City info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated .protos.common.City cityList = 2;
  for (int i = 0; i < this->citylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->citylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommanderResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protos.common.City info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .protos.common.City cityList = 2;
  total_size += 1 * this->citylist_size();
  for (int i = 0; i < this->citylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->citylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommanderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommanderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommanderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommanderResponse::MergeFrom(const CommanderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  citylist_.MergeFrom(from.citylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::protos::common::City::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommanderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommanderResponse::CopyFrom(const CommanderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommanderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  for (int i = 0; i < citylist_size(); i++) {
    if (!this->citylist(i).IsInitialized()) return false;
  }
  return true;
}

void CommanderResponse::Swap(CommanderResponse* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    citylist_.Swap(&other->citylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommanderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommanderResponse_descriptor_;
  metadata.reflection = CommanderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelUpRequest::kCityIdFieldNumber;
#endif  // !_MSC_VER

LevelUpRequest::LevelUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelUpRequest::InitAsDefaultInstance() {
}

LevelUpRequest::LevelUpRequest(const LevelUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpRequest::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpRequest::~LevelUpRequest() {
  SharedDtor();
}

void LevelUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelUpRequest_descriptor_;
}

const LevelUpRequest& LevelUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

LevelUpRequest* LevelUpRequest::default_instance_ = NULL;

LevelUpRequest* LevelUpRequest::New() const {
  return new LevelUpRequest;
}

void LevelUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelUpRequest::MergeFrom(const LevelUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelUpRequest::CopyFrom(const LevelUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LevelUpRequest::Swap(LevelUpRequest* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelUpRequest_descriptor_;
  metadata.reflection = LevelUpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelUpResponse::kResultFieldNumber;
const int LevelUpResponse::kCityFieldNumber;
#endif  // !_MSC_VER

LevelUpResponse::LevelUpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelUpResponse::InitAsDefaultInstance() {
  city_ = const_cast< ::protos::common::City*>(&::protos::common::City::default_instance());
}

LevelUpResponse::LevelUpResponse(const LevelUpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  city_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpResponse::~LevelUpResponse() {
  SharedDtor();
}

void LevelUpResponse::SharedDtor() {
  if (this != default_instance_) {
    delete city_;
  }
}

void LevelUpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelUpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelUpResponse_descriptor_;
}

const LevelUpResponse& LevelUpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_city_5fprotocol_2eproto();
  return *default_instance_;
}

LevelUpResponse* LevelUpResponse::default_instance_ = NULL;

LevelUpResponse* LevelUpResponse::New() const {
  return new LevelUpResponse;
}

void LevelUpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_city()) {
      if (city_ != NULL) city_->::protos::common::City::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelUpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional .protos.common.City city = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .protos.common.City city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelUpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .protos.common.City city = 2;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelUpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .protos.common.City city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelUpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelUpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelUpResponse::MergeFrom(const LevelUpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_city()) {
      mutable_city()->::protos::common::City::MergeFrom(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelUpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelUpResponse::CopyFrom(const LevelUpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_city()) {
    if (!this->city().IsInitialized()) return false;
  }
  return true;
}

void LevelUpResponse::Swap(LevelUpResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelUpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelUpResponse_descriptor_;
  metadata.reflection = LevelUpResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
