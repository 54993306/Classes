// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smith_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "smith_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* StrengthenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengthenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrengthenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengthenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RisingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RisingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RisingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RisingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecomposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecomposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecomposeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecomposeRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_smith_5fprotocol_2eproto() {
  protobuf_AddDesc_smith_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "smith_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  StrengthenRequest_descriptor_ = file->message_type(0);
  static const int StrengthenRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRequest, armorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRequest, oneclick_),
  };
  StrengthenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengthenRequest_descriptor_,
      StrengthenRequest::default_instance_,
      StrengthenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengthenRequest));
  StrengthenResponse_descriptor_ = file->message_type(1);
  static const int StrengthenResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenResponse, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenResponse, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenResponse, armor_),
  };
  StrengthenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengthenResponse_descriptor_,
      StrengthenResponse::default_instance_,
      StrengthenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengthenResponse));
  RisingRequest_descriptor_ = file->message_type(2);
  static const int RisingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingRequest, armorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingRequest, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingRequest, usegold_),
  };
  RisingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RisingRequest_descriptor_,
      RisingRequest::default_instance_,
      RisingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RisingRequest));
  RisingResponse_descriptor_ = file->message_type(3);
  static const int RisingResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, item1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, item2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, item3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, canrising_),
  };
  RisingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RisingResponse_descriptor_,
      RisingResponse::default_instance_,
      RisingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RisingResponse));
  SmeltRequest_descriptor_ = file->message_type(4);
  static const int SmeltRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRequest, armorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRequest, attr_),
  };
  SmeltRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltRequest_descriptor_,
      SmeltRequest::default_instance_,
      SmeltRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltRequest));
  SmeltResponse_descriptor_ = file->message_type(5);
  static const int SmeltResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltResponse, reslut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltResponse, armor_),
  };
  SmeltResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltResponse_descriptor_,
      SmeltResponse::default_instance_,
      SmeltResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltResponse));
  DecomposeReq_descriptor_ = file->message_type(6);
  static const int DecomposeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeReq, armorid_),
  };
  DecomposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecomposeReq_descriptor_,
      DecomposeReq::default_instance_,
      DecomposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecomposeReq));
  DecomposeRes_descriptor_ = file->message_type(7);
  static const int DecomposeRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeRes, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeRes, coin_),
  };
  DecomposeRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecomposeRes_descriptor_,
      DecomposeRes::default_instance_,
      DecomposeRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecomposeRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecomposeRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_smith_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengthenRequest_descriptor_, &StrengthenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengthenResponse_descriptor_, &StrengthenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RisingRequest_descriptor_, &RisingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RisingResponse_descriptor_, &RisingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltRequest_descriptor_, &SmeltRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltResponse_descriptor_, &SmeltResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecomposeReq_descriptor_, &DecomposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecomposeRes_descriptor_, &DecomposeRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_smith_5fprotocol_2eproto() {
  delete StrengthenRequest::default_instance_;
  delete StrengthenRequest_reflection_;
  delete StrengthenResponse::default_instance_;
  delete StrengthenResponse_reflection_;
  delete RisingRequest::default_instance_;
  delete RisingRequest_reflection_;
  delete RisingResponse::default_instance_;
  delete RisingResponse_reflection_;
  delete SmeltRequest::default_instance_;
  delete SmeltRequest_reflection_;
  delete SmeltResponse::default_instance_;
  delete SmeltResponse_reflection_;
  delete DecomposeReq::default_instance_;
  delete DecomposeReq_reflection_;
  delete DecomposeRes::default_instance_;
  delete DecomposeRes_reflection_;
}

void protobuf_AddDesc_smith_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fitem_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024smith_protocol.proto\022\006protos\032\030common/i"
    "tem_common.proto\"6\n\021StrengthenRequest\022\017\n"
    "\007armorId\030\001 \002(\005\022\020\n\010oneClick\030\002 \001(\010\"h\n\022Stre"
    "ngthenResponse\022\016\n\006result\030\001 \001(\005\022\020\n\010maxLev"
    "el\030\002 \001(\005\022\014\n\004coin\030\003 \001(\005\022\"\n\005armor\030\004 \001(\0132\023."
    "protos.common.Item\"A\n\rRisingRequest\022\017\n\007a"
    "rmorId\030\001 \002(\005\022\016\n\006itemId\030\002 \001(\005\022\017\n\007useGold\030"
    "\003 \001(\010\"\337\001\n\016RisingResponse\022\016\n\006result\030\001 \001(\005"
    "\022\"\n\005armor\030\002 \001(\0132\023.protos.common.Item\022\"\n\005"
    "item1\030\003 \001(\0132\023.protos.common.Item\022\"\n\005item"
    "2\030\004 \001(\0132\023.protos.common.Item\022\"\n\005item3\030\005 "
    "\001(\0132\023.protos.common.Item\022\014\n\004rate\030\006 \001(\005\022\014"
    "\n\004gold\030\007 \001(\005\022\021\n\tcanRising\030\010 \001(\010\"1\n\014Smelt"
    "Request\022\017\n\007armorId\030\001 \002(\005\022\020\n\004attr\030\002 \003(\005B\002"
    "\020\001\"C\n\rSmeltResponse\022\016\n\006reslut\030\001 \002(\005\022\"\n\005a"
    "rmor\030\002 \001(\0132\023.protos.common.Item\"\037\n\014Decom"
    "poseReq\022\017\n\007armorId\030\001 \002(\005\"P\n\014DecomposeRes"
    "\022\"\n\005items\030\001 \003(\0132\023.protos.common.Item\022\016\n\006"
    "result\030\002 \001(\010\022\014\n\004coin\030\003 \001(\005B0\n\035dass.serve"
    "r.gameserver.protosB\rSmithProtocolH\001", 796);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "smith_protocol.proto", &protobuf_RegisterTypes);
  StrengthenRequest::default_instance_ = new StrengthenRequest();
  StrengthenResponse::default_instance_ = new StrengthenResponse();
  RisingRequest::default_instance_ = new RisingRequest();
  RisingResponse::default_instance_ = new RisingResponse();
  SmeltRequest::default_instance_ = new SmeltRequest();
  SmeltResponse::default_instance_ = new SmeltResponse();
  DecomposeReq::default_instance_ = new DecomposeReq();
  DecomposeRes::default_instance_ = new DecomposeRes();
  StrengthenRequest::default_instance_->InitAsDefaultInstance();
  StrengthenResponse::default_instance_->InitAsDefaultInstance();
  RisingRequest::default_instance_->InitAsDefaultInstance();
  RisingResponse::default_instance_->InitAsDefaultInstance();
  SmeltRequest::default_instance_->InitAsDefaultInstance();
  SmeltResponse::default_instance_->InitAsDefaultInstance();
  DecomposeReq::default_instance_->InitAsDefaultInstance();
  DecomposeRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_smith_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_smith_5fprotocol_2eproto {
  StaticDescriptorInitializer_smith_5fprotocol_2eproto() {
    protobuf_AddDesc_smith_5fprotocol_2eproto();
  }
} static_descriptor_initializer_smith_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StrengthenRequest::kArmorIdFieldNumber;
const int StrengthenRequest::kOneClickFieldNumber;
#endif  // !_MSC_VER

StrengthenRequest::StrengthenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrengthenRequest::InitAsDefaultInstance() {
}

StrengthenRequest::StrengthenRequest(const StrengthenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrengthenRequest::SharedCtor() {
  _cached_size_ = 0;
  armorid_ = 0;
  oneclick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengthenRequest::~StrengthenRequest() {
  SharedDtor();
}

void StrengthenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrengthenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengthenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengthenRequest_descriptor_;
}

const StrengthenRequest& StrengthenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smith_5fprotocol_2eproto();
  return *default_instance_;
}

StrengthenRequest* StrengthenRequest::default_instance_ = NULL;

StrengthenRequest* StrengthenRequest::New() const {
  return new StrengthenRequest;
}

void StrengthenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armorid_ = 0;
    oneclick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengthenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 armorId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armorid_)));
          set_has_armorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oneClick;
        break;
      }

      // optional bool oneClick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oneClick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oneclick_)));
          set_has_oneclick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrengthenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 armorId = 1;
  if (has_armorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armorid(), output);
  }

  // optional bool oneClick = 2;
  if (has_oneclick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->oneclick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrengthenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 armorId = 1;
  if (has_armorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armorid(), target);
  }

  // optional bool oneClick = 2;
  if (has_oneclick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->oneclick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrengthenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 armorId = 1;
    if (has_armorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armorid());
    }

    // optional bool oneClick = 2;
    if (has_oneclick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengthenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengthenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengthenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengthenRequest::MergeFrom(const StrengthenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armorid()) {
      set_armorid(from.armorid());
    }
    if (from.has_oneclick()) {
      set_oneclick(from.oneclick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengthenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengthenRequest::CopyFrom(const StrengthenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengthenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StrengthenRequest::Swap(StrengthenRequest* other) {
  if (other != this) {
    std::swap(armorid_, other->armorid_);
    std::swap(oneclick_, other->oneclick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengthenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengthenRequest_descriptor_;
  metadata.reflection = StrengthenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrengthenResponse::kResultFieldNumber;
const int StrengthenResponse::kMaxLevelFieldNumber;
const int StrengthenResponse::kCoinFieldNumber;
const int StrengthenResponse::kArmorFieldNumber;
#endif  // !_MSC_VER

StrengthenResponse::StrengthenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrengthenResponse::InitAsDefaultInstance() {
  armor_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
}

StrengthenResponse::StrengthenResponse(const StrengthenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrengthenResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  maxlevel_ = 0;
  coin_ = 0;
  armor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengthenResponse::~StrengthenResponse() {
  SharedDtor();
}

void StrengthenResponse::SharedDtor() {
  if (this != default_instance_) {
    delete armor_;
  }
}

void StrengthenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengthenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengthenResponse_descriptor_;
}

const StrengthenResponse& StrengthenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smith_5fprotocol_2eproto();
  return *default_instance_;
}

StrengthenResponse* StrengthenResponse::default_instance_ = NULL;

StrengthenResponse* StrengthenResponse::New() const {
  return new StrengthenResponse;
}

void StrengthenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    maxlevel_ = 0;
    coin_ = 0;
    if (has_armor()) {
      if (armor_ != NULL) armor_->::protos::common::Item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengthenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxLevel;
        break;
      }

      // optional int32 maxLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int32 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_armor;
        break;
      }

      // optional .protos.common.Item armor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrengthenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 maxLevel = 2;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxlevel(), output);
  }

  // optional int32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coin(), output);
  }

  // optional .protos.common.Item armor = 4;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->armor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrengthenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 maxLevel = 2;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxlevel(), target);
  }

  // optional int32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coin(), target);
  }

  // optional .protos.common.Item armor = 4;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->armor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrengthenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 maxLevel = 2;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

    // optional int32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional .protos.common.Item armor = 4;
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengthenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengthenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengthenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengthenResponse::MergeFrom(const StrengthenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_armor()) {
      mutable_armor()->::protos::common::Item::MergeFrom(from.armor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengthenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengthenResponse::CopyFrom(const StrengthenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengthenResponse::IsInitialized() const {

  if (has_armor()) {
    if (!this->armor().IsInitialized()) return false;
  }
  return true;
}

void StrengthenResponse::Swap(StrengthenResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(coin_, other->coin_);
    std::swap(armor_, other->armor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengthenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengthenResponse_descriptor_;
  metadata.reflection = StrengthenResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RisingRequest::kArmorIdFieldNumber;
const int RisingRequest::kItemIdFieldNumber;
const int RisingRequest::kUseGoldFieldNumber;
#endif  // !_MSC_VER

RisingRequest::RisingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RisingRequest::InitAsDefaultInstance() {
}

RisingRequest::RisingRequest(const RisingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RisingRequest::SharedCtor() {
  _cached_size_ = 0;
  armorid_ = 0;
  itemid_ = 0;
  usegold_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RisingRequest::~RisingRequest() {
  SharedDtor();
}

void RisingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RisingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RisingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RisingRequest_descriptor_;
}

const RisingRequest& RisingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smith_5fprotocol_2eproto();
  return *default_instance_;
}

RisingRequest* RisingRequest::default_instance_ = NULL;

RisingRequest* RisingRequest::New() const {
  return new RisingRequest;
}

void RisingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armorid_ = 0;
    itemid_ = 0;
    usegold_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RisingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 armorId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armorid_)));
          set_has_armorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useGold;
        break;
      }

      // optional bool useGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usegold_)));
          set_has_usegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RisingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 armorId = 1;
  if (has_armorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armorid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional bool useGold = 3;
  if (has_usegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->usegold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RisingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 armorId = 1;
  if (has_armorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armorid(), target);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional bool useGold = 3;
  if (has_usegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->usegold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RisingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 armorId = 1;
    if (has_armorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armorid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional bool useGold = 3;
    if (has_usegold()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RisingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RisingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RisingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RisingRequest::MergeFrom(const RisingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armorid()) {
      set_armorid(from.armorid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_usegold()) {
      set_usegold(from.usegold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RisingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RisingRequest::CopyFrom(const RisingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RisingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RisingRequest::Swap(RisingRequest* other) {
  if (other != this) {
    std::swap(armorid_, other->armorid_);
    std::swap(itemid_, other->itemid_);
    std::swap(usegold_, other->usegold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RisingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RisingRequest_descriptor_;
  metadata.reflection = RisingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RisingResponse::kResultFieldNumber;
const int RisingResponse::kArmorFieldNumber;
const int RisingResponse::kItem1FieldNumber;
const int RisingResponse::kItem2FieldNumber;
const int RisingResponse::kItem3FieldNumber;
const int RisingResponse::kRateFieldNumber;
const int RisingResponse::kGoldFieldNumber;
const int RisingResponse::kCanRisingFieldNumber;
#endif  // !_MSC_VER

RisingResponse::RisingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RisingResponse::InitAsDefaultInstance() {
  armor_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
  item1_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
  item2_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
  item3_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
}

RisingResponse::RisingResponse(const RisingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RisingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  armor_ = NULL;
  item1_ = NULL;
  item2_ = NULL;
  item3_ = NULL;
  rate_ = 0;
  gold_ = 0;
  canrising_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RisingResponse::~RisingResponse() {
  SharedDtor();
}

void RisingResponse::SharedDtor() {
  if (this != default_instance_) {
    delete armor_;
    delete item1_;
    delete item2_;
    delete item3_;
  }
}

void RisingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RisingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RisingResponse_descriptor_;
}

const RisingResponse& RisingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smith_5fprotocol_2eproto();
  return *default_instance_;
}

RisingResponse* RisingResponse::default_instance_ = NULL;

RisingResponse* RisingResponse::New() const {
  return new RisingResponse;
}

void RisingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_armor()) {
      if (armor_ != NULL) armor_->::protos::common::Item::Clear();
    }
    if (has_item1()) {
      if (item1_ != NULL) item1_->::protos::common::Item::Clear();
    }
    if (has_item2()) {
      if (item2_ != NULL) item2_->::protos::common::Item::Clear();
    }
    if (has_item3()) {
      if (item3_ != NULL) item3_->::protos::common::Item::Clear();
    }
    rate_ = 0;
    gold_ = 0;
    canrising_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RisingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_armor;
        break;
      }

      // optional .protos.common.Item armor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item1;
        break;
      }

      // optional .protos.common.Item item1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item2;
        break;
      }

      // optional .protos.common.Item item2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item3;
        break;
      }

      // optional .protos.common.Item item3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rate;
        break;
      }

      // optional int32 rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // optional int32 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_canRising;
        break;
      }

      // optional bool canRising = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canRising:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canrising_)));
          set_has_canrising();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RisingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .protos.common.Item armor = 2;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->armor(), output);
  }

  // optional .protos.common.Item item1 = 3;
  if (has_item1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item1(), output);
  }

  // optional .protos.common.Item item2 = 4;
  if (has_item2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item2(), output);
  }

  // optional .protos.common.Item item3 = 5;
  if (has_item3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item3(), output);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rate(), output);
  }

  // optional int32 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gold(), output);
  }

  // optional bool canRising = 8;
  if (has_canrising()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->canrising(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RisingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .protos.common.Item armor = 2;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->armor(), target);
  }

  // optional .protos.common.Item item1 = 3;
  if (has_item1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item1(), target);
  }

  // optional .protos.common.Item item2 = 4;
  if (has_item2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item2(), target);
  }

  // optional .protos.common.Item item3 = 5;
  if (has_item3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item3(), target);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rate(), target);
  }

  // optional int32 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gold(), target);
  }

  // optional bool canRising = 8;
  if (has_canrising()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->canrising(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RisingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .protos.common.Item armor = 2;
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor());
    }

    // optional .protos.common.Item item1 = 3;
    if (has_item1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item1());
    }

    // optional .protos.common.Item item2 = 4;
    if (has_item2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item2());
    }

    // optional .protos.common.Item item3 = 5;
    if (has_item3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item3());
    }

    // optional int32 rate = 6;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional int32 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional bool canRising = 8;
    if (has_canrising()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RisingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RisingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RisingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RisingResponse::MergeFrom(const RisingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_armor()) {
      mutable_armor()->::protos::common::Item::MergeFrom(from.armor());
    }
    if (from.has_item1()) {
      mutable_item1()->::protos::common::Item::MergeFrom(from.item1());
    }
    if (from.has_item2()) {
      mutable_item2()->::protos::common::Item::MergeFrom(from.item2());
    }
    if (from.has_item3()) {
      mutable_item3()->::protos::common::Item::MergeFrom(from.item3());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_canrising()) {
      set_canrising(from.canrising());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RisingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RisingResponse::CopyFrom(const RisingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RisingResponse::IsInitialized() const {

  if (has_armor()) {
    if (!this->armor().IsInitialized()) return false;
  }
  if (has_item1()) {
    if (!this->item1().IsInitialized()) return false;
  }
  if (has_item2()) {
    if (!this->item2().IsInitialized()) return false;
  }
  if (has_item3()) {
    if (!this->item3().IsInitialized()) return false;
  }
  return true;
}

void RisingResponse::Swap(RisingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(armor_, other->armor_);
    std::swap(item1_, other->item1_);
    std::swap(item2_, other->item2_);
    std::swap(item3_, other->item3_);
    std::swap(rate_, other->rate_);
    std::swap(gold_, other->gold_);
    std::swap(canrising_, other->canrising_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RisingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RisingResponse_descriptor_;
  metadata.reflection = RisingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltRequest::kArmorIdFieldNumber;
const int SmeltRequest::kAttrFieldNumber;
#endif  // !_MSC_VER

SmeltRequest::SmeltRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmeltRequest::InitAsDefaultInstance() {
}

SmeltRequest::SmeltRequest(const SmeltRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmeltRequest::SharedCtor() {
  _cached_size_ = 0;
  armorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltRequest::~SmeltRequest() {
  SharedDtor();
}

void SmeltRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltRequest_descriptor_;
}

const SmeltRequest& SmeltRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smith_5fprotocol_2eproto();
  return *default_instance_;
}

SmeltRequest* SmeltRequest::default_instance_ = NULL;

SmeltRequest* SmeltRequest::New() const {
  return new SmeltRequest;
}

void SmeltRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armorid_ = 0;
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 armorId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armorid_)));
          set_has_armorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // repeated int32 attr = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmeltRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 armorId = 1;
  if (has_armorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armorid(), output);
  }

  // repeated int32 attr = 2 [packed = true];
  if (this->attr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_attr_cached_byte_size_);
  }
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmeltRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 armorId = 1;
  if (has_armorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armorid(), target);
  }

  // repeated int32 attr = 2 [packed = true];
  if (this->attr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _attr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmeltRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 armorId = 1;
    if (has_armorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armorid());
    }

  }
  // repeated int32 attr = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _attr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltRequest::MergeFrom(const SmeltRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armorid()) {
      set_armorid(from.armorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltRequest::CopyFrom(const SmeltRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmeltRequest::Swap(SmeltRequest* other) {
  if (other != this) {
    std::swap(armorid_, other->armorid_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltRequest_descriptor_;
  metadata.reflection = SmeltRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltResponse::kReslutFieldNumber;
const int SmeltResponse::kArmorFieldNumber;
#endif  // !_MSC_VER

SmeltResponse::SmeltResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmeltResponse::InitAsDefaultInstance() {
  armor_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
}

SmeltResponse::SmeltResponse(const SmeltResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmeltResponse::SharedCtor() {
  _cached_size_ = 0;
  reslut_ = 0;
  armor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltResponse::~SmeltResponse() {
  SharedDtor();
}

void SmeltResponse::SharedDtor() {
  if (this != default_instance_) {
    delete armor_;
  }
}

void SmeltResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltResponse_descriptor_;
}

const SmeltResponse& SmeltResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smith_5fprotocol_2eproto();
  return *default_instance_;
}

SmeltResponse* SmeltResponse::default_instance_ = NULL;

SmeltResponse* SmeltResponse::New() const {
  return new SmeltResponse;
}

void SmeltResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reslut_ = 0;
    if (has_armor()) {
      if (armor_ != NULL) armor_->::protos::common::Item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reslut = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reslut_)));
          set_has_reslut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_armor;
        break;
      }

      // optional .protos.common.Item armor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmeltResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reslut = 1;
  if (has_reslut()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reslut(), output);
  }

  // optional .protos.common.Item armor = 2;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->armor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmeltResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reslut = 1;
  if (has_reslut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reslut(), target);
  }

  // optional .protos.common.Item armor = 2;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->armor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmeltResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reslut = 1;
    if (has_reslut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reslut());
    }

    // optional .protos.common.Item armor = 2;
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltResponse::MergeFrom(const SmeltResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reslut()) {
      set_reslut(from.reslut());
    }
    if (from.has_armor()) {
      mutable_armor()->::protos::common::Item::MergeFrom(from.armor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltResponse::CopyFrom(const SmeltResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_armor()) {
    if (!this->armor().IsInitialized()) return false;
  }
  return true;
}

void SmeltResponse::Swap(SmeltResponse* other) {
  if (other != this) {
    std::swap(reslut_, other->reslut_);
    std::swap(armor_, other->armor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltResponse_descriptor_;
  metadata.reflection = SmeltResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecomposeReq::kArmorIdFieldNumber;
#endif  // !_MSC_VER

DecomposeReq::DecomposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DecomposeReq::InitAsDefaultInstance() {
}

DecomposeReq::DecomposeReq(const DecomposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DecomposeReq::SharedCtor() {
  _cached_size_ = 0;
  armorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecomposeReq::~DecomposeReq() {
  SharedDtor();
}

void DecomposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DecomposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecomposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecomposeReq_descriptor_;
}

const DecomposeReq& DecomposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smith_5fprotocol_2eproto();
  return *default_instance_;
}

DecomposeReq* DecomposeReq::default_instance_ = NULL;

DecomposeReq* DecomposeReq::New() const {
  return new DecomposeReq;
}

void DecomposeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecomposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 armorId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armorid_)));
          set_has_armorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DecomposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 armorId = 1;
  if (has_armorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DecomposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 armorId = 1;
  if (has_armorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DecomposeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 armorId = 1;
    if (has_armorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecomposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecomposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecomposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecomposeReq::MergeFrom(const DecomposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armorid()) {
      set_armorid(from.armorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecomposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecomposeReq::CopyFrom(const DecomposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecomposeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DecomposeReq::Swap(DecomposeReq* other) {
  if (other != this) {
    std::swap(armorid_, other->armorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecomposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecomposeReq_descriptor_;
  metadata.reflection = DecomposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecomposeRes::kItemsFieldNumber;
const int DecomposeRes::kResultFieldNumber;
const int DecomposeRes::kCoinFieldNumber;
#endif  // !_MSC_VER

DecomposeRes::DecomposeRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DecomposeRes::InitAsDefaultInstance() {
}

DecomposeRes::DecomposeRes(const DecomposeRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DecomposeRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecomposeRes::~DecomposeRes() {
  SharedDtor();
}

void DecomposeRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DecomposeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecomposeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecomposeRes_descriptor_;
}

const DecomposeRes& DecomposeRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_smith_5fprotocol_2eproto();
  return *default_instance_;
}

DecomposeRes* DecomposeRes::default_instance_ = NULL;

DecomposeRes* DecomposeRes::New() const {
  return new DecomposeRes;
}

void DecomposeRes::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_ = false;
    coin_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecomposeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.common.Item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int32 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DecomposeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.common.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // optional int32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DecomposeRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.common.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // optional int32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DecomposeRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional int32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  // repeated .protos.common.Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecomposeRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecomposeRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecomposeRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecomposeRes::MergeFrom(const DecomposeRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecomposeRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecomposeRes::CopyFrom(const DecomposeRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecomposeRes::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void DecomposeRes::Swap(DecomposeRes* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(result_, other->result_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecomposeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecomposeRes_descriptor_;
  metadata.reflection = DecomposeRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
