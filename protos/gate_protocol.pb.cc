// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gate_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* ServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gate_5fprotocol_2eproto() {
  protobuf_AddDesc_gate_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gate_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ServerList_descriptor_ = file->message_type(0);
  static const int ServerList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, game_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, server_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, update_server_),
  };
  ServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerList_descriptor_,
      ServerList::default_instance_,
      ServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerList));
  Server_descriptor_ = file->message_type(1);
  static const int Server_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, server_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, server_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, selected_),
  };
  Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gate_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerList_descriptor_, &ServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_descriptor_, &Server::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gate_5fprotocol_2eproto() {
  delete ServerList::default_instance_;
  delete ServerList_reflection_;
  delete Server::default_instance_;
  delete Server_reflection_;
}

void protobuf_AddDesc_gate_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023gate_protocol.proto\022\006protos\"^\n\nServerL"
    "ist\022\024\n\014game_version\030\001 \002(\t\022#\n\013server_list"
    "\030\002 \003(\0132\016.protos.Server\022\025\n\rupdate_server\030"
    "\003 \001(\t\"p\n\006Server\022\023\n\013server_name\030\001 \002(\t\022\023\n\013"
    "server_host\030\002 \002(\t\022\023\n\013server_port\030\003 \002(\005\022\025"
    "\n\rserver_status\030\004 \001(\005\022\020\n\010selected\030\005 \001(\010B"
    "1\n\037anvin.gateway.gateserver.protosB\014Gate"
    "ProtocolH\001", 290);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gate_protocol.proto", &protobuf_RegisterTypes);
  ServerList::default_instance_ = new ServerList();
  Server::default_instance_ = new Server();
  ServerList::default_instance_->InitAsDefaultInstance();
  Server::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gate_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gate_5fprotocol_2eproto {
  StaticDescriptorInitializer_gate_5fprotocol_2eproto() {
    protobuf_AddDesc_gate_5fprotocol_2eproto();
  }
} static_descriptor_initializer_gate_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServerList::kGameVersionFieldNumber;
const int ServerList::kServerListFieldNumber;
const int ServerList::kUpdateServerFieldNumber;
#endif  // !_MSC_VER

ServerList::ServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerList::InitAsDefaultInstance() {
}

ServerList::ServerList(const ServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerList::SharedCtor() {
  _cached_size_ = 0;
  game_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerList::~ServerList() {
  SharedDtor();
}

void ServerList::SharedDtor() {
  if (game_version_ != &::google::protobuf::internal::kEmptyString) {
    delete game_version_;
  }
  if (update_server_ != &::google::protobuf::internal::kEmptyString) {
    delete update_server_;
  }
  if (this != default_instance_) {
  }
}

void ServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerList_descriptor_;
}

const ServerList& ServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_5fprotocol_2eproto();
  return *default_instance_;
}

ServerList* ServerList::default_instance_ = NULL;

ServerList* ServerList::New() const {
  return new ServerList;
}

void ServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_version()) {
      if (game_version_ != &::google::protobuf::internal::kEmptyString) {
        game_version_->clear();
      }
    }
    if (has_update_server()) {
      if (update_server_ != &::google::protobuf::internal::kEmptyString) {
        update_server_->clear();
      }
    }
  }
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string game_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_version().data(), this->game_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_list;
        break;
      }

      // repeated .protos.Server server_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_list;
        if (input->ExpectTag(26)) goto parse_update_server;
        break;
      }

      // optional string update_server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_server().data(), this->update_server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string game_version = 1;
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_version().data(), this->game_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->game_version(), output);
  }

  // repeated .protos.Server server_list = 2;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_list(i), output);
  }

  // optional string update_server = 3;
  if (has_update_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_server().data(), this->update_server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->update_server(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string game_version = 1;
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_version().data(), this->game_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_version(), target);
  }

  // repeated .protos.Server server_list = 2;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server_list(i), target);
  }

  // optional string update_server = 3;
  if (has_update_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_server().data(), this->update_server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update_server(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string game_version = 1;
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_version());
    }

    // optional string update_server = 3;
    if (has_update_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_server());
    }

  }
  // repeated .protos.Server server_list = 2;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerList::MergeFrom(const ServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_version()) {
      set_game_version(from.game_version());
    }
    if (from.has_update_server()) {
      set_update_server(from.update_server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerList::CopyFrom(const ServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < server_list_size(); i++) {
    if (!this->server_list(i).IsInitialized()) return false;
  }
  return true;
}

void ServerList::Swap(ServerList* other) {
  if (other != this) {
    std::swap(game_version_, other->game_version_);
    server_list_.Swap(&other->server_list_);
    std::swap(update_server_, other->update_server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerList_descriptor_;
  metadata.reflection = ServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Server::kServerNameFieldNumber;
const int Server::kServerHostFieldNumber;
const int Server::kServerPortFieldNumber;
const int Server::kServerStatusFieldNumber;
const int Server::kSelectedFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server::InitAsDefaultInstance() {
}

Server::Server(const Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = 0;
  server_status_ = 0;
  selected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  SharedDtor();
}

void Server::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_host_ != &::google::protobuf::internal::kEmptyString) {
    delete server_host_;
  }
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_5fprotocol_2eproto();
  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_host()) {
      if (server_host_ != &::google::protobuf::internal::kEmptyString) {
        server_host_->clear();
      }
    }
    server_port_ = 0;
    server_status_ = 0;
    selected_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_host;
        break;
      }

      // required string server_host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_host().data(), this->server_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_port;
        break;
      }

      // required int32 server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_status;
        break;
      }

      // optional int32 server_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_status_)));
          set_has_server_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_selected;
        break;
      }

      // optional bool selected = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_)));
          set_has_selected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // required string server_host = 2;
  if (has_server_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_host().data(), this->server_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_host(), output);
  }

  // required int32 server_port = 3;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_port(), output);
  }

  // optional int32 server_status = 4;
  if (has_server_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_status(), output);
  }

  // optional bool selected = 5;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->selected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // required string server_host = 2;
  if (has_server_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_host().data(), this->server_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_host(), target);
  }

  // required int32 server_port = 3;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_port(), target);
  }

  // optional int32 server_status = 4;
  if (has_server_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_status(), target);
  }

  // optional bool selected = 5;
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->selected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // required string server_host = 2;
    if (has_server_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_host());
    }

    // required int32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_port());
    }

    // optional int32 server_status = 4;
    if (has_server_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_status());
    }

    // optional bool selected = 5;
    if (has_selected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_host()) {
      set_server_host(from.server_host());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_status()) {
      set_server_status(from.server_status());
    }
    if (from.has_selected()) {
      set_selected(from.selected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_host_, other->server_host_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_status_, other->server_status_);
    std::swap(selected_, other->selected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
