// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth_protocol.proto

#ifndef PROTOBUF_auth_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_auth_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/role_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_auth_5fprotocol_2eproto();
void protobuf_AssignDesc_auth_5fprotocol_2eproto();
void protobuf_ShutdownFile_auth_5fprotocol_2eproto();

class LoginRequest;
class LoginResponse;
class AccountBindReq;
class AcountBindRes;
class InGameRequest;
class InGameResponse;
class ReconnectResponse;

// ===================================================================

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bool reconnect = 3;
  inline bool has_reconnect() const;
  inline void clear_reconnect();
  static const int kReconnectFieldNumber = 3;
  inline bool reconnect() const;
  inline void set_reconnect(bool value);

  // optional int32 roleId = 4;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 4;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // optional string openid = 5;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 5;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional string access_code = 6;
  inline bool has_access_code() const;
  inline void clear_access_code();
  static const int kAccessCodeFieldNumber = 6;
  inline const ::std::string& access_code() const;
  inline void set_access_code(const ::std::string& value);
  inline void set_access_code(const char* value);
  inline void set_access_code(const char* value, size_t size);
  inline ::std::string* mutable_access_code();
  inline ::std::string* release_access_code();
  inline void set_allocated_access_code(::std::string* access_code);

  // @@protoc_insertion_point(class_scope:protos.LoginRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_reconnect();
  inline void clear_has_reconnect();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_access_code();
  inline void clear_has_access_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  bool reconnect_;
  ::google::protobuf::int32 roleid_;
  ::std::string* openid_;
  ::std::string* access_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_auth_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_auth_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_auth_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 authRecode = 1;
  inline bool has_authrecode() const;
  inline void clear_authrecode();
  static const int kAuthRecodeFieldNumber = 1;
  inline ::google::protobuf::int32 authrecode() const;
  inline void set_authrecode(::google::protobuf::int32 value);

  // optional bool hasRole = 2;
  inline bool has_hasrole() const;
  inline void clear_hasrole();
  static const int kHasRoleFieldNumber = 2;
  inline bool hasrole() const;
  inline void set_hasrole(bool value);

  // repeated .protos.common.Role roleList = 3;
  inline int rolelist_size() const;
  inline void clear_rolelist();
  static const int kRoleListFieldNumber = 3;
  inline const ::protos::common::Role& rolelist(int index) const;
  inline ::protos::common::Role* mutable_rolelist(int index);
  inline ::protos::common::Role* add_rolelist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Role >&
      rolelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Role >*
      mutable_rolelist();

  // @@protoc_insertion_point(class_scope:protos.LoginResponse)
 private:
  inline void set_has_authrecode();
  inline void clear_has_authrecode();
  inline void set_has_hasrole();
  inline void clear_has_hasrole();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 authrecode_;
  bool hasrole_;
  ::google::protobuf::RepeatedPtrField< ::protos::common::Role > rolelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_auth_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_auth_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_auth_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class AccountBindReq : public ::google::protobuf::Message {
 public:
  AccountBindReq();
  virtual ~AccountBindReq();

  AccountBindReq(const AccountBindReq& from);

  inline AccountBindReq& operator=(const AccountBindReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountBindReq& default_instance();

  void Swap(AccountBindReq* other);

  // implements Message ----------------------------------------------

  AccountBindReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountBindReq& from);
  void MergeFrom(const AccountBindReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // @@protoc_insertion_point(class_scope:protos.AccountBindReq)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_auth_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_auth_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_auth_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static AccountBindReq* default_instance_;
};
// -------------------------------------------------------------------

class AcountBindRes : public ::google::protobuf::Message {
 public:
  AcountBindRes();
  virtual ~AcountBindRes();

  AcountBindRes(const AcountBindRes& from);

  inline AcountBindRes& operator=(const AcountBindRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcountBindRes& default_instance();

  void Swap(AcountBindRes* other);

  // implements Message ----------------------------------------------

  AcountBindRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcountBindRes& from);
  void MergeFrom(const AcountBindRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:protos.AcountBindRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_auth_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_auth_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_auth_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static AcountBindRes* default_instance_;
};
// -------------------------------------------------------------------

class InGameRequest : public ::google::protobuf::Message {
 public:
  InGameRequest();
  virtual ~InGameRequest();

  InGameRequest(const InGameRequest& from);

  inline InGameRequest& operator=(const InGameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InGameRequest& default_instance();

  void Swap(InGameRequest* other);

  // implements Message ----------------------------------------------

  InGameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InGameRequest& from);
  void MergeFrom(const InGameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.InGameRequest)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_auth_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_auth_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_auth_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static InGameRequest* default_instance_;
};
// -------------------------------------------------------------------

class InGameResponse : public ::google::protobuf::Message {
 public:
  InGameResponse();
  virtual ~InGameResponse();

  InGameResponse(const InGameResponse& from);

  inline InGameResponse& operator=(const InGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InGameResponse& default_instance();

  void Swap(InGameResponse* other);

  // implements Message ----------------------------------------------

  InGameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InGameResponse& from);
  void MergeFrom(const InGameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protos.common.Role myRole = 1;
  inline bool has_myrole() const;
  inline void clear_myrole();
  static const int kMyRoleFieldNumber = 1;
  inline const ::protos::common::Role& myrole() const;
  inline ::protos::common::Role* mutable_myrole();
  inline ::protos::common::Role* release_myrole();
  inline void set_allocated_myrole(::protos::common::Role* myrole);

  // @@protoc_insertion_point(class_scope:protos.InGameResponse)
 private:
  inline void set_has_myrole();
  inline void clear_has_myrole();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protos::common::Role* myrole_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_auth_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_auth_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_auth_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static InGameResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReconnectResponse : public ::google::protobuf::Message {
 public:
  ReconnectResponse();
  virtual ~ReconnectResponse();

  ReconnectResponse(const ReconnectResponse& from);

  inline ReconnectResponse& operator=(const ReconnectResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconnectResponse& default_instance();

  void Swap(ReconnectResponse* other);

  // implements Message ----------------------------------------------

  ReconnectResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconnectResponse& from);
  void MergeFrom(const ReconnectResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional int32 reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.ReconnectResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;
  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_auth_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_auth_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_auth_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ReconnectResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// required string username = 1;
inline bool LoginRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginRequest::username() const {
  return *username_;
}
inline void LoginRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool LoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginRequest::password() const {
  return *password_;
}
inline void LoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool reconnect = 3;
inline bool LoginRequest::has_reconnect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRequest::set_has_reconnect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRequest::clear_has_reconnect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRequest::clear_reconnect() {
  reconnect_ = false;
  clear_has_reconnect();
}
inline bool LoginRequest::reconnect() const {
  return reconnect_;
}
inline void LoginRequest::set_reconnect(bool value) {
  set_has_reconnect();
  reconnect_ = value;
}

// optional int32 roleId = 4;
inline bool LoginRequest::has_roleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRequest::set_has_roleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRequest::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRequest::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 LoginRequest::roleid() const {
  return roleid_;
}
inline void LoginRequest::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string openid = 5;
inline bool LoginRequest::has_openid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRequest::set_has_openid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRequest::clear_has_openid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRequest::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& LoginRequest::openid() const {
  return *openid_;
}
inline void LoginRequest::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void LoginRequest::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void LoginRequest::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* LoginRequest::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string access_code = 6;
inline bool LoginRequest::has_access_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginRequest::set_has_access_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginRequest::clear_has_access_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginRequest::clear_access_code() {
  if (access_code_ != &::google::protobuf::internal::kEmptyString) {
    access_code_->clear();
  }
  clear_has_access_code();
}
inline const ::std::string& LoginRequest::access_code() const {
  return *access_code_;
}
inline void LoginRequest::set_access_code(const ::std::string& value) {
  set_has_access_code();
  if (access_code_ == &::google::protobuf::internal::kEmptyString) {
    access_code_ = new ::std::string;
  }
  access_code_->assign(value);
}
inline void LoginRequest::set_access_code(const char* value) {
  set_has_access_code();
  if (access_code_ == &::google::protobuf::internal::kEmptyString) {
    access_code_ = new ::std::string;
  }
  access_code_->assign(value);
}
inline void LoginRequest::set_access_code(const char* value, size_t size) {
  set_has_access_code();
  if (access_code_ == &::google::protobuf::internal::kEmptyString) {
    access_code_ = new ::std::string;
  }
  access_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_access_code() {
  set_has_access_code();
  if (access_code_ == &::google::protobuf::internal::kEmptyString) {
    access_code_ = new ::std::string;
  }
  return access_code_;
}
inline ::std::string* LoginRequest::release_access_code() {
  clear_has_access_code();
  if (access_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = access_code_;
    access_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_access_code(::std::string* access_code) {
  if (access_code_ != &::google::protobuf::internal::kEmptyString) {
    delete access_code_;
  }
  if (access_code) {
    set_has_access_code();
    access_code_ = access_code;
  } else {
    clear_has_access_code();
    access_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginResponse

// required int32 authRecode = 1;
inline bool LoginResponse::has_authrecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_authrecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_authrecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_authrecode() {
  authrecode_ = 0;
  clear_has_authrecode();
}
inline ::google::protobuf::int32 LoginResponse::authrecode() const {
  return authrecode_;
}
inline void LoginResponse::set_authrecode(::google::protobuf::int32 value) {
  set_has_authrecode();
  authrecode_ = value;
}

// optional bool hasRole = 2;
inline bool LoginResponse::has_hasrole() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_hasrole() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_hasrole() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_hasrole() {
  hasrole_ = false;
  clear_has_hasrole();
}
inline bool LoginResponse::hasrole() const {
  return hasrole_;
}
inline void LoginResponse::set_hasrole(bool value) {
  set_has_hasrole();
  hasrole_ = value;
}

// repeated .protos.common.Role roleList = 3;
inline int LoginResponse::rolelist_size() const {
  return rolelist_.size();
}
inline void LoginResponse::clear_rolelist() {
  rolelist_.Clear();
}
inline const ::protos::common::Role& LoginResponse::rolelist(int index) const {
  return rolelist_.Get(index);
}
inline ::protos::common::Role* LoginResponse::mutable_rolelist(int index) {
  return rolelist_.Mutable(index);
}
inline ::protos::common::Role* LoginResponse::add_rolelist() {
  return rolelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Role >&
LoginResponse::rolelist() const {
  return rolelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Role >*
LoginResponse::mutable_rolelist() {
  return &rolelist_;
}

// -------------------------------------------------------------------

// AccountBindReq

// required string openid = 1;
inline bool AccountBindReq::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountBindReq::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountBindReq::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountBindReq::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& AccountBindReq::openid() const {
  return *openid_;
}
inline void AccountBindReq::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void AccountBindReq::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void AccountBindReq::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountBindReq::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* AccountBindReq::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountBindReq::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AcountBindRes

// required bool result = 1;
inline bool AcountBindRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcountBindRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcountBindRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcountBindRes::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool AcountBindRes::result() const {
  return result_;
}
inline void AcountBindRes::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// InGameRequest

// required int32 roleId = 1;
inline bool InGameRequest::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InGameRequest::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InGameRequest::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InGameRequest::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 InGameRequest::roleid() const {
  return roleid_;
}
inline void InGameRequest::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// InGameResponse

// required .protos.common.Role myRole = 1;
inline bool InGameResponse::has_myrole() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InGameResponse::set_has_myrole() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InGameResponse::clear_has_myrole() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InGameResponse::clear_myrole() {
  if (myrole_ != NULL) myrole_->::protos::common::Role::Clear();
  clear_has_myrole();
}
inline const ::protos::common::Role& InGameResponse::myrole() const {
  return myrole_ != NULL ? *myrole_ : *default_instance_->myrole_;
}
inline ::protos::common::Role* InGameResponse::mutable_myrole() {
  set_has_myrole();
  if (myrole_ == NULL) myrole_ = new ::protos::common::Role;
  return myrole_;
}
inline ::protos::common::Role* InGameResponse::release_myrole() {
  clear_has_myrole();
  ::protos::common::Role* temp = myrole_;
  myrole_ = NULL;
  return temp;
}
inline void InGameResponse::set_allocated_myrole(::protos::common::Role* myrole) {
  delete myrole_;
  myrole_ = myrole;
  if (myrole) {
    set_has_myrole();
  } else {
    clear_has_myrole();
  }
}

// -------------------------------------------------------------------

// ReconnectResponse

// required bool result = 1;
inline bool ReconnectResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconnectResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconnectResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconnectResponse::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool ReconnectResponse::result() const {
  return result_;
}
inline void ReconnectResponse::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional int32 reason = 2;
inline bool ReconnectResponse::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReconnectResponse::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReconnectResponse::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReconnectResponse::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 ReconnectResponse::reason() const {
  return reason_;
}
inline void ReconnectResponse::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_auth_5fprotocol_2eproto__INCLUDED
