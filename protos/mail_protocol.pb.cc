// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mail_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* MailListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mail_5fprotocol_2eproto() {
  protobuf_AddDesc_mail_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mail_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  MailListResponse_descriptor_ = file->message_type(0);
  static const int MailListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListResponse, maillist_),
  };
  MailListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailListResponse_descriptor_,
      MailListResponse::default_instance_,
      MailListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailListResponse));
  MailNotice_descriptor_ = file->message_type(1);
  static const int MailNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailNotice, newmail_),
  };
  MailNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailNotice_descriptor_,
      MailNotice::default_instance_,
      MailNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailNotice));
  MaillRequest_descriptor_ = file->message_type(2);
  static const int MaillRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaillRequest, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaillRequest, ctrltype_),
  };
  MaillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaillRequest_descriptor_,
      MaillRequest::default_instance_,
      MaillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaillRequest));
  MailResponse_descriptor_ = file->message_type(3);
  static const int MailResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailResponse, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailResponse, prizelist_),
  };
  MailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailResponse_descriptor_,
      MailResponse::default_instance_,
      MailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailResponse));
  SendMailRequest_descriptor_ = file->message_type(4);
  static const int SendMailRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailRequest, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailRequest, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailRequest, content_),
  };
  SendMailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMailRequest_descriptor_,
      SendMailRequest::default_instance_,
      SendMailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMailRequest));
  Mail_descriptor_ = file->message_type(5);
  static const int Mail_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, addtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, readed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, attrlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, icon_),
  };
  Mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_descriptor_,
      Mail::default_instance_,
      Mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mail_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailListResponse_descriptor_, &MailListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailNotice_descriptor_, &MailNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaillRequest_descriptor_, &MaillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailResponse_descriptor_, &MailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMailRequest_descriptor_, &SendMailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_descriptor_, &Mail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mail_5fprotocol_2eproto() {
  delete MailListResponse::default_instance_;
  delete MailListResponse_reflection_;
  delete MailNotice::default_instance_;
  delete MailNotice_reflection_;
  delete MaillRequest::default_instance_;
  delete MaillRequest_reflection_;
  delete MailResponse::default_instance_;
  delete MailResponse_reflection_;
  delete SendMailRequest::default_instance_;
  delete SendMailRequest_reflection_;
  delete Mail::default_instance_;
  delete Mail_reflection_;
}

void protobuf_AddDesc_mail_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023mail_protocol.proto\022\006protos\032\031common/pr"
    "ize_common.proto\"2\n\020MailListResponse\022\036\n\010"
    "mailList\030\001 \003(\0132\014.protos.Mail\"\035\n\nMailNoti"
    "ce\022\017\n\007newMail\030\001 \002(\005\"0\n\014MaillRequest\022\016\n\006m"
    "ailId\030\001 \002(\005\022\020\n\010ctrlType\030\002 \002(\005\"c\n\014MailRes"
    "ponse\022\016\n\006result\030\001 \002(\005\022\032\n\004mail\030\002 \001(\0132\014.pr"
    "otos.Mail\022\'\n\tprizeList\030\003 \003(\0132\024.protos.co"
    "mmon.Prize\"C\n\017SendMailRequest\022\020\n\010friendI"
    "d\030\001 \002(\005\022\r\n\005title\030\002 \001(\t\022\017\n\007content\030\003 \001(\t\""
    "\257\001\n\004Mail\022\016\n\006mailId\030\001 \002(\005\022\r\n\005title\030\002 \001(\t\022"
    "\017\n\007content\030\003 \001(\t\022\017\n\007addTime\030\004 \001(\t\022\020\n\010sen"
    "derId\030\005 \001(\005\022\016\n\006sender\030\006 \001(\t\022\016\n\006readed\030\007 "
    "\001(\010\022&\n\010attrList\030\010 \003(\0132\024.protos.common.Pr"
    "ize\022\014\n\004icon\030\t \001(\005B/\n\035dass.server.gameser"
    "ver.protosB\014MailProtocolH\001", 586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mail_protocol.proto", &protobuf_RegisterTypes);
  MailListResponse::default_instance_ = new MailListResponse();
  MailNotice::default_instance_ = new MailNotice();
  MaillRequest::default_instance_ = new MaillRequest();
  MailResponse::default_instance_ = new MailResponse();
  SendMailRequest::default_instance_ = new SendMailRequest();
  Mail::default_instance_ = new Mail();
  MailListResponse::default_instance_->InitAsDefaultInstance();
  MailNotice::default_instance_->InitAsDefaultInstance();
  MaillRequest::default_instance_->InitAsDefaultInstance();
  MailResponse::default_instance_->InitAsDefaultInstance();
  SendMailRequest::default_instance_->InitAsDefaultInstance();
  Mail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mail_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mail_5fprotocol_2eproto {
  StaticDescriptorInitializer_mail_5fprotocol_2eproto() {
    protobuf_AddDesc_mail_5fprotocol_2eproto();
  }
} static_descriptor_initializer_mail_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MailListResponse::kMailListFieldNumber;
#endif  // !_MSC_VER

MailListResponse::MailListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailListResponse::InitAsDefaultInstance() {
}

MailListResponse::MailListResponse(const MailListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailListResponse::~MailListResponse() {
  SharedDtor();
}

void MailListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailListResponse_descriptor_;
}

const MailListResponse& MailListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_5fprotocol_2eproto();
  return *default_instance_;
}

MailListResponse* MailListResponse::default_instance_ = NULL;

MailListResponse* MailListResponse::New() const {
  return new MailListResponse;
}

void MailListResponse::Clear() {
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.Mail mailList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mailList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.Mail mailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maillist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.Mail mailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maillist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .protos.Mail mailList = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailListResponse::MergeFrom(const MailListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailListResponse::CopyFrom(const MailListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailListResponse::IsInitialized() const {

  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  return true;
}

void MailListResponse::Swap(MailListResponse* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailListResponse_descriptor_;
  metadata.reflection = MailListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailNotice::kNewMailFieldNumber;
#endif  // !_MSC_VER

MailNotice::MailNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailNotice::InitAsDefaultInstance() {
}

MailNotice::MailNotice(const MailNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailNotice::SharedCtor() {
  _cached_size_ = 0;
  newmail_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailNotice::~MailNotice() {
  SharedDtor();
}

void MailNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailNotice_descriptor_;
}

const MailNotice& MailNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_5fprotocol_2eproto();
  return *default_instance_;
}

MailNotice* MailNotice::default_instance_ = NULL;

MailNotice* MailNotice::New() const {
  return new MailNotice;
}

void MailNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newmail_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 newMail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newmail_)));
          set_has_newmail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 newMail = 1;
  if (has_newmail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->newmail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 newMail = 1;
  if (has_newmail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->newmail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 newMail = 1;
    if (has_newmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newmail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailNotice::MergeFrom(const MailNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newmail()) {
      set_newmail(from.newmail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailNotice::CopyFrom(const MailNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MailNotice::Swap(MailNotice* other) {
  if (other != this) {
    std::swap(newmail_, other->newmail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailNotice_descriptor_;
  metadata.reflection = MailNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaillRequest::kMailIdFieldNumber;
const int MaillRequest::kCtrlTypeFieldNumber;
#endif  // !_MSC_VER

MaillRequest::MaillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaillRequest::InitAsDefaultInstance() {
}

MaillRequest::MaillRequest(const MaillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaillRequest::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  ctrltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaillRequest::~MaillRequest() {
  SharedDtor();
}

void MaillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaillRequest_descriptor_;
}

const MaillRequest& MaillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_5fprotocol_2eproto();
  return *default_instance_;
}

MaillRequest* MaillRequest::default_instance_ = NULL;

MaillRequest* MaillRequest::New() const {
  return new MaillRequest;
}

void MaillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0;
    ctrltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ctrlType;
        break;
      }

      // required int32 ctrlType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrlType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrltype_)));
          set_has_ctrltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  // required int32 ctrlType = 2;
  if (has_ctrltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ctrltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mailid(), target);
  }

  // required int32 ctrlType = 2;
  if (has_ctrltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ctrltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaillRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // required int32 ctrlType = 2;
    if (has_ctrltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctrltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaillRequest::MergeFrom(const MaillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_ctrltype()) {
      set_ctrltype(from.ctrltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaillRequest::CopyFrom(const MaillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MaillRequest::Swap(MaillRequest* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(ctrltype_, other->ctrltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaillRequest_descriptor_;
  metadata.reflection = MaillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailResponse::kResultFieldNumber;
const int MailResponse::kMailFieldNumber;
const int MailResponse::kPrizeListFieldNumber;
#endif  // !_MSC_VER

MailResponse::MailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailResponse::InitAsDefaultInstance() {
  mail_ = const_cast< ::protos::Mail*>(&::protos::Mail::default_instance());
}

MailResponse::MailResponse(const MailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailResponse::~MailResponse() {
  SharedDtor();
}

void MailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void MailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailResponse_descriptor_;
}

const MailResponse& MailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_5fprotocol_2eproto();
  return *default_instance_;
}

MailResponse* MailResponse::default_instance_ = NULL;

MailResponse* MailResponse::New() const {
  return new MailResponse;
}

void MailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::protos::Mail::Clear();
    }
  }
  prizelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // optional .protos.Mail mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prizeList;
        break;
      }

      // repeated .protos.common.Prize prizeList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prizeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .protos.Mail mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  // repeated .protos.common.Prize prizeList = 3;
  for (int i = 0; i < this->prizelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prizelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .protos.Mail mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  // repeated .protos.common.Prize prizeList = 3;
  for (int i = 0; i < this->prizelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prizelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .protos.Mail mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  // repeated .protos.common.Prize prizeList = 3;
  total_size += 1 * this->prizelist_size();
  for (int i = 0; i < this->prizelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailResponse::MergeFrom(const MailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizelist_.MergeFrom(from.prizelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mail()) {
      mutable_mail()->::protos::Mail::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailResponse::CopyFrom(const MailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void MailResponse::Swap(MailResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mail_, other->mail_);
    prizelist_.Swap(&other->prizelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailResponse_descriptor_;
  metadata.reflection = MailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMailRequest::kFriendIdFieldNumber;
const int SendMailRequest::kTitleFieldNumber;
const int SendMailRequest::kContentFieldNumber;
#endif  // !_MSC_VER

SendMailRequest::SendMailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMailRequest::InitAsDefaultInstance() {
}

SendMailRequest::SendMailRequest(const SendMailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMailRequest::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMailRequest::~SendMailRequest() {
  SharedDtor();
}

void SendMailRequest::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SendMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMailRequest_descriptor_;
}

const SendMailRequest& SendMailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_5fprotocol_2eproto();
  return *default_instance_;
}

SendMailRequest* SendMailRequest::default_instance_ = NULL;

SendMailRequest* SendMailRequest::New() const {
  return new SendMailRequest;
}

void SendMailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friendId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 friendId = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friendid(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 friendId = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friendid(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friendId = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendid());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMailRequest::MergeFrom(const SendMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailRequest::CopyFrom(const SendMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendMailRequest::Swap(SendMailRequest* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMailRequest_descriptor_;
  metadata.reflection = SendMailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail::kMailIdFieldNumber;
const int Mail::kTitleFieldNumber;
const int Mail::kContentFieldNumber;
const int Mail::kAddTimeFieldNumber;
const int Mail::kSenderIdFieldNumber;
const int Mail::kSenderFieldNumber;
const int Mail::kReadedFieldNumber;
const int Mail::kAttrListFieldNumber;
const int Mail::kIconFieldNumber;
#endif  // !_MSC_VER

Mail::Mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail::InitAsDefaultInstance() {
}

Mail::Mail(const Mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderid_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readed_ = false;
  icon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail::~Mail() {
  SharedDtor();
}

void Mail::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (addtime_ != &::google::protobuf::internal::kEmptyString) {
    delete addtime_;
  }
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void Mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_descriptor_;
}

const Mail& Mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_5fprotocol_2eproto();
  return *default_instance_;
}

Mail* Mail::default_instance_ = NULL;

Mail* Mail::New() const {
  return new Mail;
}

void Mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_addtime()) {
      if (addtime_ != &::google::protobuf::internal::kEmptyString) {
        addtime_->clear();
      }
    }
    senderid_ = 0;
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    readed_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    icon_ = 0;
  }
  attrlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_addTime;
        break;
      }

      // optional string addTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addtime().data(), this->addtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_senderId;
        break;
      }

      // optional int32 senderId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sender;
        break;
      }

      // optional string sender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_readed;
        break;
      }

      // optional bool readed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readed_)));
          set_has_readed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attrList;
        break;
      }

      // repeated .protos.common.Prize attrList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attrList;
        if (input->ExpectTag(72)) goto parse_icon;
        break;
      }

      // optional int32 icon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mailid(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional string addTime = 4;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addtime().data(), this->addtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->addtime(), output);
  }

  // optional int32 senderId = 5;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->senderid(), output);
  }

  // optional string sender = 6;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sender(), output);
  }

  // optional bool readed = 7;
  if (has_readed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->readed(), output);
  }

  // repeated .protos.common.Prize attrList = 8;
  for (int i = 0; i < this->attrlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attrlist(i), output);
  }

  // optional int32 icon = 9;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mailid(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional string addTime = 4;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addtime().data(), this->addtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addtime(), target);
  }

  // optional int32 senderId = 5;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->senderid(), target);
  }

  // optional string sender = 6;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sender(), target);
  }

  // optional bool readed = 7;
  if (has_readed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->readed(), target);
  }

  // repeated .protos.common.Prize attrList = 8;
  for (int i = 0; i < this->attrlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attrlist(i), target);
  }

  // optional int32 icon = 9;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailid());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string addTime = 4;
    if (has_addtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addtime());
    }

    // optional int32 senderId = 5;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

    // optional string sender = 6;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional bool readed = 7;
    if (has_readed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 icon = 9;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

  }
  // repeated .protos.common.Prize attrList = 8;
  total_size += 1 * this->attrlist_size();
  for (int i = 0; i < this->attrlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail::MergeFrom(const Mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrlist_.MergeFrom(from.attrlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_addtime()) {
      set_addtime(from.addtime());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_readed()) {
      set_readed(from.readed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail::CopyFrom(const Mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mail::Swap(Mail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(addtime_, other->addtime_);
    std::swap(senderid_, other->senderid_);
    std::swap(sender_, other->sender_);
    std::swap(readed_, other->readed_);
    attrlist_.Swap(&other->attrlist_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_descriptor_;
  metadata.reflection = Mail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
