// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sign_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* SignData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sign_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sign_5fprotocol_2eproto() {
  protobuf_AddDesc_sign_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sign_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  SignData_descriptor_ = file->message_type(0);
  static const int SignData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, resign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, signlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, totallist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, resign_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, can_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, can_resign_),
  };
  SignData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignData_descriptor_,
      SignData::default_instance_,
      SignData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignData));
  SignRequest_descriptor_ = file->message_type(1);
  static const int SignRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRequest, resign_),
  };
  SignRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignRequest_descriptor_,
      SignRequest::default_instance_,
      SignRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignRequest));
  SignResponse_descriptor_ = file->message_type(2);
  static const int SignResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignResponse, resigngold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignResponse, role_),
  };
  SignResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignResponse_descriptor_,
      SignResponse::default_instance_,
      SignResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignResponse));
  Sign_descriptor_ = file->message_type(3);
  static const int Sign_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, vip_),
  };
  Sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sign_descriptor_,
      Sign::default_instance_,
      Sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sign));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sign_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignData_descriptor_, &SignData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignRequest_descriptor_, &SignRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignResponse_descriptor_, &SignResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sign_descriptor_, &Sign::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sign_5fprotocol_2eproto() {
  delete SignData::default_instance_;
  delete SignData_reflection_;
  delete SignRequest::default_instance_;
  delete SignRequest_reflection_;
  delete SignResponse::default_instance_;
  delete SignResponse_reflection_;
  delete Sign::default_instance_;
  delete Sign_reflection_;
}

void protobuf_AddDesc_sign_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2frole_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023sign_protocol.proto\022\006protos\032\030common/ro"
    "le_common.proto\032\031common/prize_common.pro"
    "to\"\244\001\n\010SignData\022\016\n\006resign\030\001 \002(\005\022\014\n\004sign\030"
    "\002 \002(\005\022\036\n\010signList\030\003 \003(\0132\014.protos.Sign\022\037\n"
    "\ttotalList\030\004 \003(\0132\014.protos.Sign\022\023\n\013resign"
    "_gold\030\005 \001(\005\022\020\n\010can_sign\030\006 \001(\010\022\022\n\ncan_res"
    "ign\030\007 \001(\010\"\035\n\013SignRequest\022\016\n\006resign\030\001 \002(\010"
    "\"U\n\014SignResponse\022\016\n\006result\030\001 \002(\005\022\022\n\nresi"
    "gnGold\030\002 \001(\005\022!\n\004role\030\003 \001(\0132\023.protos.comm"
    "on.Role\"U\n\004Sign\022\013\n\003day\030\001 \002(\005\022\016\n\006status\030\002"
    " \002(\005\022#\n\005prize\030\003 \002(\0132\024.protos.common.Priz"
    "e\022\013\n\003vip\030\004 \001(\005B/\n\035dass.server.gameserver"
    ".protosB\014SignProtocolH\001", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sign_protocol.proto", &protobuf_RegisterTypes);
  SignData::default_instance_ = new SignData();
  SignRequest::default_instance_ = new SignRequest();
  SignResponse::default_instance_ = new SignResponse();
  Sign::default_instance_ = new Sign();
  SignData::default_instance_->InitAsDefaultInstance();
  SignRequest::default_instance_->InitAsDefaultInstance();
  SignResponse::default_instance_->InitAsDefaultInstance();
  Sign::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sign_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sign_5fprotocol_2eproto {
  StaticDescriptorInitializer_sign_5fprotocol_2eproto() {
    protobuf_AddDesc_sign_5fprotocol_2eproto();
  }
} static_descriptor_initializer_sign_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SignData::kResignFieldNumber;
const int SignData::kSignFieldNumber;
const int SignData::kSignListFieldNumber;
const int SignData::kTotalListFieldNumber;
const int SignData::kResignGoldFieldNumber;
const int SignData::kCanSignFieldNumber;
const int SignData::kCanResignFieldNumber;
#endif  // !_MSC_VER

SignData::SignData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignData::InitAsDefaultInstance() {
}

SignData::SignData(const SignData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignData::SharedCtor() {
  _cached_size_ = 0;
  resign_ = 0;
  sign_ = 0;
  resign_gold_ = 0;
  can_sign_ = false;
  can_resign_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignData::~SignData() {
  SharedDtor();
}

void SignData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignData_descriptor_;
}

const SignData& SignData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sign_5fprotocol_2eproto();
  return *default_instance_;
}

SignData* SignData::default_instance_ = NULL;

SignData* SignData::New() const {
  return new SignData;
}

void SignData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resign_ = 0;
    sign_ = 0;
    resign_gold_ = 0;
    can_sign_ = false;
    can_resign_ = false;
  }
  signlist_.Clear();
  totallist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resign_)));
          set_has_resign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sign;
        break;
      }

      // required int32 sign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_)));
          set_has_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signList;
        break;
      }

      // repeated .protos.Sign signList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signList;
        if (input->ExpectTag(34)) goto parse_totalList;
        break;
      }

      // repeated .protos.Sign totalList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totalList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totallist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_totalList;
        if (input->ExpectTag(40)) goto parse_resign_gold;
        break;
      }

      // optional int32 resign_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resign_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resign_gold_)));
          set_has_resign_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_can_sign;
        break;
      }

      // optional bool can_sign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_sign_)));
          set_has_can_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_can_resign;
        break;
      }

      // optional bool can_resign = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_resign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_resign_)));
          set_has_can_resign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 resign = 1;
  if (has_resign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resign(), output);
  }

  // required int32 sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sign(), output);
  }

  // repeated .protos.Sign signList = 3;
  for (int i = 0; i < this->signlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signlist(i), output);
  }

  // repeated .protos.Sign totalList = 4;
  for (int i = 0; i < this->totallist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->totallist(i), output);
  }

  // optional int32 resign_gold = 5;
  if (has_resign_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resign_gold(), output);
  }

  // optional bool can_sign = 6;
  if (has_can_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->can_sign(), output);
  }

  // optional bool can_resign = 7;
  if (has_can_resign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->can_resign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 resign = 1;
  if (has_resign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resign(), target);
  }

  // required int32 sign = 2;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sign(), target);
  }

  // repeated .protos.Sign signList = 3;
  for (int i = 0; i < this->signlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signlist(i), target);
  }

  // repeated .protos.Sign totalList = 4;
  for (int i = 0; i < this->totallist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->totallist(i), target);
  }

  // optional int32 resign_gold = 5;
  if (has_resign_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resign_gold(), target);
  }

  // optional bool can_sign = 6;
  if (has_can_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->can_sign(), target);
  }

  // optional bool can_resign = 7;
  if (has_can_resign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->can_resign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 resign = 1;
    if (has_resign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resign());
    }

    // required int32 sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign());
    }

    // optional int32 resign_gold = 5;
    if (has_resign_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resign_gold());
    }

    // optional bool can_sign = 6;
    if (has_can_sign()) {
      total_size += 1 + 1;
    }

    // optional bool can_resign = 7;
    if (has_can_resign()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protos.Sign signList = 3;
  total_size += 1 * this->signlist_size();
  for (int i = 0; i < this->signlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signlist(i));
  }

  // repeated .protos.Sign totalList = 4;
  total_size += 1 * this->totallist_size();
  for (int i = 0; i < this->totallist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totallist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignData::MergeFrom(const SignData& from) {
  GOOGLE_CHECK_NE(&from, this);
  signlist_.MergeFrom(from.signlist_);
  totallist_.MergeFrom(from.totallist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resign()) {
      set_resign(from.resign());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_resign_gold()) {
      set_resign_gold(from.resign_gold());
    }
    if (from.has_can_sign()) {
      set_can_sign(from.can_sign());
    }
    if (from.has_can_resign()) {
      set_can_resign(from.can_resign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignData::CopyFrom(const SignData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < signlist_size(); i++) {
    if (!this->signlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < totallist_size(); i++) {
    if (!this->totallist(i).IsInitialized()) return false;
  }
  return true;
}

void SignData::Swap(SignData* other) {
  if (other != this) {
    std::swap(resign_, other->resign_);
    std::swap(sign_, other->sign_);
    signlist_.Swap(&other->signlist_);
    totallist_.Swap(&other->totallist_);
    std::swap(resign_gold_, other->resign_gold_);
    std::swap(can_sign_, other->can_sign_);
    std::swap(can_resign_, other->can_resign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignData_descriptor_;
  metadata.reflection = SignData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignRequest::kResignFieldNumber;
#endif  // !_MSC_VER

SignRequest::SignRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignRequest::InitAsDefaultInstance() {
}

SignRequest::SignRequest(const SignRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignRequest::SharedCtor() {
  _cached_size_ = 0;
  resign_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignRequest::~SignRequest() {
  SharedDtor();
}

void SignRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRequest_descriptor_;
}

const SignRequest& SignRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sign_5fprotocol_2eproto();
  return *default_instance_;
}

SignRequest* SignRequest::default_instance_ = NULL;

SignRequest* SignRequest::New() const {
  return new SignRequest;
}

void SignRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resign_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool resign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resign_)));
          set_has_resign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool resign = 1;
  if (has_resign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->resign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool resign = 1;
  if (has_resign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->resign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool resign = 1;
    if (has_resign()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignRequest::MergeFrom(const SignRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resign()) {
      set_resign(from.resign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRequest::CopyFrom(const SignRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SignRequest::Swap(SignRequest* other) {
  if (other != this) {
    std::swap(resign_, other->resign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignRequest_descriptor_;
  metadata.reflection = SignRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignResponse::kResultFieldNumber;
const int SignResponse::kResignGoldFieldNumber;
const int SignResponse::kRoleFieldNumber;
#endif  // !_MSC_VER

SignResponse::SignResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignResponse::InitAsDefaultInstance() {
  role_ = const_cast< ::protos::common::Role*>(&::protos::common::Role::default_instance());
}

SignResponse::SignResponse(const SignResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  resigngold_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignResponse::~SignResponse() {
  SharedDtor();
}

void SignResponse::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void SignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignResponse_descriptor_;
}

const SignResponse& SignResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sign_5fprotocol_2eproto();
  return *default_instance_;
}

SignResponse* SignResponse::default_instance_ = NULL;

SignResponse* SignResponse::New() const {
  return new SignResponse;
}

void SignResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    resigngold_ = 0;
    if (has_role()) {
      if (role_ != NULL) role_->::protos::common::Role::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resignGold;
        break;
      }

      // optional int32 resignGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resignGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resigngold_)));
          set_has_resigngold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // optional .protos.common.Role role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 resignGold = 2;
  if (has_resigngold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resigngold(), output);
  }

  // optional .protos.common.Role role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 resignGold = 2;
  if (has_resigngold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resigngold(), target);
  }

  // optional .protos.common.Role role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 resignGold = 2;
    if (has_resigngold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resigngold());
    }

    // optional .protos.common.Role role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignResponse::MergeFrom(const SignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resigngold()) {
      set_resigngold(from.resigngold());
    }
    if (from.has_role()) {
      mutable_role()->::protos::common::Role::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignResponse::CopyFrom(const SignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void SignResponse::Swap(SignResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(resigngold_, other->resigngold_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignResponse_descriptor_;
  metadata.reflection = SignResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sign::kDayFieldNumber;
const int Sign::kStatusFieldNumber;
const int Sign::kPrizeFieldNumber;
const int Sign::kVipFieldNumber;
#endif  // !_MSC_VER

Sign::Sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sign::InitAsDefaultInstance() {
  prize_ = const_cast< ::protos::common::Prize*>(&::protos::common::Prize::default_instance());
}

Sign::Sign(const Sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sign::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  status_ = 0;
  prize_ = NULL;
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sign::~Sign() {
  SharedDtor();
}

void Sign::SharedDtor() {
  if (this != default_instance_) {
    delete prize_;
  }
}

void Sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sign_descriptor_;
}

const Sign& Sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sign_5fprotocol_2eproto();
  return *default_instance_;
}

Sign* Sign::default_instance_ = NULL;

Sign* Sign::New() const {
  return new Sign;
}

void Sign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0;
    status_ = 0;
    if (has_prize()) {
      if (prize_ != NULL) prize_->::protos::common::Prize::Clear();
    }
    vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prize;
        break;
      }

      // required .protos.common.Prize prize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip;
        break;
      }

      // optional int32 vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required .protos.common.Prize prize = 3;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prize(), output);
  }

  // optional int32 vip = 4;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->day(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // required .protos.common.Prize prize = 3;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prize(), target);
  }

  // optional int32 vip = 4;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required .protos.common.Prize prize = 3;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }

    // optional int32 vip = 4;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sign::MergeFrom(const Sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_prize()) {
      mutable_prize()->::protos::common::Prize::MergeFrom(from.prize());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sign::CopyFrom(const Sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Sign::Swap(Sign* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(status_, other->status_);
    std::swap(prize_, other->prize_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sign_descriptor_;
  metadata.reflection = Sign_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
