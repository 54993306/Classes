// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* CreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleIcons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleIcons_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeRoleIcon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeRoleIcon_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCtrlRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCtrlRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_role_5fprotocol_2eproto() {
  protobuf_AddDesc_role_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "role_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  CreateRequest_descriptor_ = file->message_type(0);
  static const int CreateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, rolenation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, rolename_),
  };
  CreateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRequest_descriptor_,
      CreateRequest::default_instance_,
      CreateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRequest));
  CreateResponse_descriptor_ = file->message_type(1);
  static const int CreateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, createrecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, rolelist_),
  };
  CreateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateResponse_descriptor_,
      CreateResponse::default_instance_,
      CreateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateResponse));
  RoleListRequest_descriptor_ = file->message_type(2);
  static const int RoleListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListRequest, mapid_),
  };
  RoleListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleListRequest_descriptor_,
      RoleListRequest::default_instance_,
      RoleListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleListRequest));
  RoleListResponse_descriptor_ = file->message_type(3);
  static const int RoleListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListResponse, rolelist_),
  };
  RoleListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleListResponse_descriptor_,
      RoleListResponse::default_instance_,
      RoleListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleListResponse));
  MoveRequest_descriptor_ = file->message_type(4);
  static const int MoveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, movex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, movey_),
  };
  MoveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveRequest_descriptor_,
      MoveRequest::default_instance_,
      MoveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveRequest));
  MoveResponse_descriptor_ = file->message_type(5);
  static const int MoveResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, movex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, movey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, heading_),
  };
  MoveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveResponse_descriptor_,
      MoveResponse::default_instance_,
      MoveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveResponse));
  ChangeNameReq_descriptor_ = file->message_type(6);
  static const int ChangeNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameReq, rolename_),
  };
  ChangeNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNameReq_descriptor_,
      ChangeNameReq::default_instance_,
      ChangeNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNameReq));
  RoleIcons_descriptor_ = file->message_type(7);
  static const int RoleIcons_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleIcons, icons_),
  };
  RoleIcons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleIcons_descriptor_,
      RoleIcons::default_instance_,
      RoleIcons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleIcons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleIcons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleIcons));
  ChangeRoleIcon_descriptor_ = file->message_type(8);
  static const int ChangeRoleIcon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRoleIcon, iconid_),
  };
  ChangeRoleIcon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeRoleIcon_descriptor_,
      ChangeRoleIcon::default_instance_,
      ChangeRoleIcon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRoleIcon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRoleIcon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeRoleIcon));
  RoleCtrlRes_descriptor_ = file->message_type(9);
  static const int RoleCtrlRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCtrlRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCtrlRes, role_),
  };
  RoleCtrlRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCtrlRes_descriptor_,
      RoleCtrlRes::default_instance_,
      RoleCtrlRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCtrlRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCtrlRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCtrlRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_role_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRequest_descriptor_, &CreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateResponse_descriptor_, &CreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleListRequest_descriptor_, &RoleListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleListResponse_descriptor_, &RoleListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveRequest_descriptor_, &MoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveResponse_descriptor_, &MoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNameReq_descriptor_, &ChangeNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleIcons_descriptor_, &RoleIcons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeRoleIcon_descriptor_, &ChangeRoleIcon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCtrlRes_descriptor_, &RoleCtrlRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_role_5fprotocol_2eproto() {
  delete CreateRequest::default_instance_;
  delete CreateRequest_reflection_;
  delete CreateResponse::default_instance_;
  delete CreateResponse_reflection_;
  delete RoleListRequest::default_instance_;
  delete RoleListRequest_reflection_;
  delete RoleListResponse::default_instance_;
  delete RoleListResponse_reflection_;
  delete MoveRequest::default_instance_;
  delete MoveRequest_reflection_;
  delete MoveResponse::default_instance_;
  delete MoveResponse_reflection_;
  delete ChangeNameReq::default_instance_;
  delete ChangeNameReq_reflection_;
  delete RoleIcons::default_instance_;
  delete RoleIcons_reflection_;
  delete ChangeRoleIcon::default_instance_;
  delete ChangeRoleIcon_reflection_;
  delete RoleCtrlRes::default_instance_;
  delete RoleCtrlRes_reflection_;
}

void protobuf_AddDesc_role_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2frole_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023role_protocol.proto\022\006protos\032\030common/ro"
    "le_common.proto\"5\n\rCreateRequest\022\022\n\nrole"
    "Nation\030\001 \002(\005\022\020\n\010roleName\030\002 \002(\t\"M\n\016Create"
    "Response\022\024\n\014createRecode\030\001 \002(\005\022%\n\010roleLi"
    "st\030\002 \003(\0132\023.protos.common.Role\" \n\017RoleLis"
    "tRequest\022\r\n\005mapId\030\001 \002(\005\"9\n\020RoleListRespo"
    "nse\022%\n\010roleList\030\001 \003(\0132\023.protos.common.Ro"
    "le\"+\n\013MoveRequest\022\r\n\005moveX\030\001 \002(\005\022\r\n\005move"
    "Y\030\002 \002(\005\"M\n\014MoveResponse\022\016\n\006roleId\030\001 \002(\005\022"
    "\r\n\005moveX\030\002 \002(\005\022\r\n\005moveY\030\003 \002(\005\022\017\n\007heading"
    "\030\004 \002(\005\"!\n\rChangeNameReq\022\020\n\010roleName\030\001 \002("
    "\t\"\036\n\tRoleIcons\022\021\n\005icons\030\001 \003(\005B\002\020\001\" \n\016Cha"
    "ngeRoleIcon\022\016\n\006iconId\030\001 \002(\005\"@\n\013RoleCtrlR"
    "es\022\016\n\006result\030\001 \002(\005\022!\n\004role\030\002 \001(\0132\023.proto"
    "s.common.RoleB0\n\036anvin.server.gameserver"
    ".protosB\014RoleProtocolH\001", 623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "role_protocol.proto", &protobuf_RegisterTypes);
  CreateRequest::default_instance_ = new CreateRequest();
  CreateResponse::default_instance_ = new CreateResponse();
  RoleListRequest::default_instance_ = new RoleListRequest();
  RoleListResponse::default_instance_ = new RoleListResponse();
  MoveRequest::default_instance_ = new MoveRequest();
  MoveResponse::default_instance_ = new MoveResponse();
  ChangeNameReq::default_instance_ = new ChangeNameReq();
  RoleIcons::default_instance_ = new RoleIcons();
  ChangeRoleIcon::default_instance_ = new ChangeRoleIcon();
  RoleCtrlRes::default_instance_ = new RoleCtrlRes();
  CreateRequest::default_instance_->InitAsDefaultInstance();
  CreateResponse::default_instance_->InitAsDefaultInstance();
  RoleListRequest::default_instance_->InitAsDefaultInstance();
  RoleListResponse::default_instance_->InitAsDefaultInstance();
  MoveRequest::default_instance_->InitAsDefaultInstance();
  MoveResponse::default_instance_->InitAsDefaultInstance();
  ChangeNameReq::default_instance_->InitAsDefaultInstance();
  RoleIcons::default_instance_->InitAsDefaultInstance();
  ChangeRoleIcon::default_instance_->InitAsDefaultInstance();
  RoleCtrlRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_role_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_role_5fprotocol_2eproto {
  StaticDescriptorInitializer_role_5fprotocol_2eproto() {
    protobuf_AddDesc_role_5fprotocol_2eproto();
  }
} static_descriptor_initializer_role_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateRequest::kRoleNationFieldNumber;
const int CreateRequest::kRoleNameFieldNumber;
#endif  // !_MSC_VER

CreateRequest::CreateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRequest::InitAsDefaultInstance() {
}

CreateRequest::CreateRequest(const CreateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRequest::SharedCtor() {
  _cached_size_ = 0;
  rolenation_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRequest::~CreateRequest() {
  SharedDtor();
}

void CreateRequest::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void CreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRequest_descriptor_;
}

const CreateRequest& CreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

CreateRequest* CreateRequest::default_instance_ = NULL;

CreateRequest* CreateRequest::New() const {
  return new CreateRequest;
}

void CreateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rolenation_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleNation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolenation_)));
          set_has_rolenation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // required string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleNation = 1;
  if (has_rolenation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rolenation(), output);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleNation = 1;
  if (has_rolenation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rolenation(), target);
  }

  // required string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleNation = 1;
    if (has_rolenation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolenation());
    }

    // required string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRequest::MergeFrom(const CreateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolenation()) {
      set_rolenation(from.rolenation());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateRequest::Swap(CreateRequest* other) {
  if (other != this) {
    std::swap(rolenation_, other->rolenation_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRequest_descriptor_;
  metadata.reflection = CreateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateResponse::kCreateRecodeFieldNumber;
const int CreateResponse::kRoleListFieldNumber;
#endif  // !_MSC_VER

CreateResponse::CreateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateResponse::InitAsDefaultInstance() {
}

CreateResponse::CreateResponse(const CreateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateResponse::SharedCtor() {
  _cached_size_ = 0;
  createrecode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateResponse::~CreateResponse() {
  SharedDtor();
}

void CreateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateResponse_descriptor_;
}

const CreateResponse& CreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

CreateResponse* CreateResponse::default_instance_ = NULL;

CreateResponse* CreateResponse::New() const {
  return new CreateResponse;
}

void CreateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    createrecode_ = 0;
  }
  rolelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 createRecode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createrecode_)));
          set_has_createrecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleList;
        break;
      }

      // repeated .protos.common.Role roleList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 createRecode = 1;
  if (has_createrecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->createrecode(), output);
  }

  // repeated .protos.common.Role roleList = 2;
  for (int i = 0; i < this->rolelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rolelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 createRecode = 1;
  if (has_createrecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->createrecode(), target);
  }

  // repeated .protos.common.Role roleList = 2;
  for (int i = 0; i < this->rolelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rolelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 createRecode = 1;
    if (has_createrecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createrecode());
    }

  }
  // repeated .protos.common.Role roleList = 2;
  total_size += 1 * this->rolelist_size();
  for (int i = 0; i < this->rolelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateResponse::MergeFrom(const CreateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolelist_.MergeFrom(from.rolelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createrecode()) {
      set_createrecode(from.createrecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rolelist_size(); i++) {
    if (!this->rolelist(i).IsInitialized()) return false;
  }
  return true;
}

void CreateResponse::Swap(CreateResponse* other) {
  if (other != this) {
    std::swap(createrecode_, other->createrecode_);
    rolelist_.Swap(&other->rolelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateResponse_descriptor_;
  metadata.reflection = CreateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleListRequest::kMapIdFieldNumber;
#endif  // !_MSC_VER

RoleListRequest::RoleListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleListRequest::InitAsDefaultInstance() {
}

RoleListRequest::RoleListRequest(const RoleListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleListRequest::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleListRequest::~RoleListRequest() {
  SharedDtor();
}

void RoleListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleListRequest_descriptor_;
}

const RoleListRequest& RoleListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

RoleListRequest* RoleListRequest::default_instance_ = NULL;

RoleListRequest* RoleListRequest::New() const {
  return new RoleListRequest;
}

void RoleListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleListRequest::MergeFrom(const RoleListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleListRequest::CopyFrom(const RoleListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleListRequest::Swap(RoleListRequest* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleListRequest_descriptor_;
  metadata.reflection = RoleListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleListResponse::kRoleListFieldNumber;
#endif  // !_MSC_VER

RoleListResponse::RoleListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleListResponse::InitAsDefaultInstance() {
}

RoleListResponse::RoleListResponse(const RoleListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleListResponse::~RoleListResponse() {
  SharedDtor();
}

void RoleListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleListResponse_descriptor_;
}

const RoleListResponse& RoleListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

RoleListResponse* RoleListResponse::default_instance_ = NULL;

RoleListResponse* RoleListResponse::New() const {
  return new RoleListResponse;
}

void RoleListResponse::Clear() {
  rolelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.common.Role roleList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.common.Role roleList = 1;
  for (int i = 0; i < this->rolelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rolelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.common.Role roleList = 1;
  for (int i = 0; i < this->rolelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rolelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .protos.common.Role roleList = 1;
  total_size += 1 * this->rolelist_size();
  for (int i = 0; i < this->rolelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleListResponse::MergeFrom(const RoleListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolelist_.MergeFrom(from.rolelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleListResponse::CopyFrom(const RoleListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListResponse::IsInitialized() const {

  for (int i = 0; i < rolelist_size(); i++) {
    if (!this->rolelist(i).IsInitialized()) return false;
  }
  return true;
}

void RoleListResponse::Swap(RoleListResponse* other) {
  if (other != this) {
    rolelist_.Swap(&other->rolelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleListResponse_descriptor_;
  metadata.reflection = RoleListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveRequest::kMoveXFieldNumber;
const int MoveRequest::kMoveYFieldNumber;
#endif  // !_MSC_VER

MoveRequest::MoveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveRequest::InitAsDefaultInstance() {
}

MoveRequest::MoveRequest(const MoveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveRequest::SharedCtor() {
  _cached_size_ = 0;
  movex_ = 0;
  movey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveRequest::~MoveRequest() {
  SharedDtor();
}

void MoveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveRequest_descriptor_;
}

const MoveRequest& MoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

MoveRequest* MoveRequest::default_instance_ = NULL;

MoveRequest* MoveRequest::New() const {
  return new MoveRequest;
}

void MoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    movex_ = 0;
    movey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 moveX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movex_)));
          set_has_movex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moveY;
        break;
      }

      // required int32 moveY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movey_)));
          set_has_movey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 moveX = 1;
  if (has_movex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->movex(), output);
  }

  // required int32 moveY = 2;
  if (has_movey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 moveX = 1;
  if (has_movex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->movex(), target);
  }

  // required int32 moveY = 2;
  if (has_movey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 moveX = 1;
    if (has_movex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movex());
    }

    // required int32 moveY = 2;
    if (has_movey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveRequest::MergeFrom(const MoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movex()) {
      set_movex(from.movex());
    }
    if (from.has_movey()) {
      set_movey(from.movey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MoveRequest::Swap(MoveRequest* other) {
  if (other != this) {
    std::swap(movex_, other->movex_);
    std::swap(movey_, other->movey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveRequest_descriptor_;
  metadata.reflection = MoveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveResponse::kRoleIdFieldNumber;
const int MoveResponse::kMoveXFieldNumber;
const int MoveResponse::kMoveYFieldNumber;
const int MoveResponse::kHeadingFieldNumber;
#endif  // !_MSC_VER

MoveResponse::MoveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveResponse::InitAsDefaultInstance() {
}

MoveResponse::MoveResponse(const MoveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveResponse::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  movex_ = 0;
  movey_ = 0;
  heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveResponse::~MoveResponse() {
  SharedDtor();
}

void MoveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveResponse_descriptor_;
}

const MoveResponse& MoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

MoveResponse* MoveResponse::default_instance_ = NULL;

MoveResponse* MoveResponse::New() const {
  return new MoveResponse;
}

void MoveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    movex_ = 0;
    movey_ = 0;
    heading_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moveX;
        break;
      }

      // required int32 moveX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movex_)));
          set_has_movex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moveY;
        break;
      }

      // required int32 moveY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movey_)));
          set_has_movey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_heading;
        break;
      }

      // required int32 heading = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 moveX = 2;
  if (has_movex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movex(), output);
  }

  // required int32 moveY = 3;
  if (has_movey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->movey(), output);
  }

  // required int32 heading = 4;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->heading(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 moveX = 2;
  if (has_movex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movex(), target);
  }

  // required int32 moveY = 3;
  if (has_movey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->movey(), target);
  }

  // required int32 heading = 4;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->heading(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required int32 moveX = 2;
    if (has_movex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movex());
    }

    // required int32 moveY = 3;
    if (has_movey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movey());
    }

    // required int32 heading = 4;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heading());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveResponse::MergeFrom(const MoveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_movex()) {
      set_movex(from.movex());
    }
    if (from.has_movey()) {
      set_movey(from.movey());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveResponse::CopyFrom(const MoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MoveResponse::Swap(MoveResponse* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(movex_, other->movex_);
    std::swap(movey_, other->movey_);
    std::swap(heading_, other->heading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveResponse_descriptor_;
  metadata.reflection = MoveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNameReq::kRoleNameFieldNumber;
#endif  // !_MSC_VER

ChangeNameReq::ChangeNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeNameReq::InitAsDefaultInstance() {
}

ChangeNameReq::ChangeNameReq(const ChangeNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeNameReq::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNameReq::~ChangeNameReq() {
  SharedDtor();
}

void ChangeNameReq::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void ChangeNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNameReq_descriptor_;
}

const ChangeNameReq& ChangeNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

ChangeNameReq* ChangeNameReq::default_instance_ = NULL;

ChangeNameReq* ChangeNameReq::New() const {
  return new ChangeNameReq;
}

void ChangeNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNameReq::MergeFrom(const ChangeNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNameReq::CopyFrom(const ChangeNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeNameReq::Swap(ChangeNameReq* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNameReq_descriptor_;
  metadata.reflection = ChangeNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleIcons::kIconsFieldNumber;
#endif  // !_MSC_VER

RoleIcons::RoleIcons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleIcons::InitAsDefaultInstance() {
}

RoleIcons::RoleIcons(const RoleIcons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleIcons::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleIcons::~RoleIcons() {
  SharedDtor();
}

void RoleIcons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleIcons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleIcons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleIcons_descriptor_;
}

const RoleIcons& RoleIcons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

RoleIcons* RoleIcons::default_instance_ = NULL;

RoleIcons* RoleIcons::New() const {
  return new RoleIcons;
}

void RoleIcons::Clear() {
  icons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleIcons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 icons = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_icons())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_icons())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleIcons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 icons = 1 [packed = true];
  if (this->icons_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_icons_cached_byte_size_);
  }
  for (int i = 0; i < this->icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->icons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleIcons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 icons = 1 [packed = true];
  if (this->icons_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _icons_cached_byte_size_, target);
  }
  for (int i = 0; i < this->icons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->icons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleIcons::ByteSize() const {
  int total_size = 0;

  // repeated int32 icons = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->icons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->icons(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _icons_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleIcons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleIcons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleIcons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleIcons::MergeFrom(const RoleIcons& from) {
  GOOGLE_CHECK_NE(&from, this);
  icons_.MergeFrom(from.icons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleIcons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleIcons::CopyFrom(const RoleIcons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleIcons::IsInitialized() const {

  return true;
}

void RoleIcons::Swap(RoleIcons* other) {
  if (other != this) {
    icons_.Swap(&other->icons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleIcons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleIcons_descriptor_;
  metadata.reflection = RoleIcons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeRoleIcon::kIconIdFieldNumber;
#endif  // !_MSC_VER

ChangeRoleIcon::ChangeRoleIcon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeRoleIcon::InitAsDefaultInstance() {
}

ChangeRoleIcon::ChangeRoleIcon(const ChangeRoleIcon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeRoleIcon::SharedCtor() {
  _cached_size_ = 0;
  iconid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeRoleIcon::~ChangeRoleIcon() {
  SharedDtor();
}

void ChangeRoleIcon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeRoleIcon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRoleIcon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeRoleIcon_descriptor_;
}

const ChangeRoleIcon& ChangeRoleIcon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

ChangeRoleIcon* ChangeRoleIcon::default_instance_ = NULL;

ChangeRoleIcon* ChangeRoleIcon::New() const {
  return new ChangeRoleIcon;
}

void ChangeRoleIcon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iconid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeRoleIcon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iconId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeRoleIcon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iconId = 1;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iconid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeRoleIcon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iconId = 1;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iconid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeRoleIcon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iconId = 1;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRoleIcon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeRoleIcon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeRoleIcon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeRoleIcon::MergeFrom(const ChangeRoleIcon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeRoleIcon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRoleIcon::CopyFrom(const ChangeRoleIcon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRoleIcon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeRoleIcon::Swap(ChangeRoleIcon* other) {
  if (other != this) {
    std::swap(iconid_, other->iconid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeRoleIcon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeRoleIcon_descriptor_;
  metadata.reflection = ChangeRoleIcon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCtrlRes::kResultFieldNumber;
const int RoleCtrlRes::kRoleFieldNumber;
#endif  // !_MSC_VER

RoleCtrlRes::RoleCtrlRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleCtrlRes::InitAsDefaultInstance() {
  role_ = const_cast< ::protos::common::Role*>(&::protos::common::Role::default_instance());
}

RoleCtrlRes::RoleCtrlRes(const RoleCtrlRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleCtrlRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCtrlRes::~RoleCtrlRes() {
  SharedDtor();
}

void RoleCtrlRes::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void RoleCtrlRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCtrlRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCtrlRes_descriptor_;
}

const RoleCtrlRes& RoleCtrlRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_5fprotocol_2eproto();
  return *default_instance_;
}

RoleCtrlRes* RoleCtrlRes::default_instance_ = NULL;

RoleCtrlRes* RoleCtrlRes::New() const {
  return new RoleCtrlRes;
}

void RoleCtrlRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_role()) {
      if (role_ != NULL) role_->::protos::common::Role::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCtrlRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // optional .protos.common.Role role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleCtrlRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .protos.common.Role role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleCtrlRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .protos.common.Role role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleCtrlRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .protos.common.Role role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCtrlRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCtrlRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCtrlRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCtrlRes::MergeFrom(const RoleCtrlRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role()) {
      mutable_role()->::protos::common::Role::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCtrlRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCtrlRes::CopyFrom(const RoleCtrlRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCtrlRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void RoleCtrlRes::Swap(RoleCtrlRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCtrlRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCtrlRes_descriptor_;
  metadata.reflection = RoleCtrlRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
