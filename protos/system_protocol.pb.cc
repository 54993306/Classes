// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* Disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bulletin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bulletin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardExchangeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardExchangeRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTips_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_system_5fprotocol_2eproto() {
  protobuf_AddDesc_system_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "system_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  Disconnect_descriptor_ = file->message_type(0);
  static const int Disconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, reason_),
  };
  Disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Disconnect_descriptor_,
      Disconnect::default_instance_,
      Disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Disconnect));
  Bulletin_descriptor_ = file->message_type(1);
  static const int Bulletin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bulletin, text_),
  };
  Bulletin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bulletin_descriptor_,
      Bulletin::default_instance_,
      Bulletin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bulletin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bulletin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bulletin));
  CardExchangeReq_descriptor_ = file->message_type(2);
  static const int CardExchangeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardExchangeReq, card_no_),
  };
  CardExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardExchangeReq_descriptor_,
      CardExchangeReq::default_instance_,
      CardExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardExchangeReq));
  CardExchangeRes_descriptor_ = file->message_type(3);
  static const int CardExchangeRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardExchangeRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardExchangeRes, prize_list_),
  };
  CardExchangeRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardExchangeRes_descriptor_,
      CardExchangeRes::default_instance_,
      CardExchangeRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardExchangeRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardExchangeRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardExchangeRes));
  GameTips_descriptor_ = file->message_type(4);
  static const int GameTips_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, mailtips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, tasktips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, lotterytips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, herotips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, farmtips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, strentips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, acttips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, shoptips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, bountytips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, risingtips_),
  };
  GameTips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTips_descriptor_,
      GameTips::default_instance_,
      GameTips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTips));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_system_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Disconnect_descriptor_, &Disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bulletin_descriptor_, &Bulletin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardExchangeReq_descriptor_, &CardExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardExchangeRes_descriptor_, &CardExchangeRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTips_descriptor_, &GameTips::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_system_5fprotocol_2eproto() {
  delete Disconnect::default_instance_;
  delete Disconnect_reflection_;
  delete Bulletin::default_instance_;
  delete Bulletin_reflection_;
  delete CardExchangeReq::default_instance_;
  delete CardExchangeReq_reflection_;
  delete CardExchangeRes::default_instance_;
  delete CardExchangeRes_reflection_;
  delete GameTips::default_instance_;
  delete GameTips_reflection_;
}

void protobuf_AddDesc_system_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025system_protocol.proto\022\006protos\032\031common/"
    "prize_common.proto\"\034\n\nDisconnect\022\016\n\006reas"
    "on\030\001 \002(\005\"\030\n\010Bulletin\022\014\n\004text\030\001 \002(\t\"\"\n\017Ca"
    "rdExchangeReq\022\017\n\007card_no\030\001 \002(\t\"K\n\017CardEx"
    "changeRes\022\016\n\006result\030\001 \002(\005\022(\n\nprize_list\030"
    "\002 \003(\0132\024.protos.common.Prize\"\305\001\n\010GameTips"
    "\022\020\n\010mailTips\030\001 \001(\010\022\020\n\010taskTips\030\002 \001(\010\022\023\n\013"
    "lotteryTips\030\003 \001(\010\022\020\n\010heroTips\030\004 \001(\010\022\020\n\010f"
    "armTips\030\005 \001(\010\022\021\n\tstrenTips\030\006 \001(\010\022\017\n\007actT"
    "ips\030\007 \001(\010\022\020\n\010shopTips\030\010 \001(\010\022\022\n\nbountyTip"
    "s\030\t \001(\010\022\022\n\nrisingTips\030\n \001(\010B1\n\035dass.serv"
    "er.gameserver.protosB\016SystemProtocolH\001", 478);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system_protocol.proto", &protobuf_RegisterTypes);
  Disconnect::default_instance_ = new Disconnect();
  Bulletin::default_instance_ = new Bulletin();
  CardExchangeReq::default_instance_ = new CardExchangeReq();
  CardExchangeRes::default_instance_ = new CardExchangeRes();
  GameTips::default_instance_ = new GameTips();
  Disconnect::default_instance_->InitAsDefaultInstance();
  Bulletin::default_instance_->InitAsDefaultInstance();
  CardExchangeReq::default_instance_->InitAsDefaultInstance();
  CardExchangeRes::default_instance_->InitAsDefaultInstance();
  GameTips::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_system_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_system_5fprotocol_2eproto {
  StaticDescriptorInitializer_system_5fprotocol_2eproto() {
    protobuf_AddDesc_system_5fprotocol_2eproto();
  }
} static_descriptor_initializer_system_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Disconnect::kReasonFieldNumber;
#endif  // !_MSC_VER

Disconnect::Disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Disconnect::InitAsDefaultInstance() {
}

Disconnect::Disconnect(const Disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Disconnect::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Disconnect::~Disconnect() {
  SharedDtor();
}

void Disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Disconnect_descriptor_;
}

const Disconnect& Disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_5fprotocol_2eproto();
  return *default_instance_;
}

Disconnect* Disconnect::default_instance_ = NULL;

Disconnect* Disconnect::New() const {
  return new Disconnect;
}

void Disconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Disconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Disconnect::MergeFrom(const Disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disconnect::CopyFrom(const Disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Disconnect::Swap(Disconnect* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Disconnect_descriptor_;
  metadata.reflection = Disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bulletin::kTextFieldNumber;
#endif  // !_MSC_VER

Bulletin::Bulletin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bulletin::InitAsDefaultInstance() {
}

Bulletin::Bulletin(const Bulletin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bulletin::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bulletin::~Bulletin() {
  SharedDtor();
}

void Bulletin::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Bulletin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bulletin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bulletin_descriptor_;
}

const Bulletin& Bulletin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_5fprotocol_2eproto();
  return *default_instance_;
}

Bulletin* Bulletin::default_instance_ = NULL;

Bulletin* Bulletin::New() const {
  return new Bulletin;
}

void Bulletin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bulletin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bulletin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bulletin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bulletin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bulletin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bulletin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bulletin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bulletin::MergeFrom(const Bulletin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bulletin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bulletin::CopyFrom(const Bulletin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bulletin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Bulletin::Swap(Bulletin* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bulletin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bulletin_descriptor_;
  metadata.reflection = Bulletin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardExchangeReq::kCardNoFieldNumber;
#endif  // !_MSC_VER

CardExchangeReq::CardExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardExchangeReq::InitAsDefaultInstance() {
}

CardExchangeReq::CardExchangeReq(const CardExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardExchangeReq::~CardExchangeReq() {
  SharedDtor();
}

void CardExchangeReq::SharedDtor() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (this != default_instance_) {
  }
}

void CardExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardExchangeReq_descriptor_;
}

const CardExchangeReq& CardExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_5fprotocol_2eproto();
  return *default_instance_;
}

CardExchangeReq* CardExchangeReq::default_instance_ = NULL;

CardExchangeReq* CardExchangeReq::New() const {
  return new CardExchangeReq;
}

void CardExchangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string card_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string card_no = 1;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->card_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string card_no = 1;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string card_no = 1;
    if (has_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardExchangeReq::MergeFrom(const CardExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardExchangeReq::CopyFrom(const CardExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardExchangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CardExchangeReq::Swap(CardExchangeReq* other) {
  if (other != this) {
    std::swap(card_no_, other->card_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardExchangeReq_descriptor_;
  metadata.reflection = CardExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardExchangeRes::kResultFieldNumber;
const int CardExchangeRes::kPrizeListFieldNumber;
#endif  // !_MSC_VER

CardExchangeRes::CardExchangeRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardExchangeRes::InitAsDefaultInstance() {
}

CardExchangeRes::CardExchangeRes(const CardExchangeRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardExchangeRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardExchangeRes::~CardExchangeRes() {
  SharedDtor();
}

void CardExchangeRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardExchangeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardExchangeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardExchangeRes_descriptor_;
}

const CardExchangeRes& CardExchangeRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_5fprotocol_2eproto();
  return *default_instance_;
}

CardExchangeRes* CardExchangeRes::default_instance_ = NULL;

CardExchangeRes* CardExchangeRes::New() const {
  return new CardExchangeRes;
}

void CardExchangeRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  prize_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardExchangeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prize_list;
        break;
      }

      // repeated .protos.common.Prize prize_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prize_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardExchangeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .protos.common.Prize prize_list = 2;
  for (int i = 0; i < this->prize_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prize_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardExchangeRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .protos.common.Prize prize_list = 2;
  for (int i = 0; i < this->prize_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prize_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardExchangeRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .protos.common.Prize prize_list = 2;
  total_size += 1 * this->prize_list_size();
  for (int i = 0; i < this->prize_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardExchangeRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardExchangeRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardExchangeRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardExchangeRes::MergeFrom(const CardExchangeRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_list_.MergeFrom(from.prize_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardExchangeRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardExchangeRes::CopyFrom(const CardExchangeRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardExchangeRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CardExchangeRes::Swap(CardExchangeRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    prize_list_.Swap(&other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardExchangeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardExchangeRes_descriptor_;
  metadata.reflection = CardExchangeRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTips::kMailTipsFieldNumber;
const int GameTips::kTaskTipsFieldNumber;
const int GameTips::kLotteryTipsFieldNumber;
const int GameTips::kHeroTipsFieldNumber;
const int GameTips::kFarmTipsFieldNumber;
const int GameTips::kStrenTipsFieldNumber;
const int GameTips::kActTipsFieldNumber;
const int GameTips::kShopTipsFieldNumber;
const int GameTips::kBountyTipsFieldNumber;
const int GameTips::kRisingTipsFieldNumber;
#endif  // !_MSC_VER

GameTips::GameTips()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameTips::InitAsDefaultInstance() {
}

GameTips::GameTips(const GameTips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameTips::SharedCtor() {
  _cached_size_ = 0;
  mailtips_ = false;
  tasktips_ = false;
  lotterytips_ = false;
  herotips_ = false;
  farmtips_ = false;
  strentips_ = false;
  acttips_ = false;
  shoptips_ = false;
  bountytips_ = false;
  risingtips_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTips::~GameTips() {
  SharedDtor();
}

void GameTips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTips_descriptor_;
}

const GameTips& GameTips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_5fprotocol_2eproto();
  return *default_instance_;
}

GameTips* GameTips::default_instance_ = NULL;

GameTips* GameTips::New() const {
  return new GameTips;
}

void GameTips::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailtips_ = false;
    tasktips_ = false;
    lotterytips_ = false;
    herotips_ = false;
    farmtips_ = false;
    strentips_ = false;
    acttips_ = false;
    shoptips_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bountytips_ = false;
    risingtips_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool mailTips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mailtips_)));
          set_has_mailtips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskTips;
        break;
      }

      // optional bool taskTips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tasktips_)));
          set_has_tasktips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lotteryTips;
        break;
      }

      // optional bool lotteryTips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lotteryTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lotterytips_)));
          set_has_lotterytips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_heroTips;
        break;
      }

      // optional bool heroTips = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &herotips_)));
          set_has_herotips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_farmTips;
        break;
      }

      // optional bool farmTips = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_farmTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &farmtips_)));
          set_has_farmtips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strenTips;
        break;
      }

      // optional bool strenTips = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strenTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strentips_)));
          set_has_strentips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_actTips;
        break;
      }

      // optional bool actTips = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acttips_)));
          set_has_acttips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_shopTips;
        break;
      }

      // optional bool shopTips = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shoptips_)));
          set_has_shoptips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bountyTips;
        break;
      }

      // optional bool bountyTips = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bountyTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bountytips_)));
          set_has_bountytips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_risingTips;
        break;
      }

      // optional bool risingTips = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_risingTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &risingtips_)));
          set_has_risingtips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool mailTips = 1;
  if (has_mailtips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->mailtips(), output);
  }

  // optional bool taskTips = 2;
  if (has_tasktips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tasktips(), output);
  }

  // optional bool lotteryTips = 3;
  if (has_lotterytips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lotterytips(), output);
  }

  // optional bool heroTips = 4;
  if (has_herotips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->herotips(), output);
  }

  // optional bool farmTips = 5;
  if (has_farmtips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->farmtips(), output);
  }

  // optional bool strenTips = 6;
  if (has_strentips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->strentips(), output);
  }

  // optional bool actTips = 7;
  if (has_acttips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->acttips(), output);
  }

  // optional bool shopTips = 8;
  if (has_shoptips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shoptips(), output);
  }

  // optional bool bountyTips = 9;
  if (has_bountytips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->bountytips(), output);
  }

  // optional bool risingTips = 10;
  if (has_risingtips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->risingtips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameTips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool mailTips = 1;
  if (has_mailtips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->mailtips(), target);
  }

  // optional bool taskTips = 2;
  if (has_tasktips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tasktips(), target);
  }

  // optional bool lotteryTips = 3;
  if (has_lotterytips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lotterytips(), target);
  }

  // optional bool heroTips = 4;
  if (has_herotips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->herotips(), target);
  }

  // optional bool farmTips = 5;
  if (has_farmtips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->farmtips(), target);
  }

  // optional bool strenTips = 6;
  if (has_strentips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->strentips(), target);
  }

  // optional bool actTips = 7;
  if (has_acttips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->acttips(), target);
  }

  // optional bool shopTips = 8;
  if (has_shoptips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shoptips(), target);
  }

  // optional bool bountyTips = 9;
  if (has_bountytips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->bountytips(), target);
  }

  // optional bool risingTips = 10;
  if (has_risingtips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->risingtips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameTips::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool mailTips = 1;
    if (has_mailtips()) {
      total_size += 1 + 1;
    }

    // optional bool taskTips = 2;
    if (has_tasktips()) {
      total_size += 1 + 1;
    }

    // optional bool lotteryTips = 3;
    if (has_lotterytips()) {
      total_size += 1 + 1;
    }

    // optional bool heroTips = 4;
    if (has_herotips()) {
      total_size += 1 + 1;
    }

    // optional bool farmTips = 5;
    if (has_farmtips()) {
      total_size += 1 + 1;
    }

    // optional bool strenTips = 6;
    if (has_strentips()) {
      total_size += 1 + 1;
    }

    // optional bool actTips = 7;
    if (has_acttips()) {
      total_size += 1 + 1;
    }

    // optional bool shopTips = 8;
    if (has_shoptips()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool bountyTips = 9;
    if (has_bountytips()) {
      total_size += 1 + 1;
    }

    // optional bool risingTips = 10;
    if (has_risingtips()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTips::MergeFrom(const GameTips& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailtips()) {
      set_mailtips(from.mailtips());
    }
    if (from.has_tasktips()) {
      set_tasktips(from.tasktips());
    }
    if (from.has_lotterytips()) {
      set_lotterytips(from.lotterytips());
    }
    if (from.has_herotips()) {
      set_herotips(from.herotips());
    }
    if (from.has_farmtips()) {
      set_farmtips(from.farmtips());
    }
    if (from.has_strentips()) {
      set_strentips(from.strentips());
    }
    if (from.has_acttips()) {
      set_acttips(from.acttips());
    }
    if (from.has_shoptips()) {
      set_shoptips(from.shoptips());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bountytips()) {
      set_bountytips(from.bountytips());
    }
    if (from.has_risingtips()) {
      set_risingtips(from.risingtips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTips::CopyFrom(const GameTips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTips::IsInitialized() const {

  return true;
}

void GameTips::Swap(GameTips* other) {
  if (other != this) {
    std::swap(mailtips_, other->mailtips_);
    std::swap(tasktips_, other->tasktips_);
    std::swap(lotterytips_, other->lotterytips_);
    std::swap(herotips_, other->herotips_);
    std::swap(farmtips_, other->farmtips_);
    std::swap(strentips_, other->strentips_);
    std::swap(acttips_, other->acttips_);
    std::swap(shoptips_, other->shoptips_);
    std::swap(bountytips_, other->bountytips_);
    std::swap(risingtips_, other->risingtips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTips_descriptor_;
  metadata.reflection = GameTips_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
