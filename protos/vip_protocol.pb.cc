// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vip_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vip_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* RechargeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidateBilling_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidateBilling_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidateRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidateRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipInfoRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipInfoRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipPrivReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipPrivReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipShopRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipShopRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyCardRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyCardRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoldCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoldCard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vip_5fprotocol_2eproto() {
  protobuf_AddDesc_vip_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vip_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  RechargeReq_descriptor_ = file->message_type(0);
  static const int RechargeReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, ctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, mobileno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, smsno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, cardno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, cardpwd_),
  };
  RechargeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeReq_descriptor_,
      RechargeReq::default_instance_,
      RechargeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeReq));
  RechargeRes_descriptor_ = file->message_type(1);
  static const int RechargeRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRes, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRes, rolemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRes, desc_),
  };
  RechargeRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeRes_descriptor_,
      RechargeRes::default_instance_,
      RechargeRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeRes));
  ValidateBilling_descriptor_ = file->message_type(2);
  static const int ValidateBilling_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateBilling, inapp_purchase_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateBilling, inapp_data_signature_),
  };
  ValidateBilling_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidateBilling_descriptor_,
      ValidateBilling::default_instance_,
      ValidateBilling_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateBilling, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateBilling, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidateBilling));
  ValidateRes_descriptor_ = file->message_type(3);
  static const int ValidateRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRes, money_),
  };
  ValidateRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidateRes_descriptor_,
      ValidateRes::default_instance_,
      ValidateRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidateRes));
  VipInfoRes_descriptor_ = file->message_type(4);
  static const int VipInfoRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoRes, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoRes, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoRes, nextexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoRes, data_),
  };
  VipInfoRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipInfoRes_descriptor_,
      VipInfoRes::default_instance_,
      VipInfoRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipInfoRes));
  VipPrivReq_descriptor_ = file->message_type(5);
  static const int VipPrivReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipPrivReq, level_),
  };
  VipPrivReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipPrivReq_descriptor_,
      VipPrivReq::default_instance_,
      VipPrivReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipPrivReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipPrivReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipPrivReq));
  VipShopRes_descriptor_ = file->message_type(6);
  static const int VipShopRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipShopRes, carlist_),
  };
  VipShopRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipShopRes_descriptor_,
      VipShopRes::default_instance_,
      VipShopRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipShopRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipShopRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipShopRes));
  BuyCardReq_descriptor_ = file->message_type(7);
  static const int BuyCardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardReq, cardid_),
  };
  BuyCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyCardReq_descriptor_,
      BuyCardReq::default_instance_,
      BuyCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyCardReq));
  BuyCardRes_descriptor_ = file->message_type(8);
  static const int BuyCardRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardRes, rolegold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardRes, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardRes, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardRes, nextexp_),
  };
  BuyCardRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyCardRes_descriptor_,
      BuyCardRes::default_instance_,
      BuyCardRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyCardRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyCardRes));
  VipData_descriptor_ = file->message_type(9);
  static const int VipData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, buyaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, buycoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, actionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, prizelist_),
  };
  VipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipData_descriptor_,
      VipData::default_instance_,
      VipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipData));
  GoldCard_descriptor_ = file->message_type(10);
  static const int GoldCard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCard, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCard, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCard, recommend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCard, canby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCard, note_),
  };
  GoldCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoldCard_descriptor_,
      GoldCard::default_instance_,
      GoldCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoldCard));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vip_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeReq_descriptor_, &RechargeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeRes_descriptor_, &RechargeRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidateBilling_descriptor_, &ValidateBilling::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidateRes_descriptor_, &ValidateRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipInfoRes_descriptor_, &VipInfoRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipPrivReq_descriptor_, &VipPrivReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipShopRes_descriptor_, &VipShopRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyCardReq_descriptor_, &BuyCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyCardRes_descriptor_, &BuyCardRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipData_descriptor_, &VipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoldCard_descriptor_, &GoldCard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vip_5fprotocol_2eproto() {
  delete RechargeReq::default_instance_;
  delete RechargeReq_reflection_;
  delete RechargeRes::default_instance_;
  delete RechargeRes_reflection_;
  delete ValidateBilling::default_instance_;
  delete ValidateBilling_reflection_;
  delete ValidateRes::default_instance_;
  delete ValidateRes_reflection_;
  delete VipInfoRes::default_instance_;
  delete VipInfoRes_reflection_;
  delete VipPrivReq::default_instance_;
  delete VipPrivReq_reflection_;
  delete VipShopRes::default_instance_;
  delete VipShopRes_reflection_;
  delete BuyCardReq::default_instance_;
  delete BuyCardReq_reflection_;
  delete BuyCardRes::default_instance_;
  delete BuyCardRes_reflection_;
  delete VipData::default_instance_;
  delete VipData_reflection_;
  delete GoldCard::default_instance_;
  delete GoldCard_reflection_;
}

void protobuf_AddDesc_vip_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022vip_protocol.proto\022\006protos\032\031common/pri"
    "ze_common.proto\"{\n\013RechargeReq\022\r\n\005ctype\030"
    "\001 \001(\005\022\r\n\005money\030\010 \001(\005\022\020\n\010mobileNo\030\003 \001(\t\022\r"
    "\n\005smsNo\030\004 \001(\t\022\014\n\004step\030\005 \001(\005\022\016\n\006cardNo\030\006 "
    "\001(\t\022\017\n\007cardPwd\030\007 \001(\t\"Q\n\013RechargeRes\022\016\n\006r"
    "esult\030\001 \002(\005\022\021\n\terrorCode\030\002 \001(\t\022\021\n\troleMo"
    "ney\030\003 \001(\005\022\014\n\004desc\030\004 \001(\t\"L\n\017ValidateBilli"
    "ng\022\033\n\023inapp_purchase_data\030\001 \002(\t\022\034\n\024inapp"
    "_data_signature\030\002 \002(\t\",\n\013ValidateRes\022\016\n\006"
    "result\030\001 \002(\010\022\r\n\005money\030\002 \001(\005\"X\n\nVipInfoRe"
    "s\022\r\n\005level\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\017\n\007nextExp"
    "\030\003 \001(\005\022\035\n\004data\030\004 \001(\0132\017.protos.VipData\"\033\n"
    "\nVipPrivReq\022\r\n\005level\030\001 \002(\005\"/\n\nVipShopRes"
    "\022!\n\007carList\030\001 \003(\0132\020.protos.GoldCard\"\034\n\nB"
    "uyCardReq\022\016\n\006cardId\030\001 \001(\005\"a\n\nBuyCardRes\022"
    "\016\n\006result\030\001 \002(\005\022\020\n\010roleGold\030\002 \001(\005\022\020\n\010vip"
    "Level\030\003 \001(\005\022\016\n\006vipExp\030\004 \001(\005\022\017\n\007nextExp\030\005"
    " \001(\005\"\212\001\n\007VipData\022\r\n\005level\030\001 \001(\005\022\016\n\006targe"
    "t\030\002 \001(\005\022\021\n\tbuyAction\030\003 \001(\005\022\017\n\007buyCoin\030\004 "
    "\001(\005\022\023\n\013actionLimit\030\005 \001(\005\022\'\n\tprizeList\030\006 "
    "\003(\0132\024.protos.common.Prize\"c\n\010GoldCard\022\n\n"
    "\002id\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005price\030\003 \001(\005\022\021"
    "\n\trecommend\030\004 \001(\010\022\r\n\005canBy\030\005 \001(\010\022\014\n\004note"
    "\030\006 \001(\tB.\n\035dass.server.gameserver.protosB"
    "\013VipProtocolH\001", 974);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vip_protocol.proto", &protobuf_RegisterTypes);
  RechargeReq::default_instance_ = new RechargeReq();
  RechargeRes::default_instance_ = new RechargeRes();
  ValidateBilling::default_instance_ = new ValidateBilling();
  ValidateRes::default_instance_ = new ValidateRes();
  VipInfoRes::default_instance_ = new VipInfoRes();
  VipPrivReq::default_instance_ = new VipPrivReq();
  VipShopRes::default_instance_ = new VipShopRes();
  BuyCardReq::default_instance_ = new BuyCardReq();
  BuyCardRes::default_instance_ = new BuyCardRes();
  VipData::default_instance_ = new VipData();
  GoldCard::default_instance_ = new GoldCard();
  RechargeReq::default_instance_->InitAsDefaultInstance();
  RechargeRes::default_instance_->InitAsDefaultInstance();
  ValidateBilling::default_instance_->InitAsDefaultInstance();
  ValidateRes::default_instance_->InitAsDefaultInstance();
  VipInfoRes::default_instance_->InitAsDefaultInstance();
  VipPrivReq::default_instance_->InitAsDefaultInstance();
  VipShopRes::default_instance_->InitAsDefaultInstance();
  BuyCardReq::default_instance_->InitAsDefaultInstance();
  BuyCardRes::default_instance_->InitAsDefaultInstance();
  VipData::default_instance_->InitAsDefaultInstance();
  GoldCard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vip_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vip_5fprotocol_2eproto {
  StaticDescriptorInitializer_vip_5fprotocol_2eproto() {
    protobuf_AddDesc_vip_5fprotocol_2eproto();
  }
} static_descriptor_initializer_vip_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RechargeReq::kCtypeFieldNumber;
const int RechargeReq::kMoneyFieldNumber;
const int RechargeReq::kMobileNoFieldNumber;
const int RechargeReq::kSmsNoFieldNumber;
const int RechargeReq::kStepFieldNumber;
const int RechargeReq::kCardNoFieldNumber;
const int RechargeReq::kCardPwdFieldNumber;
#endif  // !_MSC_VER

RechargeReq::RechargeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeReq::InitAsDefaultInstance() {
}

RechargeReq::RechargeReq(const RechargeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeReq::SharedCtor() {
  _cached_size_ = 0;
  ctype_ = 0;
  money_ = 0;
  mobileno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smsno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  step_ = 0;
  cardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeReq::~RechargeReq() {
  SharedDtor();
}

void RechargeReq::SharedDtor() {
  if (mobileno_ != &::google::protobuf::internal::kEmptyString) {
    delete mobileno_;
  }
  if (smsno_ != &::google::protobuf::internal::kEmptyString) {
    delete smsno_;
  }
  if (cardno_ != &::google::protobuf::internal::kEmptyString) {
    delete cardno_;
  }
  if (cardpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpwd_;
  }
  if (this != default_instance_) {
  }
}

void RechargeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeReq_descriptor_;
}

const RechargeReq& RechargeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

RechargeReq* RechargeReq::default_instance_ = NULL;

RechargeReq* RechargeReq::New() const {
  return new RechargeReq;
}

void RechargeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctype_ = 0;
    money_ = 0;
    if (has_mobileno()) {
      if (mobileno_ != &::google::protobuf::internal::kEmptyString) {
        mobileno_->clear();
      }
    }
    if (has_smsno()) {
      if (smsno_ != &::google::protobuf::internal::kEmptyString) {
        smsno_->clear();
      }
    }
    step_ = 0;
    if (has_cardno()) {
      if (cardno_ != &::google::protobuf::internal::kEmptyString) {
        cardno_->clear();
      }
    }
    if (has_cardpwd()) {
      if (cardpwd_ != &::google::protobuf::internal::kEmptyString) {
        cardpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ctype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctype_)));
          set_has_ctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mobileNo;
        break;
      }

      // optional string mobileNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobileNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobileno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobileno().data(), this->mobileno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_smsNo;
        break;
      }

      // optional string smsNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smsNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->smsno().data(), this->smsno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_step;
        break;
      }

      // optional int32 step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cardNo;
        break;
      }

      // optional string cardNo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardno().data(), this->cardno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cardPwd;
        break;
      }

      // optional string cardPwd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardpwd().data(), this->cardpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_money;
        break;
      }

      // optional int32 money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ctype = 1;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ctype(), output);
  }

  // optional string mobileNo = 3;
  if (has_mobileno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobileno().data(), this->mobileno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mobileno(), output);
  }

  // optional string smsNo = 4;
  if (has_smsno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smsno().data(), this->smsno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->smsno(), output);
  }

  // optional int32 step = 5;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->step(), output);
  }

  // optional string cardNo = 6;
  if (has_cardno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardno().data(), this->cardno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cardno(), output);
  }

  // optional string cardPwd = 7;
  if (has_cardpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardpwd().data(), this->cardpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cardpwd(), output);
  }

  // optional int32 money = 8;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ctype = 1;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ctype(), target);
  }

  // optional string mobileNo = 3;
  if (has_mobileno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobileno().data(), this->mobileno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mobileno(), target);
  }

  // optional string smsNo = 4;
  if (has_smsno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smsno().data(), this->smsno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->smsno(), target);
  }

  // optional int32 step = 5;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->step(), target);
  }

  // optional string cardNo = 6;
  if (has_cardno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardno().data(), this->cardno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cardno(), target);
  }

  // optional string cardPwd = 7;
  if (has_cardpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardpwd().data(), this->cardpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cardpwd(), target);
  }

  // optional int32 money = 8;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ctype = 1;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctype());
    }

    // optional int32 money = 8;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string mobileNo = 3;
    if (has_mobileno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobileno());
    }

    // optional string smsNo = 4;
    if (has_smsno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smsno());
    }

    // optional int32 step = 5;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional string cardNo = 6;
    if (has_cardno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardno());
    }

    // optional string cardPwd = 7;
    if (has_cardpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeReq::MergeFrom(const RechargeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctype()) {
      set_ctype(from.ctype());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_mobileno()) {
      set_mobileno(from.mobileno());
    }
    if (from.has_smsno()) {
      set_smsno(from.smsno());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_cardno()) {
      set_cardno(from.cardno());
    }
    if (from.has_cardpwd()) {
      set_cardpwd(from.cardpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeReq::CopyFrom(const RechargeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeReq::IsInitialized() const {

  return true;
}

void RechargeReq::Swap(RechargeReq* other) {
  if (other != this) {
    std::swap(ctype_, other->ctype_);
    std::swap(money_, other->money_);
    std::swap(mobileno_, other->mobileno_);
    std::swap(smsno_, other->smsno_);
    std::swap(step_, other->step_);
    std::swap(cardno_, other->cardno_);
    std::swap(cardpwd_, other->cardpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeReq_descriptor_;
  metadata.reflection = RechargeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeRes::kResultFieldNumber;
const int RechargeRes::kErrorCodeFieldNumber;
const int RechargeRes::kRoleMoneyFieldNumber;
const int RechargeRes::kDescFieldNumber;
#endif  // !_MSC_VER

RechargeRes::RechargeRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeRes::InitAsDefaultInstance() {
}

RechargeRes::RechargeRes(const RechargeRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  errorcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolemoney_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeRes::~RechargeRes() {
  SharedDtor();
}

void RechargeRes::SharedDtor() {
  if (errorcode_ != &::google::protobuf::internal::kEmptyString) {
    delete errorcode_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void RechargeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeRes_descriptor_;
}

const RechargeRes& RechargeRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

RechargeRes* RechargeRes::default_instance_ = NULL;

RechargeRes* RechargeRes::New() const {
  return new RechargeRes;
}

void RechargeRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_errorcode()) {
      if (errorcode_ != &::google::protobuf::internal::kEmptyString) {
        errorcode_->clear();
      }
    }
    rolemoney_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorCode;
        break;
      }

      // optional string errorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorcode().data(), this->errorcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleMoney;
        break;
      }

      // optional int32 roleMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolemoney_)));
          set_has_rolemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string errorCode = 2;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorcode().data(), this->errorcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errorcode(), output);
  }

  // optional int32 roleMoney = 3;
  if (has_rolemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rolemoney(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string errorCode = 2;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorcode().data(), this->errorcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errorcode(), target);
  }

  // optional int32 roleMoney = 3;
  if (has_rolemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rolemoney(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string errorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorcode());
    }

    // optional int32 roleMoney = 3;
    if (has_rolemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolemoney());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeRes::MergeFrom(const RechargeRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_rolemoney()) {
      set_rolemoney(from.rolemoney());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeRes::CopyFrom(const RechargeRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RechargeRes::Swap(RechargeRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(rolemoney_, other->rolemoney_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeRes_descriptor_;
  metadata.reflection = RechargeRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ValidateBilling::kInappPurchaseDataFieldNumber;
const int ValidateBilling::kInappDataSignatureFieldNumber;
#endif  // !_MSC_VER

ValidateBilling::ValidateBilling()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ValidateBilling::InitAsDefaultInstance() {
}

ValidateBilling::ValidateBilling(const ValidateBilling& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ValidateBilling::SharedCtor() {
  _cached_size_ = 0;
  inapp_purchase_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inapp_data_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidateBilling::~ValidateBilling() {
  SharedDtor();
}

void ValidateBilling::SharedDtor() {
  if (inapp_purchase_data_ != &::google::protobuf::internal::kEmptyString) {
    delete inapp_purchase_data_;
  }
  if (inapp_data_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete inapp_data_signature_;
  }
  if (this != default_instance_) {
  }
}

void ValidateBilling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateBilling::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidateBilling_descriptor_;
}

const ValidateBilling& ValidateBilling::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

ValidateBilling* ValidateBilling::default_instance_ = NULL;

ValidateBilling* ValidateBilling::New() const {
  return new ValidateBilling;
}

void ValidateBilling::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_inapp_purchase_data()) {
      if (inapp_purchase_data_ != &::google::protobuf::internal::kEmptyString) {
        inapp_purchase_data_->clear();
      }
    }
    if (has_inapp_data_signature()) {
      if (inapp_data_signature_ != &::google::protobuf::internal::kEmptyString) {
        inapp_data_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidateBilling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string inapp_purchase_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inapp_purchase_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inapp_purchase_data().data(), this->inapp_purchase_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inapp_data_signature;
        break;
      }

      // required string inapp_data_signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inapp_data_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inapp_data_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inapp_data_signature().data(), this->inapp_data_signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValidateBilling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string inapp_purchase_data = 1;
  if (has_inapp_purchase_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inapp_purchase_data().data(), this->inapp_purchase_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->inapp_purchase_data(), output);
  }

  // required string inapp_data_signature = 2;
  if (has_inapp_data_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inapp_data_signature().data(), this->inapp_data_signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->inapp_data_signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValidateBilling::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string inapp_purchase_data = 1;
  if (has_inapp_purchase_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inapp_purchase_data().data(), this->inapp_purchase_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inapp_purchase_data(), target);
  }

  // required string inapp_data_signature = 2;
  if (has_inapp_data_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inapp_data_signature().data(), this->inapp_data_signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inapp_data_signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValidateBilling::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string inapp_purchase_data = 1;
    if (has_inapp_purchase_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inapp_purchase_data());
    }

    // required string inapp_data_signature = 2;
    if (has_inapp_data_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inapp_data_signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateBilling::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidateBilling* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidateBilling*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidateBilling::MergeFrom(const ValidateBilling& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inapp_purchase_data()) {
      set_inapp_purchase_data(from.inapp_purchase_data());
    }
    if (from.has_inapp_data_signature()) {
      set_inapp_data_signature(from.inapp_data_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidateBilling::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateBilling::CopyFrom(const ValidateBilling& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateBilling::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ValidateBilling::Swap(ValidateBilling* other) {
  if (other != this) {
    std::swap(inapp_purchase_data_, other->inapp_purchase_data_);
    std::swap(inapp_data_signature_, other->inapp_data_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ValidateBilling::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValidateBilling_descriptor_;
  metadata.reflection = ValidateBilling_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ValidateRes::kResultFieldNumber;
const int ValidateRes::kMoneyFieldNumber;
#endif  // !_MSC_VER

ValidateRes::ValidateRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ValidateRes::InitAsDefaultInstance() {
}

ValidateRes::ValidateRes(const ValidateRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ValidateRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidateRes::~ValidateRes() {
  SharedDtor();
}

void ValidateRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ValidateRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidateRes_descriptor_;
}

const ValidateRes& ValidateRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

ValidateRes* ValidateRes::default_instance_ = NULL;

ValidateRes* ValidateRes::New() const {
  return new ValidateRes;
}

void ValidateRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidateRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValidateRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValidateRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValidateRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidateRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidateRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidateRes::MergeFrom(const ValidateRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidateRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateRes::CopyFrom(const ValidateRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ValidateRes::Swap(ValidateRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ValidateRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValidateRes_descriptor_;
  metadata.reflection = ValidateRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipInfoRes::kLevelFieldNumber;
const int VipInfoRes::kExpFieldNumber;
const int VipInfoRes::kNextExpFieldNumber;
const int VipInfoRes::kDataFieldNumber;
#endif  // !_MSC_VER

VipInfoRes::VipInfoRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipInfoRes::InitAsDefaultInstance() {
  data_ = const_cast< ::protos::VipData*>(&::protos::VipData::default_instance());
}

VipInfoRes::VipInfoRes(const VipInfoRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipInfoRes::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = 0;
  nextexp_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipInfoRes::~VipInfoRes() {
  SharedDtor();
}

void VipInfoRes::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void VipInfoRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipInfoRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipInfoRes_descriptor_;
}

const VipInfoRes& VipInfoRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

VipInfoRes* VipInfoRes::default_instance_ = NULL;

VipInfoRes* VipInfoRes::New() const {
  return new VipInfoRes;
}

void VipInfoRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = 0;
    nextexp_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::protos::VipData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipInfoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextExp;
        break;
      }

      // optional int32 nextExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextexp_)));
          set_has_nextexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .protos.VipData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipInfoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 nextExp = 3;
  if (has_nextexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nextexp(), output);
  }

  // optional .protos.VipData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipInfoRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 nextExp = 3;
  if (has_nextexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nextexp(), target);
  }

  // optional .protos.VipData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipInfoRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 nextExp = 3;
    if (has_nextexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextexp());
    }

    // optional .protos.VipData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipInfoRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipInfoRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipInfoRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipInfoRes::MergeFrom(const VipInfoRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_nextexp()) {
      set_nextexp(from.nextexp());
    }
    if (from.has_data()) {
      mutable_data()->::protos::VipData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipInfoRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipInfoRes::CopyFrom(const VipInfoRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipInfoRes::IsInitialized() const {

  return true;
}

void VipInfoRes::Swap(VipInfoRes* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(nextexp_, other->nextexp_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipInfoRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipInfoRes_descriptor_;
  metadata.reflection = VipInfoRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipPrivReq::kLevelFieldNumber;
#endif  // !_MSC_VER

VipPrivReq::VipPrivReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipPrivReq::InitAsDefaultInstance() {
}

VipPrivReq::VipPrivReq(const VipPrivReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipPrivReq::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipPrivReq::~VipPrivReq() {
  SharedDtor();
}

void VipPrivReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipPrivReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipPrivReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipPrivReq_descriptor_;
}

const VipPrivReq& VipPrivReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

VipPrivReq* VipPrivReq::default_instance_ = NULL;

VipPrivReq* VipPrivReq::New() const {
  return new VipPrivReq;
}

void VipPrivReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipPrivReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipPrivReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipPrivReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipPrivReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipPrivReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipPrivReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipPrivReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipPrivReq::MergeFrom(const VipPrivReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipPrivReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipPrivReq::CopyFrom(const VipPrivReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipPrivReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VipPrivReq::Swap(VipPrivReq* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipPrivReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipPrivReq_descriptor_;
  metadata.reflection = VipPrivReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipShopRes::kCarListFieldNumber;
#endif  // !_MSC_VER

VipShopRes::VipShopRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipShopRes::InitAsDefaultInstance() {
}

VipShopRes::VipShopRes(const VipShopRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipShopRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipShopRes::~VipShopRes() {
  SharedDtor();
}

void VipShopRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipShopRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipShopRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipShopRes_descriptor_;
}

const VipShopRes& VipShopRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

VipShopRes* VipShopRes::default_instance_ = NULL;

VipShopRes* VipShopRes::New() const {
  return new VipShopRes;
}

void VipShopRes::Clear() {
  carlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipShopRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.GoldCard carList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_carList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipShopRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.GoldCard carList = 1;
  for (int i = 0; i < this->carlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->carlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipShopRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.GoldCard carList = 1;
  for (int i = 0; i < this->carlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->carlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipShopRes::ByteSize() const {
  int total_size = 0;

  // repeated .protos.GoldCard carList = 1;
  total_size += 1 * this->carlist_size();
  for (int i = 0; i < this->carlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipShopRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipShopRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipShopRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipShopRes::MergeFrom(const VipShopRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  carlist_.MergeFrom(from.carlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipShopRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipShopRes::CopyFrom(const VipShopRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipShopRes::IsInitialized() const {

  for (int i = 0; i < carlist_size(); i++) {
    if (!this->carlist(i).IsInitialized()) return false;
  }
  return true;
}

void VipShopRes::Swap(VipShopRes* other) {
  if (other != this) {
    carlist_.Swap(&other->carlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipShopRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipShopRes_descriptor_;
  metadata.reflection = VipShopRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyCardReq::kCardIdFieldNumber;
#endif  // !_MSC_VER

BuyCardReq::BuyCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyCardReq::InitAsDefaultInstance() {
}

BuyCardReq::BuyCardReq(const BuyCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyCardReq::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyCardReq::~BuyCardReq() {
  SharedDtor();
}

void BuyCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyCardReq_descriptor_;
}

const BuyCardReq& BuyCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

BuyCardReq* BuyCardReq::default_instance_ = NULL;

BuyCardReq* BuyCardReq::New() const {
  return new BuyCardReq;
}

void BuyCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cardId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cardId = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cardId = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyCardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cardId = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyCardReq::MergeFrom(const BuyCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyCardReq::CopyFrom(const BuyCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyCardReq::IsInitialized() const {

  return true;
}

void BuyCardReq::Swap(BuyCardReq* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyCardReq_descriptor_;
  metadata.reflection = BuyCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyCardRes::kResultFieldNumber;
const int BuyCardRes::kRoleGoldFieldNumber;
const int BuyCardRes::kVipLevelFieldNumber;
const int BuyCardRes::kVipExpFieldNumber;
const int BuyCardRes::kNextExpFieldNumber;
#endif  // !_MSC_VER

BuyCardRes::BuyCardRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyCardRes::InitAsDefaultInstance() {
}

BuyCardRes::BuyCardRes(const BuyCardRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyCardRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  rolegold_ = 0;
  viplevel_ = 0;
  vipexp_ = 0;
  nextexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyCardRes::~BuyCardRes() {
  SharedDtor();
}

void BuyCardRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyCardRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyCardRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyCardRes_descriptor_;
}

const BuyCardRes& BuyCardRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

BuyCardRes* BuyCardRes::default_instance_ = NULL;

BuyCardRes* BuyCardRes::New() const {
  return new BuyCardRes;
}

void BuyCardRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    rolegold_ = 0;
    viplevel_ = 0;
    vipexp_ = 0;
    nextexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyCardRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleGold;
        break;
      }

      // optional int32 roleGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolegold_)));
          set_has_rolegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vipExp;
        break;
      }

      // optional int32 vipExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nextExp;
        break;
      }

      // optional int32 nextExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextexp_)));
          set_has_nextexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyCardRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 roleGold = 2;
  if (has_rolegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rolegold(), output);
  }

  // optional int32 vipLevel = 3;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viplevel(), output);
  }

  // optional int32 vipExp = 4;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vipexp(), output);
  }

  // optional int32 nextExp = 5;
  if (has_nextexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nextexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyCardRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 roleGold = 2;
  if (has_rolegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rolegold(), target);
  }

  // optional int32 vipLevel = 3;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viplevel(), target);
  }

  // optional int32 vipExp = 4;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vipexp(), target);
  }

  // optional int32 nextExp = 5;
  if (has_nextexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nextexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyCardRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 roleGold = 2;
    if (has_rolegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolegold());
    }

    // optional int32 vipLevel = 3;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 vipExp = 4;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }

    // optional int32 nextExp = 5;
    if (has_nextexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyCardRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyCardRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyCardRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyCardRes::MergeFrom(const BuyCardRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rolegold()) {
      set_rolegold(from.rolegold());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_nextexp()) {
      set_nextexp(from.nextexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyCardRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyCardRes::CopyFrom(const BuyCardRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyCardRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuyCardRes::Swap(BuyCardRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rolegold_, other->rolegold_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(nextexp_, other->nextexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyCardRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyCardRes_descriptor_;
  metadata.reflection = BuyCardRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipData::kLevelFieldNumber;
const int VipData::kTargetFieldNumber;
const int VipData::kBuyActionFieldNumber;
const int VipData::kBuyCoinFieldNumber;
const int VipData::kActionLimitFieldNumber;
const int VipData::kPrizeListFieldNumber;
#endif  // !_MSC_VER

VipData::VipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipData::InitAsDefaultInstance() {
}

VipData::VipData(const VipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipData::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  target_ = 0;
  buyaction_ = 0;
  buycoin_ = 0;
  actionlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipData::~VipData() {
  SharedDtor();
}

void VipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipData_descriptor_;
}

const VipData& VipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

VipData* VipData::default_instance_ = NULL;

VipData* VipData::New() const {
  return new VipData;
}

void VipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    target_ = 0;
    buyaction_ = 0;
    buycoin_ = 0;
    actionlimit_ = 0;
  }
  prizelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }

      // optional int32 target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyAction;
        break;
      }

      // optional int32 buyAction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyaction_)));
          set_has_buyaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyCoin;
        break;
      }

      // optional int32 buyCoin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycoin_)));
          set_has_buycoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_actionLimit;
        break;
      }

      // optional int32 actionLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionlimit_)));
          set_has_actionlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prizeList;
        break;
      }

      // repeated .protos.common.Prize prizeList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prizeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target(), output);
  }

  // optional int32 buyAction = 3;
  if (has_buyaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buyaction(), output);
  }

  // optional int32 buyCoin = 4;
  if (has_buycoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buycoin(), output);
  }

  // optional int32 actionLimit = 5;
  if (has_actionlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->actionlimit(), output);
  }

  // repeated .protos.common.Prize prizeList = 6;
  for (int i = 0; i < this->prizelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->prizelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target(), target);
  }

  // optional int32 buyAction = 3;
  if (has_buyaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buyaction(), target);
  }

  // optional int32 buyCoin = 4;
  if (has_buycoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buycoin(), target);
  }

  // optional int32 actionLimit = 5;
  if (has_actionlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->actionlimit(), target);
  }

  // repeated .protos.common.Prize prizeList = 6;
  for (int i = 0; i < this->prizelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->prizelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 buyAction = 3;
    if (has_buyaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyaction());
    }

    // optional int32 buyCoin = 4;
    if (has_buycoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycoin());
    }

    // optional int32 actionLimit = 5;
    if (has_actionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionlimit());
    }

  }
  // repeated .protos.common.Prize prizeList = 6;
  total_size += 1 * this->prizelist_size();
  for (int i = 0; i < this->prizelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipData::MergeFrom(const VipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizelist_.MergeFrom(from.prizelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_buyaction()) {
      set_buyaction(from.buyaction());
    }
    if (from.has_buycoin()) {
      set_buycoin(from.buycoin());
    }
    if (from.has_actionlimit()) {
      set_actionlimit(from.actionlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipData::CopyFrom(const VipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipData::IsInitialized() const {

  return true;
}

void VipData::Swap(VipData* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(target_, other->target_);
    std::swap(buyaction_, other->buyaction_);
    std::swap(buycoin_, other->buycoin_);
    std::swap(actionlimit_, other->actionlimit_);
    prizelist_.Swap(&other->prizelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipData_descriptor_;
  metadata.reflection = VipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoldCard::kIdFieldNumber;
const int GoldCard::kNameFieldNumber;
const int GoldCard::kPriceFieldNumber;
const int GoldCard::kRecommendFieldNumber;
const int GoldCard::kCanByFieldNumber;
const int GoldCard::kNoteFieldNumber;
#endif  // !_MSC_VER

GoldCard::GoldCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoldCard::InitAsDefaultInstance() {
}

GoldCard::GoldCard(const GoldCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoldCard::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0;
  recommend_ = false;
  canby_ = false;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoldCard::~GoldCard() {
  SharedDtor();
}

void GoldCard::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void GoldCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoldCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoldCard_descriptor_;
}

const GoldCard& GoldCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_5fprotocol_2eproto();
  return *default_instance_;
}

GoldCard* GoldCard::default_instance_ = NULL;

GoldCard* GoldCard::New() const {
  return new GoldCard;
}

void GoldCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    price_ = 0;
    recommend_ = false;
    canby_ = false;
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::kEmptyString) {
        note_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoldCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recommend;
        break;
      }

      // optional bool recommend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recommend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recommend_)));
          set_has_recommend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_canBy;
        break;
      }

      // optional bool canBy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canBy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canby_)));
          set_has_canby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_note;
        break;
      }

      // optional string note = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoldCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional bool recommend = 4;
  if (has_recommend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->recommend(), output);
  }

  // optional bool canBy = 5;
  if (has_canby()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->canby(), output);
  }

  // optional string note = 6;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->note(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoldCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional bool recommend = 4;
  if (has_recommend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->recommend(), target);
  }

  // optional bool canBy = 5;
  if (has_canby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canby(), target);
  }

  // optional string note = 6;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->note(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoldCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional bool recommend = 4;
    if (has_recommend()) {
      total_size += 1 + 1;
    }

    // optional bool canBy = 5;
    if (has_canby()) {
      total_size += 1 + 1;
    }

    // optional string note = 6;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoldCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoldCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoldCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoldCard::MergeFrom(const GoldCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_recommend()) {
      set_recommend(from.recommend());
    }
    if (from.has_canby()) {
      set_canby(from.canby());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoldCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoldCard::CopyFrom(const GoldCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoldCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GoldCard::Swap(GoldCard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(price_, other->price_);
    std::swap(recommend_, other->recommend_);
    std::swap(canby_, other->canby_);
    std::swap(note_, other->note_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoldCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoldCard_descriptor_;
  metadata.reflection = GoldCard_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
