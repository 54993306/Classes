// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boss_protocol.proto

#ifndef PROTOBUF_boss_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_boss_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/monster_common.pb.h"
#include "common/hero_common.pb.h"
#include "common/prize_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_boss_5fprotocol_2eproto();
void protobuf_AssignDesc_boss_5fprotocol_2eproto();
void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

class BossNotice;
class BossData;
class BuyInspire;
class ResetBattleTime;
class WarRequest;
class WarResponse;
class BossFinishReq;
class BossFinishRes;
class BossPrizes;
class ChallengeData;
class BossPrize;
class NextRank;

// ===================================================================

class BossNotice : public ::google::protobuf::Message {
 public:
  BossNotice();
  virtual ~BossNotice();

  BossNotice(const BossNotice& from);

  inline BossNotice& operator=(const BossNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossNotice& default_instance();

  void Swap(BossNotice* other);

  // implements Message ----------------------------------------------

  BossNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossNotice& from);
  void MergeFrom(const BossNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool open = 1;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 1;
  inline bool open() const;
  inline void set_open(bool value);

  // optional int32 bossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.BossNotice)
 private:
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool open_;
  ::google::protobuf::int32 bossid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static BossNotice* default_instance_;
};
// -------------------------------------------------------------------

class BossData : public ::google::protobuf::Message {
 public:
  BossData();
  virtual ~BossData();

  BossData(const BossData& from);

  inline BossData& operator=(const BossData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossData& default_instance();

  void Swap(BossData* other);

  // implements Message ----------------------------------------------

  BossData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossData& from);
  void MergeFrom(const BossData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 open = 2;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 2;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);

  // optional .protos.common.Monster boss = 3;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 3;
  inline const ::protos::common::Monster& boss() const;
  inline ::protos::common::Monster* mutable_boss();
  inline ::protos::common::Monster* release_boss();
  inline void set_allocated_boss(::protos::common::Monster* boss);

  // optional int32 bossTime = 4;
  inline bool has_bosstime() const;
  inline void clear_bosstime();
  static const int kBossTimeFieldNumber = 4;
  inline ::google::protobuf::int32 bosstime() const;
  inline void set_bosstime(::google::protobuf::int32 value);

  // optional .protos.ChallengeData cData = 5;
  inline bool has_cdata() const;
  inline void clear_cdata();
  static const int kCDataFieldNumber = 5;
  inline const ::protos::ChallengeData& cdata() const;
  inline ::protos::ChallengeData* mutable_cdata();
  inline ::protos::ChallengeData* release_cdata();
  inline void set_allocated_cdata(::protos::ChallengeData* cdata);

  // optional int32 resetGold = 6;
  inline bool has_resetgold() const;
  inline void clear_resetgold();
  static const int kResetGoldFieldNumber = 6;
  inline ::google::protobuf::int32 resetgold() const;
  inline void set_resetgold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.BossData)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_bosstime();
  inline void clear_has_bosstime();
  inline void set_has_cdata();
  inline void clear_has_cdata();
  inline void set_has_resetgold();
  inline void clear_has_resetgold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 open_;
  ::protos::common::Monster* boss_;
  ::protos::ChallengeData* cdata_;
  ::google::protobuf::int32 bosstime_;
  ::google::protobuf::int32 resetgold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static BossData* default_instance_;
};
// -------------------------------------------------------------------

class BuyInspire : public ::google::protobuf::Message {
 public:
  BuyInspire();
  virtual ~BuyInspire();

  BuyInspire(const BuyInspire& from);

  inline BuyInspire& operator=(const BuyInspire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyInspire& default_instance();

  void Swap(BuyInspire* other);

  // implements Message ----------------------------------------------

  BuyInspire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyInspire& from);
  void MergeFrom(const BuyInspire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 inspire = 2;
  inline bool has_inspire() const;
  inline void clear_inspire();
  static const int kInspireFieldNumber = 2;
  inline ::google::protobuf::int32 inspire() const;
  inline void set_inspire(::google::protobuf::int32 value);

  // optional int32 inspirePrice = 3;
  inline bool has_inspireprice() const;
  inline void clear_inspireprice();
  static const int kInspirePriceFieldNumber = 3;
  inline ::google::protobuf::int32 inspireprice() const;
  inline void set_inspireprice(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.BuyInspire)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_inspire();
  inline void clear_has_inspire();
  inline void set_has_inspireprice();
  inline void clear_has_inspireprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 inspire_;
  ::google::protobuf::int32 inspireprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static BuyInspire* default_instance_;
};
// -------------------------------------------------------------------

class ResetBattleTime : public ::google::protobuf::Message {
 public:
  ResetBattleTime();
  virtual ~ResetBattleTime();

  ResetBattleTime(const ResetBattleTime& from);

  inline ResetBattleTime& operator=(const ResetBattleTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetBattleTime& default_instance();

  void Swap(ResetBattleTime* other);

  // implements Message ----------------------------------------------

  ResetBattleTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResetBattleTime& from);
  void MergeFrom(const ResetBattleTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:protos.ResetBattleTime)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ResetBattleTime* default_instance_;
};
// -------------------------------------------------------------------

class WarRequest : public ::google::protobuf::Message {
 public:
  WarRequest();
  virtual ~WarRequest();

  WarRequest(const WarRequest& from);

  inline WarRequest& operator=(const WarRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarRequest& default_instance();

  void Swap(WarRequest* other);

  // implements Message ----------------------------------------------

  WarRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarRequest& from);
  void MergeFrom(const WarRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hero1 = 1;
  inline bool has_hero1() const;
  inline void clear_hero1();
  static const int kHero1FieldNumber = 1;
  inline ::google::protobuf::int32 hero1() const;
  inline void set_hero1(::google::protobuf::int32 value);

  // optional int32 hero2 = 2;
  inline bool has_hero2() const;
  inline void clear_hero2();
  static const int kHero2FieldNumber = 2;
  inline ::google::protobuf::int32 hero2() const;
  inline void set_hero2(::google::protobuf::int32 value);

  // optional int32 hero3 = 3;
  inline bool has_hero3() const;
  inline void clear_hero3();
  static const int kHero3FieldNumber = 3;
  inline ::google::protobuf::int32 hero3() const;
  inline void set_hero3(::google::protobuf::int32 value);

  // optional int32 hero4 = 4;
  inline bool has_hero4() const;
  inline void clear_hero4();
  static const int kHero4FieldNumber = 4;
  inline ::google::protobuf::int32 hero4() const;
  inline void set_hero4(::google::protobuf::int32 value);

  // optional int32 hero5 = 5;
  inline bool has_hero5() const;
  inline void clear_hero5();
  static const int kHero5FieldNumber = 5;
  inline ::google::protobuf::int32 hero5() const;
  inline void set_hero5(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.WarRequest)
 private:
  inline void set_has_hero1();
  inline void clear_has_hero1();
  inline void set_has_hero2();
  inline void clear_has_hero2();
  inline void set_has_hero3();
  inline void clear_has_hero3();
  inline void set_has_hero4();
  inline void clear_has_hero4();
  inline void set_has_hero5();
  inline void clear_has_hero5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hero1_;
  ::google::protobuf::int32 hero2_;
  ::google::protobuf::int32 hero3_;
  ::google::protobuf::int32 hero4_;
  ::google::protobuf::int32 hero5_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static WarRequest* default_instance_;
};
// -------------------------------------------------------------------

class WarResponse : public ::google::protobuf::Message {
 public:
  WarResponse();
  virtual ~WarResponse();

  WarResponse(const WarResponse& from);

  inline WarResponse& operator=(const WarResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarResponse& default_instance();

  void Swap(WarResponse* other);

  // implements Message ----------------------------------------------

  WarResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarResponse& from);
  void MergeFrom(const WarResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .protos.common.Monster monsters = 2;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 2;
  inline const ::protos::common::Monster& monsters(int index) const;
  inline ::protos::common::Monster* mutable_monsters(int index);
  inline ::protos::common::Monster* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Monster >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Monster >*
      mutable_monsters();

  // repeated .protos.common.Hero heroList = 3;
  inline int herolist_size() const;
  inline void clear_herolist();
  static const int kHeroListFieldNumber = 3;
  inline const ::protos::common::Hero& herolist(int index) const;
  inline ::protos::common::Hero* mutable_herolist(int index);
  inline ::protos::common::Hero* add_herolist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Hero >&
      herolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Hero >*
      mutable_herolist();

  // optional int32 addHurt = 4;
  inline bool has_addhurt() const;
  inline void clear_addhurt();
  static const int kAddHurtFieldNumber = 4;
  inline ::google::protobuf::int32 addhurt() const;
  inline void set_addhurt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.WarResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_addhurt();
  inline void clear_has_addhurt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protos::common::Monster > monsters_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 addhurt_;
  ::google::protobuf::RepeatedPtrField< ::protos::common::Hero > herolist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static WarResponse* default_instance_;
};
// -------------------------------------------------------------------

class BossFinishReq : public ::google::protobuf::Message {
 public:
  BossFinishReq();
  virtual ~BossFinishReq();

  BossFinishReq(const BossFinishReq& from);

  inline BossFinishReq& operator=(const BossFinishReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossFinishReq& default_instance();

  void Swap(BossFinishReq* other);

  // implements Message ----------------------------------------------

  BossFinishReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossFinishReq& from);
  void MergeFrom(const BossFinishReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hurt = 1;
  inline bool has_hurt() const;
  inline void clear_hurt();
  static const int kHurtFieldNumber = 1;
  inline ::google::protobuf::int32 hurt() const;
  inline void set_hurt(::google::protobuf::int32 value);

  // repeated int32 checkHurt = 2 [packed = true];
  inline int checkhurt_size() const;
  inline void clear_checkhurt();
  static const int kCheckHurtFieldNumber = 2;
  inline ::google::protobuf::int32 checkhurt(int index) const;
  inline void set_checkhurt(int index, ::google::protobuf::int32 value);
  inline void add_checkhurt(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      checkhurt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_checkhurt();

  // required sint32 checkSum = 3;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kCheckSumFieldNumber = 3;
  inline ::google::protobuf::int32 checksum() const;
  inline void set_checksum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.BossFinishReq)
 private:
  inline void set_has_hurt();
  inline void clear_has_hurt();
  inline void set_has_checksum();
  inline void clear_has_checksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > checkhurt_;
  mutable int _checkhurt_cached_byte_size_;
  ::google::protobuf::int32 hurt_;
  ::google::protobuf::int32 checksum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static BossFinishReq* default_instance_;
};
// -------------------------------------------------------------------

class BossFinishRes : public ::google::protobuf::Message {
 public:
  BossFinishRes();
  virtual ~BossFinishRes();

  BossFinishRes(const BossFinishRes& from);

  inline BossFinishRes& operator=(const BossFinishRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossFinishRes& default_instance();

  void Swap(BossFinishRes* other);

  // implements Message ----------------------------------------------

  BossFinishRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossFinishRes& from);
  void MergeFrom(const BossFinishRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 hurt = 2;
  inline bool has_hurt() const;
  inline void clear_hurt();
  static const int kHurtFieldNumber = 2;
  inline ::google::protobuf::int32 hurt() const;
  inline void set_hurt(::google::protobuf::int32 value);

  // required int32 totalHurt = 3;
  inline bool has_totalhurt() const;
  inline void clear_totalhurt();
  static const int kTotalHurtFieldNumber = 3;
  inline ::google::protobuf::int32 totalhurt() const;
  inline void set_totalhurt(::google::protobuf::int32 value);

  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional .protos.NextRank next = 5;
  inline bool has_next() const;
  inline void clear_next();
  static const int kNextFieldNumber = 5;
  inline const ::protos::NextRank& next() const;
  inline ::protos::NextRank* mutable_next();
  inline ::protos::NextRank* release_next();
  inline void set_allocated_next(::protos::NextRank* next);

  // @@protoc_insertion_point(class_scope:protos.BossFinishRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_hurt();
  inline void clear_has_hurt();
  inline void set_has_totalhurt();
  inline void clear_has_totalhurt();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_next();
  inline void clear_has_next();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 hurt_;
  ::google::protobuf::int32 totalhurt_;
  ::google::protobuf::int32 rank_;
  ::protos::NextRank* next_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static BossFinishRes* default_instance_;
};
// -------------------------------------------------------------------

class BossPrizes : public ::google::protobuf::Message {
 public:
  BossPrizes();
  virtual ~BossPrizes();

  BossPrizes(const BossPrizes& from);

  inline BossPrizes& operator=(const BossPrizes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossPrizes& default_instance();

  void Swap(BossPrizes* other);

  // implements Message ----------------------------------------------

  BossPrizes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossPrizes& from);
  void MergeFrom(const BossPrizes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // repeated .protos.BossPrize prizeList = 2;
  inline int prizelist_size() const;
  inline void clear_prizelist();
  static const int kPrizeListFieldNumber = 2;
  inline const ::protos::BossPrize& prizelist(int index) const;
  inline ::protos::BossPrize* mutable_prizelist(int index);
  inline ::protos::BossPrize* add_prizelist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::BossPrize >&
      prizelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::BossPrize >*
      mutable_prizelist();

  // @@protoc_insertion_point(class_scope:protos.BossPrizes)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protos::BossPrize > prizelist_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static BossPrizes* default_instance_;
};
// -------------------------------------------------------------------

class ChallengeData : public ::google::protobuf::Message {
 public:
  ChallengeData();
  virtual ~ChallengeData();

  ChallengeData(const ChallengeData& from);

  inline ChallengeData& operator=(const ChallengeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeData& default_instance();

  void Swap(ChallengeData* other);

  // implements Message ----------------------------------------------

  ChallengeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChallengeData& from);
  void MergeFrom(const ChallengeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hurt = 1;
  inline bool has_hurt() const;
  inline void clear_hurt();
  static const int kHurtFieldNumber = 1;
  inline ::google::protobuf::int32 hurt() const;
  inline void set_hurt(::google::protobuf::int32 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 inspire = 3;
  inline bool has_inspire() const;
  inline void clear_inspire();
  static const int kInspireFieldNumber = 3;
  inline ::google::protobuf::int32 inspire() const;
  inline void set_inspire(::google::protobuf::int32 value);

  // optional int32 inspirePrice = 4;
  inline bool has_inspireprice() const;
  inline void clear_inspireprice();
  static const int kInspirePriceFieldNumber = 4;
  inline ::google::protobuf::int32 inspireprice() const;
  inline void set_inspireprice(::google::protobuf::int32 value);

  // repeated .protos.common.Prize prizes = 5;
  inline int prizes_size() const;
  inline void clear_prizes();
  static const int kPrizesFieldNumber = 5;
  inline const ::protos::common::Prize& prizes(int index) const;
  inline ::protos::common::Prize* mutable_prizes(int index);
  inline ::protos::common::Prize* add_prizes();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
      prizes() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
      mutable_prizes();

  // optional int32 againTime = 6;
  inline bool has_againtime() const;
  inline void clear_againtime();
  static const int kAgainTimeFieldNumber = 6;
  inline ::google::protobuf::int32 againtime() const;
  inline void set_againtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.ChallengeData)
 private:
  inline void set_has_hurt();
  inline void clear_has_hurt();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_inspire();
  inline void clear_has_inspire();
  inline void set_has_inspireprice();
  inline void clear_has_inspireprice();
  inline void set_has_againtime();
  inline void clear_has_againtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hurt_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 inspire_;
  ::google::protobuf::int32 inspireprice_;
  ::google::protobuf::RepeatedPtrField< ::protos::common::Prize > prizes_;
  ::google::protobuf::int32 againtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static ChallengeData* default_instance_;
};
// -------------------------------------------------------------------

class BossPrize : public ::google::protobuf::Message {
 public:
  BossPrize();
  virtual ~BossPrize();

  BossPrize(const BossPrize& from);

  inline BossPrize& operator=(const BossPrize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossPrize& default_instance();

  void Swap(BossPrize* other);

  // implements Message ----------------------------------------------

  BossPrize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossPrize& from);
  void MergeFrom(const BossPrize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // repeated .protos.common.Prize prizes = 2;
  inline int prizes_size() const;
  inline void clear_prizes();
  static const int kPrizesFieldNumber = 2;
  inline const ::protos::common::Prize& prizes(int index) const;
  inline ::protos::common::Prize* mutable_prizes(int index);
  inline ::protos::common::Prize* add_prizes();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
      prizes() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
      mutable_prizes();

  // @@protoc_insertion_point(class_scope:protos.BossPrize)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protos::common::Prize > prizes_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static BossPrize* default_instance_;
};
// -------------------------------------------------------------------

class NextRank : public ::google::protobuf::Message {
 public:
  NextRank();
  virtual ~NextRank();

  NextRank(const NextRank& from);

  inline NextRank& operator=(const NextRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NextRank& default_instance();

  void Swap(NextRank* other);

  // implements Message ----------------------------------------------

  NextRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NextRank& from);
  void MergeFrom(const NextRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 hurt = 4;
  inline bool has_hurt() const;
  inline void clear_hurt();
  static const int kHurtFieldNumber = 4;
  inline ::google::protobuf::int32 hurt() const;
  inline void set_hurt(::google::protobuf::int32 value);

  // optional int32 thumb = 5;
  inline bool has_thumb() const;
  inline void clear_thumb();
  static const int kThumbFieldNumber = 5;
  inline ::google::protobuf::int32 thumb() const;
  inline void set_thumb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.NextRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hurt();
  inline void clear_has_hurt();
  inline void set_has_thumb();
  inline void clear_has_thumb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::int32 hurt_;
  ::google::protobuf::int32 thumb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_boss_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_boss_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_boss_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static NextRank* default_instance_;
};
// ===================================================================


// ===================================================================

// BossNotice

// required bool open = 1;
inline bool BossNotice::has_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossNotice::set_has_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossNotice::clear_has_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossNotice::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool BossNotice::open() const {
  return open_;
}
inline void BossNotice::set_open(bool value) {
  set_has_open();
  open_ = value;
}

// optional int32 bossId = 2;
inline bool BossNotice::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossNotice::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossNotice::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossNotice::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 BossNotice::bossid() const {
  return bossid_;
}
inline void BossNotice::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// -------------------------------------------------------------------

// BossData

// required int32 result = 1;
inline bool BossData::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossData::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossData::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossData::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 BossData::result() const {
  return result_;
}
inline void BossData::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 open = 2;
inline bool BossData::has_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossData::set_has_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossData::clear_has_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossData::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 BossData::open() const {
  return open_;
}
inline void BossData::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// optional .protos.common.Monster boss = 3;
inline bool BossData::has_boss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossData::set_has_boss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossData::clear_has_boss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossData::clear_boss() {
  if (boss_ != NULL) boss_->::protos::common::Monster::Clear();
  clear_has_boss();
}
inline const ::protos::common::Monster& BossData::boss() const {
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
}
inline ::protos::common::Monster* BossData::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::protos::common::Monster;
  return boss_;
}
inline ::protos::common::Monster* BossData::release_boss() {
  clear_has_boss();
  ::protos::common::Monster* temp = boss_;
  boss_ = NULL;
  return temp;
}
inline void BossData::set_allocated_boss(::protos::common::Monster* boss) {
  delete boss_;
  boss_ = boss;
  if (boss) {
    set_has_boss();
  } else {
    clear_has_boss();
  }
}

// optional int32 bossTime = 4;
inline bool BossData::has_bosstime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossData::set_has_bosstime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossData::clear_has_bosstime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossData::clear_bosstime() {
  bosstime_ = 0;
  clear_has_bosstime();
}
inline ::google::protobuf::int32 BossData::bosstime() const {
  return bosstime_;
}
inline void BossData::set_bosstime(::google::protobuf::int32 value) {
  set_has_bosstime();
  bosstime_ = value;
}

// optional .protos.ChallengeData cData = 5;
inline bool BossData::has_cdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossData::set_has_cdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossData::clear_has_cdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossData::clear_cdata() {
  if (cdata_ != NULL) cdata_->::protos::ChallengeData::Clear();
  clear_has_cdata();
}
inline const ::protos::ChallengeData& BossData::cdata() const {
  return cdata_ != NULL ? *cdata_ : *default_instance_->cdata_;
}
inline ::protos::ChallengeData* BossData::mutable_cdata() {
  set_has_cdata();
  if (cdata_ == NULL) cdata_ = new ::protos::ChallengeData;
  return cdata_;
}
inline ::protos::ChallengeData* BossData::release_cdata() {
  clear_has_cdata();
  ::protos::ChallengeData* temp = cdata_;
  cdata_ = NULL;
  return temp;
}
inline void BossData::set_allocated_cdata(::protos::ChallengeData* cdata) {
  delete cdata_;
  cdata_ = cdata;
  if (cdata) {
    set_has_cdata();
  } else {
    clear_has_cdata();
  }
}

// optional int32 resetGold = 6;
inline bool BossData::has_resetgold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossData::set_has_resetgold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossData::clear_has_resetgold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossData::clear_resetgold() {
  resetgold_ = 0;
  clear_has_resetgold();
}
inline ::google::protobuf::int32 BossData::resetgold() const {
  return resetgold_;
}
inline void BossData::set_resetgold(::google::protobuf::int32 value) {
  set_has_resetgold();
  resetgold_ = value;
}

// -------------------------------------------------------------------

// BuyInspire

// required int32 result = 1;
inline bool BuyInspire::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyInspire::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyInspire::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyInspire::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 BuyInspire::result() const {
  return result_;
}
inline void BuyInspire::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 inspire = 2;
inline bool BuyInspire::has_inspire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyInspire::set_has_inspire() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyInspire::clear_has_inspire() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyInspire::clear_inspire() {
  inspire_ = 0;
  clear_has_inspire();
}
inline ::google::protobuf::int32 BuyInspire::inspire() const {
  return inspire_;
}
inline void BuyInspire::set_inspire(::google::protobuf::int32 value) {
  set_has_inspire();
  inspire_ = value;
}

// optional int32 inspirePrice = 3;
inline bool BuyInspire::has_inspireprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyInspire::set_has_inspireprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyInspire::clear_has_inspireprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyInspire::clear_inspireprice() {
  inspireprice_ = 0;
  clear_has_inspireprice();
}
inline ::google::protobuf::int32 BuyInspire::inspireprice() const {
  return inspireprice_;
}
inline void BuyInspire::set_inspireprice(::google::protobuf::int32 value) {
  set_has_inspireprice();
  inspireprice_ = value;
}

// -------------------------------------------------------------------

// ResetBattleTime

// required bool result = 1;
inline bool ResetBattleTime::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResetBattleTime::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResetBattleTime::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResetBattleTime::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool ResetBattleTime::result() const {
  return result_;
}
inline void ResetBattleTime::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// WarRequest

// required int32 hero1 = 1;
inline bool WarRequest::has_hero1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarRequest::set_has_hero1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarRequest::clear_has_hero1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarRequest::clear_hero1() {
  hero1_ = 0;
  clear_has_hero1();
}
inline ::google::protobuf::int32 WarRequest::hero1() const {
  return hero1_;
}
inline void WarRequest::set_hero1(::google::protobuf::int32 value) {
  set_has_hero1();
  hero1_ = value;
}

// optional int32 hero2 = 2;
inline bool WarRequest::has_hero2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarRequest::set_has_hero2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarRequest::clear_has_hero2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarRequest::clear_hero2() {
  hero2_ = 0;
  clear_has_hero2();
}
inline ::google::protobuf::int32 WarRequest::hero2() const {
  return hero2_;
}
inline void WarRequest::set_hero2(::google::protobuf::int32 value) {
  set_has_hero2();
  hero2_ = value;
}

// optional int32 hero3 = 3;
inline bool WarRequest::has_hero3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarRequest::set_has_hero3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarRequest::clear_has_hero3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarRequest::clear_hero3() {
  hero3_ = 0;
  clear_has_hero3();
}
inline ::google::protobuf::int32 WarRequest::hero3() const {
  return hero3_;
}
inline void WarRequest::set_hero3(::google::protobuf::int32 value) {
  set_has_hero3();
  hero3_ = value;
}

// optional int32 hero4 = 4;
inline bool WarRequest::has_hero4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarRequest::set_has_hero4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarRequest::clear_has_hero4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarRequest::clear_hero4() {
  hero4_ = 0;
  clear_has_hero4();
}
inline ::google::protobuf::int32 WarRequest::hero4() const {
  return hero4_;
}
inline void WarRequest::set_hero4(::google::protobuf::int32 value) {
  set_has_hero4();
  hero4_ = value;
}

// optional int32 hero5 = 5;
inline bool WarRequest::has_hero5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WarRequest::set_has_hero5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WarRequest::clear_has_hero5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WarRequest::clear_hero5() {
  hero5_ = 0;
  clear_has_hero5();
}
inline ::google::protobuf::int32 WarRequest::hero5() const {
  return hero5_;
}
inline void WarRequest::set_hero5(::google::protobuf::int32 value) {
  set_has_hero5();
  hero5_ = value;
}

// -------------------------------------------------------------------

// WarResponse

// required int32 result = 1;
inline bool WarResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 WarResponse::result() const {
  return result_;
}
inline void WarResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .protos.common.Monster monsters = 2;
inline int WarResponse::monsters_size() const {
  return monsters_.size();
}
inline void WarResponse::clear_monsters() {
  monsters_.Clear();
}
inline const ::protos::common::Monster& WarResponse::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::protos::common::Monster* WarResponse::mutable_monsters(int index) {
  return monsters_.Mutable(index);
}
inline ::protos::common::Monster* WarResponse::add_monsters() {
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Monster >&
WarResponse::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Monster >*
WarResponse::mutable_monsters() {
  return &monsters_;
}

// repeated .protos.common.Hero heroList = 3;
inline int WarResponse::herolist_size() const {
  return herolist_.size();
}
inline void WarResponse::clear_herolist() {
  herolist_.Clear();
}
inline const ::protos::common::Hero& WarResponse::herolist(int index) const {
  return herolist_.Get(index);
}
inline ::protos::common::Hero* WarResponse::mutable_herolist(int index) {
  return herolist_.Mutable(index);
}
inline ::protos::common::Hero* WarResponse::add_herolist() {
  return herolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Hero >&
WarResponse::herolist() const {
  return herolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Hero >*
WarResponse::mutable_herolist() {
  return &herolist_;
}

// optional int32 addHurt = 4;
inline bool WarResponse::has_addhurt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarResponse::set_has_addhurt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarResponse::clear_has_addhurt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarResponse::clear_addhurt() {
  addhurt_ = 0;
  clear_has_addhurt();
}
inline ::google::protobuf::int32 WarResponse::addhurt() const {
  return addhurt_;
}
inline void WarResponse::set_addhurt(::google::protobuf::int32 value) {
  set_has_addhurt();
  addhurt_ = value;
}

// -------------------------------------------------------------------

// BossFinishReq

// required int32 hurt = 1;
inline bool BossFinishReq::has_hurt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossFinishReq::set_has_hurt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossFinishReq::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossFinishReq::clear_hurt() {
  hurt_ = 0;
  clear_has_hurt();
}
inline ::google::protobuf::int32 BossFinishReq::hurt() const {
  return hurt_;
}
inline void BossFinishReq::set_hurt(::google::protobuf::int32 value) {
  set_has_hurt();
  hurt_ = value;
}

// repeated int32 checkHurt = 2 [packed = true];
inline int BossFinishReq::checkhurt_size() const {
  return checkhurt_.size();
}
inline void BossFinishReq::clear_checkhurt() {
  checkhurt_.Clear();
}
inline ::google::protobuf::int32 BossFinishReq::checkhurt(int index) const {
  return checkhurt_.Get(index);
}
inline void BossFinishReq::set_checkhurt(int index, ::google::protobuf::int32 value) {
  checkhurt_.Set(index, value);
}
inline void BossFinishReq::add_checkhurt(::google::protobuf::int32 value) {
  checkhurt_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BossFinishReq::checkhurt() const {
  return checkhurt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BossFinishReq::mutable_checkhurt() {
  return &checkhurt_;
}

// required sint32 checkSum = 3;
inline bool BossFinishReq::has_checksum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossFinishReq::set_has_checksum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossFinishReq::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossFinishReq::clear_checksum() {
  checksum_ = 0;
  clear_has_checksum();
}
inline ::google::protobuf::int32 BossFinishReq::checksum() const {
  return checksum_;
}
inline void BossFinishReq::set_checksum(::google::protobuf::int32 value) {
  set_has_checksum();
  checksum_ = value;
}

// -------------------------------------------------------------------

// BossFinishRes

// required int32 result = 1;
inline bool BossFinishRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossFinishRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossFinishRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossFinishRes::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 BossFinishRes::result() const {
  return result_;
}
inline void BossFinishRes::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 hurt = 2;
inline bool BossFinishRes::has_hurt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossFinishRes::set_has_hurt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossFinishRes::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossFinishRes::clear_hurt() {
  hurt_ = 0;
  clear_has_hurt();
}
inline ::google::protobuf::int32 BossFinishRes::hurt() const {
  return hurt_;
}
inline void BossFinishRes::set_hurt(::google::protobuf::int32 value) {
  set_has_hurt();
  hurt_ = value;
}

// required int32 totalHurt = 3;
inline bool BossFinishRes::has_totalhurt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossFinishRes::set_has_totalhurt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossFinishRes::clear_has_totalhurt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossFinishRes::clear_totalhurt() {
  totalhurt_ = 0;
  clear_has_totalhurt();
}
inline ::google::protobuf::int32 BossFinishRes::totalhurt() const {
  return totalhurt_;
}
inline void BossFinishRes::set_totalhurt(::google::protobuf::int32 value) {
  set_has_totalhurt();
  totalhurt_ = value;
}

// optional int32 rank = 4;
inline bool BossFinishRes::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossFinishRes::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossFinishRes::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossFinishRes::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 BossFinishRes::rank() const {
  return rank_;
}
inline void BossFinishRes::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional .protos.NextRank next = 5;
inline bool BossFinishRes::has_next() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossFinishRes::set_has_next() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossFinishRes::clear_has_next() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossFinishRes::clear_next() {
  if (next_ != NULL) next_->::protos::NextRank::Clear();
  clear_has_next();
}
inline const ::protos::NextRank& BossFinishRes::next() const {
  return next_ != NULL ? *next_ : *default_instance_->next_;
}
inline ::protos::NextRank* BossFinishRes::mutable_next() {
  set_has_next();
  if (next_ == NULL) next_ = new ::protos::NextRank;
  return next_;
}
inline ::protos::NextRank* BossFinishRes::release_next() {
  clear_has_next();
  ::protos::NextRank* temp = next_;
  next_ = NULL;
  return temp;
}
inline void BossFinishRes::set_allocated_next(::protos::NextRank* next) {
  delete next_;
  next_ = next;
  if (next) {
    set_has_next();
  } else {
    clear_has_next();
  }
}

// -------------------------------------------------------------------

// BossPrizes

// required bool result = 1;
inline bool BossPrizes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossPrizes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossPrizes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossPrizes::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool BossPrizes::result() const {
  return result_;
}
inline void BossPrizes::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// repeated .protos.BossPrize prizeList = 2;
inline int BossPrizes::prizelist_size() const {
  return prizelist_.size();
}
inline void BossPrizes::clear_prizelist() {
  prizelist_.Clear();
}
inline const ::protos::BossPrize& BossPrizes::prizelist(int index) const {
  return prizelist_.Get(index);
}
inline ::protos::BossPrize* BossPrizes::mutable_prizelist(int index) {
  return prizelist_.Mutable(index);
}
inline ::protos::BossPrize* BossPrizes::add_prizelist() {
  return prizelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::BossPrize >&
BossPrizes::prizelist() const {
  return prizelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::BossPrize >*
BossPrizes::mutable_prizelist() {
  return &prizelist_;
}

// -------------------------------------------------------------------

// ChallengeData

// optional int32 hurt = 1;
inline bool ChallengeData::has_hurt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeData::set_has_hurt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChallengeData::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChallengeData::clear_hurt() {
  hurt_ = 0;
  clear_has_hurt();
}
inline ::google::protobuf::int32 ChallengeData::hurt() const {
  return hurt_;
}
inline void ChallengeData::set_hurt(::google::protobuf::int32 value) {
  set_has_hurt();
  hurt_ = value;
}

// optional int32 rank = 2;
inline bool ChallengeData::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChallengeData::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChallengeData::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChallengeData::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ChallengeData::rank() const {
  return rank_;
}
inline void ChallengeData::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 inspire = 3;
inline bool ChallengeData::has_inspire() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChallengeData::set_has_inspire() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChallengeData::clear_has_inspire() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChallengeData::clear_inspire() {
  inspire_ = 0;
  clear_has_inspire();
}
inline ::google::protobuf::int32 ChallengeData::inspire() const {
  return inspire_;
}
inline void ChallengeData::set_inspire(::google::protobuf::int32 value) {
  set_has_inspire();
  inspire_ = value;
}

// optional int32 inspirePrice = 4;
inline bool ChallengeData::has_inspireprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChallengeData::set_has_inspireprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChallengeData::clear_has_inspireprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChallengeData::clear_inspireprice() {
  inspireprice_ = 0;
  clear_has_inspireprice();
}
inline ::google::protobuf::int32 ChallengeData::inspireprice() const {
  return inspireprice_;
}
inline void ChallengeData::set_inspireprice(::google::protobuf::int32 value) {
  set_has_inspireprice();
  inspireprice_ = value;
}

// repeated .protos.common.Prize prizes = 5;
inline int ChallengeData::prizes_size() const {
  return prizes_.size();
}
inline void ChallengeData::clear_prizes() {
  prizes_.Clear();
}
inline const ::protos::common::Prize& ChallengeData::prizes(int index) const {
  return prizes_.Get(index);
}
inline ::protos::common::Prize* ChallengeData::mutable_prizes(int index) {
  return prizes_.Mutable(index);
}
inline ::protos::common::Prize* ChallengeData::add_prizes() {
  return prizes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
ChallengeData::prizes() const {
  return prizes_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
ChallengeData::mutable_prizes() {
  return &prizes_;
}

// optional int32 againTime = 6;
inline bool ChallengeData::has_againtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChallengeData::set_has_againtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChallengeData::clear_has_againtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChallengeData::clear_againtime() {
  againtime_ = 0;
  clear_has_againtime();
}
inline ::google::protobuf::int32 ChallengeData::againtime() const {
  return againtime_;
}
inline void ChallengeData::set_againtime(::google::protobuf::int32 value) {
  set_has_againtime();
  againtime_ = value;
}

// -------------------------------------------------------------------

// BossPrize

// required int32 rank = 1;
inline bool BossPrize::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossPrize::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossPrize::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossPrize::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 BossPrize::rank() const {
  return rank_;
}
inline void BossPrize::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated .protos.common.Prize prizes = 2;
inline int BossPrize::prizes_size() const {
  return prizes_.size();
}
inline void BossPrize::clear_prizes() {
  prizes_.Clear();
}
inline const ::protos::common::Prize& BossPrize::prizes(int index) const {
  return prizes_.Get(index);
}
inline ::protos::common::Prize* BossPrize::mutable_prizes(int index) {
  return prizes_.Mutable(index);
}
inline ::protos::common::Prize* BossPrize::add_prizes() {
  return prizes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
BossPrize::prizes() const {
  return prizes_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
BossPrize::mutable_prizes() {
  return &prizes_;
}

// -------------------------------------------------------------------

// NextRank

// optional int32 rank = 1;
inline bool NextRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NextRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NextRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NextRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 NextRank::rank() const {
  return rank_;
}
inline void NextRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 level = 2;
inline bool NextRank::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NextRank::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NextRank::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NextRank::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NextRank::level() const {
  return level_;
}
inline void NextRank::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string name = 3;
inline bool NextRank::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NextRank::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NextRank::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NextRank::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NextRank::name() const {
  return *name_;
}
inline void NextRank::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NextRank::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NextRank::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NextRank::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NextRank::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NextRank::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 hurt = 4;
inline bool NextRank::has_hurt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NextRank::set_has_hurt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NextRank::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NextRank::clear_hurt() {
  hurt_ = 0;
  clear_has_hurt();
}
inline ::google::protobuf::int32 NextRank::hurt() const {
  return hurt_;
}
inline void NextRank::set_hurt(::google::protobuf::int32 value) {
  set_has_hurt();
  hurt_ = value;
}

// optional int32 thumb = 5;
inline bool NextRank::has_thumb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NextRank::set_has_thumb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NextRank::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NextRank::clear_thumb() {
  thumb_ = 0;
  clear_has_thumb();
}
inline ::google::protobuf::int32 NextRank::thumb() const {
  return thumb_;
}
inline void NextRank::set_thumb(::google::protobuf::int32 value) {
  set_has_thumb();
  thumb_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_boss_5fprotocol_2eproto__INCLUDED
