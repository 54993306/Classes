// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rank_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* RankRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Teams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Teams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rank_5fprotocol_2eproto() {
  protobuf_AddDesc_rank_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rank_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  RankRequest_descriptor_ = file->message_type(0);
  static const int RankRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRequest, ranktype_),
  };
  RankRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankRequest_descriptor_,
      RankRequest::default_instance_,
      RankRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankRequest));
  RankResponse_descriptor_ = file->message_type(1);
  static const int RankResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, ranklist_),
  };
  RankResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankResponse_descriptor_,
      RankResponse::default_instance_,
      RankResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankResponse));
  RankData_descriptor_ = file->message_type(2);
  static const int RankData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, roledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, teamlist_),
  };
  RankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankData_descriptor_,
      RankData::default_instance_,
      RankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankData));
  Teams_descriptor_ = file->message_type(3);
  static const int Teams_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Teams, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Teams, thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Teams, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Teams, color_),
  };
  Teams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Teams_descriptor_,
      Teams::default_instance_,
      Teams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Teams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Teams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Teams));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rank_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankRequest_descriptor_, &RankRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankResponse_descriptor_, &RankResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankData_descriptor_, &RankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Teams_descriptor_, &Teams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rank_5fprotocol_2eproto() {
  delete RankRequest::default_instance_;
  delete RankRequest_reflection_;
  delete RankResponse::default_instance_;
  delete RankResponse_reflection_;
  delete RankData::default_instance_;
  delete RankData_reflection_;
  delete Teams::default_instance_;
  delete Teams_reflection_;
}

void protobuf_AddDesc_rank_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2frole_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023rank_protocol.proto\022\006protos\032\030common/ro"
    "le_common.proto\"\037\n\013RankRequest\022\020\n\010rankTy"
    "pe\030\001 \002(\005\"T\n\014RankResponse\022 \n\006myRank\030\001 \001(\013"
    "2\020.protos.RankData\022\"\n\010rankList\030\002 \003(\0132\020.p"
    "rotos.RankData\"n\n\010RankData\022\014\n\004rank\030\001 \002(\005"
    "\022%\n\010roleData\030\002 \001(\0132\023.protos.common.Role\022"
    "\014\n\004hurt\030\003 \001(\005\022\037\n\010teamList\030\004 \003(\0132\r.protos"
    ".Teams\"B\n\005Teams\022\n\n\002id\030\001 \002(\005\022\r\n\005thumb\030\002 \001"
    "(\005\022\017\n\007quality\030\004 \001(\005\022\r\n\005color\030\005 \001(\005B/\n\035da"
    "ss.server.gameserver.protosB\014RankProtoco"
    "lH\001", 403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rank_protocol.proto", &protobuf_RegisterTypes);
  RankRequest::default_instance_ = new RankRequest();
  RankResponse::default_instance_ = new RankResponse();
  RankData::default_instance_ = new RankData();
  Teams::default_instance_ = new Teams();
  RankRequest::default_instance_->InitAsDefaultInstance();
  RankResponse::default_instance_->InitAsDefaultInstance();
  RankData::default_instance_->InitAsDefaultInstance();
  Teams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rank_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rank_5fprotocol_2eproto {
  StaticDescriptorInitializer_rank_5fprotocol_2eproto() {
    protobuf_AddDesc_rank_5fprotocol_2eproto();
  }
} static_descriptor_initializer_rank_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RankRequest::kRankTypeFieldNumber;
#endif  // !_MSC_VER

RankRequest::RankRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankRequest::InitAsDefaultInstance() {
}

RankRequest::RankRequest(const RankRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankRequest::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankRequest::~RankRequest() {
  SharedDtor();
}

void RankRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankRequest_descriptor_;
}

const RankRequest& RankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_5fprotocol_2eproto();
  return *default_instance_;
}

RankRequest* RankRequest::default_instance_ = NULL;

RankRequest* RankRequest::New() const {
  return new RankRequest;
}

void RankRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rankType = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankRequest::MergeFrom(const RankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRequest::CopyFrom(const RankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RankRequest::Swap(RankRequest* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankRequest_descriptor_;
  metadata.reflection = RankRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankResponse::kMyRankFieldNumber;
const int RankResponse::kRankListFieldNumber;
#endif  // !_MSC_VER

RankResponse::RankResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankResponse::InitAsDefaultInstance() {
  myrank_ = const_cast< ::protos::RankData*>(&::protos::RankData::default_instance());
}

RankResponse::RankResponse(const RankResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankResponse::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankResponse::~RankResponse() {
  SharedDtor();
}

void RankResponse::SharedDtor() {
  if (this != default_instance_) {
    delete myrank_;
  }
}

void RankResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankResponse_descriptor_;
}

const RankResponse& RankResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_5fprotocol_2eproto();
  return *default_instance_;
}

RankResponse* RankResponse::default_instance_ = NULL;

RankResponse* RankResponse::New() const {
  return new RankResponse;
}

void RankResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_myrank()) {
      if (myrank_ != NULL) myrank_->::protos::RankData::Clear();
    }
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protos.RankData myRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rankList;
        break;
      }

      // repeated .protos.RankData rankList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rankList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protos.RankData myRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myrank(), output);
  }

  // repeated .protos.RankData rankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protos.RankData myRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myrank(), target);
  }

  // repeated .protos.RankData rankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protos.RankData myRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrank());
    }

  }
  // repeated .protos.RankData rankList = 2;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankResponse::MergeFrom(const RankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      mutable_myrank()->::protos::RankData::MergeFrom(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankResponse::CopyFrom(const RankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankResponse::IsInitialized() const {

  if (has_myrank()) {
    if (!this->myrank().IsInitialized()) return false;
  }
  for (int i = 0; i < ranklist_size(); i++) {
    if (!this->ranklist(i).IsInitialized()) return false;
  }
  return true;
}

void RankResponse::Swap(RankResponse* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankResponse_descriptor_;
  metadata.reflection = RankResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankData::kRankFieldNumber;
const int RankData::kRoleDataFieldNumber;
const int RankData::kHurtFieldNumber;
const int RankData::kTeamListFieldNumber;
#endif  // !_MSC_VER

RankData::RankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankData::InitAsDefaultInstance() {
  roledata_ = const_cast< ::protos::common::Role*>(&::protos::common::Role::default_instance());
}

RankData::RankData(const RankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankData::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  roledata_ = NULL;
  hurt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankData::~RankData() {
  SharedDtor();
}

void RankData::SharedDtor() {
  if (this != default_instance_) {
    delete roledata_;
  }
}

void RankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankData_descriptor_;
}

const RankData& RankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_5fprotocol_2eproto();
  return *default_instance_;
}

RankData* RankData::default_instance_ = NULL;

RankData* RankData::New() const {
  return new RankData;
}

void RankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_roledata()) {
      if (roledata_ != NULL) roledata_->::protos::common::Role::Clear();
    }
    hurt_ = 0;
  }
  teamlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleData;
        break;
      }

      // optional .protos.common.Role roleData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hurt;
        break;
      }

      // optional int32 hurt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_teamList;
        break;
      }

      // repeated .protos.Teams teamList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_teamList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional .protos.common.Role roleData = 2;
  if (has_roledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roledata(), output);
  }

  // optional int32 hurt = 3;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hurt(), output);
  }

  // repeated .protos.Teams teamList = 4;
  for (int i = 0; i < this->teamlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->teamlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional .protos.common.Role roleData = 2;
  if (has_roledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roledata(), target);
  }

  // optional int32 hurt = 3;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hurt(), target);
  }

  // repeated .protos.Teams teamList = 4;
  for (int i = 0; i < this->teamlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->teamlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional .protos.common.Role roleData = 2;
    if (has_roledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roledata());
    }

    // optional int32 hurt = 3;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt());
    }

  }
  // repeated .protos.Teams teamList = 4;
  total_size += 1 * this->teamlist_size();
  for (int i = 0; i < this->teamlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankData::MergeFrom(const RankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamlist_.MergeFrom(from.teamlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_roledata()) {
      mutable_roledata()->::protos::common::Role::MergeFrom(from.roledata());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankData::CopyFrom(const RankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roledata()) {
    if (!this->roledata().IsInitialized()) return false;
  }
  for (int i = 0; i < teamlist_size(); i++) {
    if (!this->teamlist(i).IsInitialized()) return false;
  }
  return true;
}

void RankData::Swap(RankData* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(roledata_, other->roledata_);
    std::swap(hurt_, other->hurt_);
    teamlist_.Swap(&other->teamlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankData_descriptor_;
  metadata.reflection = RankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Teams::kIdFieldNumber;
const int Teams::kThumbFieldNumber;
const int Teams::kQualityFieldNumber;
const int Teams::kColorFieldNumber;
#endif  // !_MSC_VER

Teams::Teams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Teams::InitAsDefaultInstance() {
}

Teams::Teams(const Teams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Teams::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  thumb_ = 0;
  quality_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Teams::~Teams() {
  SharedDtor();
}

void Teams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Teams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Teams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Teams_descriptor_;
}

const Teams& Teams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rank_5fprotocol_2eproto();
  return *default_instance_;
}

Teams* Teams::default_instance_ = NULL;

Teams* Teams::New() const {
  return new Teams;
}

void Teams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    thumb_ = 0;
    quality_ = 0;
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Teams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thumb;
        break;
      }

      // optional int32 thumb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumb_)));
          set_has_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }

      // optional int32 color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Teams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 thumb = 2;
  if (has_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thumb(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // optional int32 color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Teams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 thumb = 2;
  if (has_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thumb(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // optional int32 color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Teams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 thumb = 2;
    if (has_thumb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thumb());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Teams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Teams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Teams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Teams::MergeFrom(const Teams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_thumb()) {
      set_thumb(from.thumb());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Teams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Teams::CopyFrom(const Teams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Teams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Teams::Swap(Teams* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(thumb_, other->thumb_);
    std::swap(quality_, other->quality_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Teams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Teams_descriptor_;
  metadata.reflection = Teams_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
