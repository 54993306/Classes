// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lottery_protocol.proto

#ifndef PROTOBUF_lottery_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_lottery_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

class LotteryData;
class LotteryRequest;
class LotteryResponse;
class Lottery;

// ===================================================================

class LotteryData : public ::google::protobuf::Message {
 public:
  LotteryData();
  virtual ~LotteryData();

  LotteryData(const LotteryData& from);

  inline LotteryData& operator=(const LotteryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryData& default_instance();

  void Swap(LotteryData* other);

  // implements Message ----------------------------------------------

  LotteryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryData& from);
  void MergeFrom(const LotteryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 price_1 = 1;
  inline bool has_price_1() const;
  inline void clear_price_1();
  static const int kPrice1FieldNumber = 1;
  inline ::google::protobuf::int32 price_1() const;
  inline void set_price_1(::google::protobuf::int32 value);

  // required int32 price_2 = 2;
  inline bool has_price_2() const;
  inline void clear_price_2();
  static const int kPrice2FieldNumber = 2;
  inline ::google::protobuf::int32 price_2() const;
  inline void set_price_2(::google::protobuf::int32 value);

  // required int32 price_3 = 3;
  inline bool has_price_3() const;
  inline void clear_price_3();
  static const int kPrice3FieldNumber = 3;
  inline ::google::protobuf::int32 price_3() const;
  inline void set_price_3(::google::protobuf::int32 value);

  // repeated .protos.Lottery prizeList = 4;
  inline int prizelist_size() const;
  inline void clear_prizelist();
  static const int kPrizeListFieldNumber = 4;
  inline const ::protos::Lottery& prizelist(int index) const;
  inline ::protos::Lottery* mutable_prizelist(int index);
  inline ::protos::Lottery* add_prizelist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::Lottery >&
      prizelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::Lottery >*
      mutable_prizelist();

  // optional fixed64 freeTime = 5;
  inline bool has_freetime() const;
  inline void clear_freetime();
  static const int kFreeTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 freetime() const;
  inline void set_freetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protos.LotteryData)
 private:
  inline void set_has_price_1();
  inline void clear_has_price_1();
  inline void set_has_price_2();
  inline void clear_has_price_2();
  inline void set_has_price_3();
  inline void clear_has_price_3();
  inline void set_has_freetime();
  inline void clear_has_freetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 price_1_;
  ::google::protobuf::int32 price_2_;
  ::google::protobuf::RepeatedPtrField< ::protos::Lottery > prizelist_;
  ::google::protobuf::uint64 freetime_;
  ::google::protobuf::int32 price_3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LotteryData* default_instance_;
};
// -------------------------------------------------------------------

class LotteryRequest : public ::google::protobuf::Message {
 public:
  LotteryRequest();
  virtual ~LotteryRequest();

  LotteryRequest(const LotteryRequest& from);

  inline LotteryRequest& operator=(const LotteryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryRequest& default_instance();

  void Swap(LotteryRequest* other);

  // implements Message ----------------------------------------------

  LotteryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryRequest& from);
  void MergeFrom(const LotteryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lottType = 1;
  inline bool has_lotttype() const;
  inline void clear_lotttype();
  static const int kLottTypeFieldNumber = 1;
  inline ::google::protobuf::int32 lotttype() const;
  inline void set_lotttype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LotteryRequest)
 private:
  inline void set_has_lotttype();
  inline void clear_has_lotttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lotttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LotteryRequest* default_instance_;
};
// -------------------------------------------------------------------

class LotteryResponse : public ::google::protobuf::Message {
 public:
  LotteryResponse();
  virtual ~LotteryResponse();

  LotteryResponse(const LotteryResponse& from);

  inline LotteryResponse& operator=(const LotteryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryResponse& default_instance();

  void Swap(LotteryResponse* other);

  // implements Message ----------------------------------------------

  LotteryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryResponse& from);
  void MergeFrom(const LotteryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .protos.Lottery prizeList = 2;
  inline int prizelist_size() const;
  inline void clear_prizelist();
  static const int kPrizeListFieldNumber = 2;
  inline const ::protos::Lottery& prizelist(int index) const;
  inline ::protos::Lottery* mutable_prizelist(int index);
  inline ::protos::Lottery* add_prizelist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::Lottery >&
      prizelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::Lottery >*
      mutable_prizelist();

  // optional int32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LotteryResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protos::Lottery > prizelist_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LotteryResponse* default_instance_;
};
// -------------------------------------------------------------------

class Lottery : public ::google::protobuf::Message {
 public:
  Lottery();
  virtual ~Lottery();

  Lottery(const Lottery& from);

  inline Lottery& operator=(const Lottery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lottery& default_instance();

  void Swap(Lottery* other);

  // implements Message ----------------------------------------------

  Lottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lottery& from);
  void MergeFrom(const Lottery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // required int32 thumb = 3;
  inline bool has_thumb() const;
  inline void clear_thumb();
  static const int kThumbFieldNumber = 3;
  inline ::google::protobuf::int32 thumb() const;
  inline void set_thumb(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool isnew = 5;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsnewFieldNumber = 5;
  inline bool isnew() const;
  inline void set_isnew(bool value);

  // optional int32 heroType = 6;
  inline bool has_herotype() const;
  inline void clear_herotype();
  static const int kHeroTypeFieldNumber = 6;
  inline ::google::protobuf::int32 herotype() const;
  inline void set_herotype(::google::protobuf::int32 value);

  // optional int32 num = 8;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 8;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 color = 9;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 9;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.Lottery)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_thumb();
  inline void clear_has_thumb();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_herotype();
  inline void clear_has_herotype();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 thumb_;
  ::google::protobuf::int32 type_;
  bool isnew_;
  ::google::protobuf::int32 herotype_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Lottery* default_instance_;
};
// ===================================================================


// ===================================================================

// LotteryData

// required int32 price_1 = 1;
inline bool LotteryData::has_price_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryData::set_has_price_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryData::clear_has_price_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryData::clear_price_1() {
  price_1_ = 0;
  clear_has_price_1();
}
inline ::google::protobuf::int32 LotteryData::price_1() const {
  return price_1_;
}
inline void LotteryData::set_price_1(::google::protobuf::int32 value) {
  set_has_price_1();
  price_1_ = value;
}

// required int32 price_2 = 2;
inline bool LotteryData::has_price_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryData::set_has_price_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryData::clear_has_price_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryData::clear_price_2() {
  price_2_ = 0;
  clear_has_price_2();
}
inline ::google::protobuf::int32 LotteryData::price_2() const {
  return price_2_;
}
inline void LotteryData::set_price_2(::google::protobuf::int32 value) {
  set_has_price_2();
  price_2_ = value;
}

// required int32 price_3 = 3;
inline bool LotteryData::has_price_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryData::set_has_price_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryData::clear_has_price_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryData::clear_price_3() {
  price_3_ = 0;
  clear_has_price_3();
}
inline ::google::protobuf::int32 LotteryData::price_3() const {
  return price_3_;
}
inline void LotteryData::set_price_3(::google::protobuf::int32 value) {
  set_has_price_3();
  price_3_ = value;
}

// repeated .protos.Lottery prizeList = 4;
inline int LotteryData::prizelist_size() const {
  return prizelist_.size();
}
inline void LotteryData::clear_prizelist() {
  prizelist_.Clear();
}
inline const ::protos::Lottery& LotteryData::prizelist(int index) const {
  return prizelist_.Get(index);
}
inline ::protos::Lottery* LotteryData::mutable_prizelist(int index) {
  return prizelist_.Mutable(index);
}
inline ::protos::Lottery* LotteryData::add_prizelist() {
  return prizelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::Lottery >&
LotteryData::prizelist() const {
  return prizelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::Lottery >*
LotteryData::mutable_prizelist() {
  return &prizelist_;
}

// optional fixed64 freeTime = 5;
inline bool LotteryData::has_freetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LotteryData::set_has_freetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LotteryData::clear_has_freetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LotteryData::clear_freetime() {
  freetime_ = GOOGLE_ULONGLONG(0);
  clear_has_freetime();
}
inline ::google::protobuf::uint64 LotteryData::freetime() const {
  return freetime_;
}
inline void LotteryData::set_freetime(::google::protobuf::uint64 value) {
  set_has_freetime();
  freetime_ = value;
}

// -------------------------------------------------------------------

// LotteryRequest

// required int32 lottType = 1;
inline bool LotteryRequest::has_lotttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryRequest::set_has_lotttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryRequest::clear_has_lotttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryRequest::clear_lotttype() {
  lotttype_ = 0;
  clear_has_lotttype();
}
inline ::google::protobuf::int32 LotteryRequest::lotttype() const {
  return lotttype_;
}
inline void LotteryRequest::set_lotttype(::google::protobuf::int32 value) {
  set_has_lotttype();
  lotttype_ = value;
}

// -------------------------------------------------------------------

// LotteryResponse

// required int32 result = 1;
inline bool LotteryResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LotteryResponse::result() const {
  return result_;
}
inline void LotteryResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .protos.Lottery prizeList = 2;
inline int LotteryResponse::prizelist_size() const {
  return prizelist_.size();
}
inline void LotteryResponse::clear_prizelist() {
  prizelist_.Clear();
}
inline const ::protos::Lottery& LotteryResponse::prizelist(int index) const {
  return prizelist_.Get(index);
}
inline ::protos::Lottery* LotteryResponse::mutable_prizelist(int index) {
  return prizelist_.Mutable(index);
}
inline ::protos::Lottery* LotteryResponse::add_prizelist() {
  return prizelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::Lottery >&
LotteryResponse::prizelist() const {
  return prizelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::Lottery >*
LotteryResponse::mutable_prizelist() {
  return &prizelist_;
}

// optional int32 price = 3;
inline bool LotteryResponse::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryResponse::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryResponse::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryResponse::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 LotteryResponse::price() const {
  return price_;
}
inline void LotteryResponse::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// Lottery

// required int32 id = 1;
inline bool Lottery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lottery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lottery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lottery::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Lottery::id() const {
  return id_;
}
inline void Lottery::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 7;
inline bool Lottery::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lottery::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lottery::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lottery::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Lottery::name() const {
  return *name_;
}
inline void Lottery::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Lottery::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Lottery::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Lottery::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Lottery::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Lottery::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 quality = 2;
inline bool Lottery::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lottery::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lottery::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lottery::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 Lottery::quality() const {
  return quality_;
}
inline void Lottery::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// required int32 thumb = 3;
inline bool Lottery::has_thumb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lottery::set_has_thumb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lottery::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lottery::clear_thumb() {
  thumb_ = 0;
  clear_has_thumb();
}
inline ::google::protobuf::int32 Lottery::thumb() const {
  return thumb_;
}
inline void Lottery::set_thumb(::google::protobuf::int32 value) {
  set_has_thumb();
  thumb_ = value;
}

// optional int32 type = 4;
inline bool Lottery::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lottery::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lottery::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lottery::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Lottery::type() const {
  return type_;
}
inline void Lottery::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bool isnew = 5;
inline bool Lottery::has_isnew() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lottery::set_has_isnew() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lottery::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lottery::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool Lottery::isnew() const {
  return isnew_;
}
inline void Lottery::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
}

// optional int32 heroType = 6;
inline bool Lottery::has_herotype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lottery::set_has_herotype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lottery::clear_has_herotype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lottery::clear_herotype() {
  herotype_ = 0;
  clear_has_herotype();
}
inline ::google::protobuf::int32 Lottery::herotype() const {
  return herotype_;
}
inline void Lottery::set_herotype(::google::protobuf::int32 value) {
  set_has_herotype();
  herotype_ = value;
}

// optional int32 num = 8;
inline bool Lottery::has_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lottery::set_has_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lottery::clear_has_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lottery::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Lottery::num() const {
  return num_;
}
inline void Lottery::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 color = 9;
inline bool Lottery::has_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Lottery::set_has_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Lottery::clear_has_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Lottery::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Lottery::color() const {
  return color_;
}
inline void Lottery::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lottery_5fprotocol_2eproto__INCLUDED
