// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lottery_protocol.proto

#ifndef PROTOBUF_lottery_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_lottery_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/prize_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

class CardListReq;
class CardListRes;
class DrawCardStart;
class GetCardReq;
class GetCardRes;
class LuckyWheel;
class DrawRequest;
class DrawResponse;
class Notice;
class LotteryData;
class LotteryRequest;
class LotteryResponse;
class Lottery;

// ===================================================================

class CardListReq : public ::google::protobuf::Message {
 public:
  CardListReq();
  virtual ~CardListReq();

  CardListReq(const CardListReq& from);

  inline CardListReq& operator=(const CardListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardListReq& default_instance();

  void Swap(CardListReq* other);

  // implements Message ----------------------------------------------

  CardListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardListReq& from);
  void MergeFrom(const CardListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:protos.CardListReq)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static CardListReq* default_instance_;
};
// -------------------------------------------------------------------

class CardListRes : public ::google::protobuf::Message {
 public:
  CardListRes();
  virtual ~CardListRes();

  CardListRes(const CardListRes& from);

  inline CardListRes& operator=(const CardListRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardListRes& default_instance();

  void Swap(CardListRes* other);

  // implements Message ----------------------------------------------

  CardListRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardListRes& from);
  void MergeFrom(const CardListRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protos.common.Prize card_list = 1;
  inline int card_list_size() const;
  inline void clear_card_list();
  static const int kCardListFieldNumber = 1;
  inline const ::protos::common::Prize& card_list(int index) const;
  inline ::protos::common::Prize* mutable_card_list(int index);
  inline ::protos::common::Prize* add_card_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
      card_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
      mutable_card_list();

  // optional bool is_free = 2;
  inline bool has_is_free() const;
  inline void clear_is_free();
  static const int kIsFreeFieldNumber = 2;
  inline bool is_free() const;
  inline void set_is_free(bool value);

  // optional int32 price_1 = 3;
  inline bool has_price_1() const;
  inline void clear_price_1();
  static const int kPrice1FieldNumber = 3;
  inline ::google::protobuf::int32 price_1() const;
  inline void set_price_1(::google::protobuf::int32 value);

  // optional int32 price_2 = 4;
  inline bool has_price_2() const;
  inline void clear_price_2();
  static const int kPrice2FieldNumber = 4;
  inline ::google::protobuf::int32 price_2() const;
  inline void set_price_2(::google::protobuf::int32 value);

  // optional int32 draw_time = 5;
  inline bool has_draw_time() const;
  inline void clear_draw_time();
  static const int kDrawTimeFieldNumber = 5;
  inline ::google::protobuf::int32 draw_time() const;
  inline void set_draw_time(::google::protobuf::int32 value);

  // optional int32 ex_time = 6;
  inline bool has_ex_time() const;
  inline void clear_ex_time();
  static const int kExTimeFieldNumber = 6;
  inline ::google::protobuf::int32 ex_time() const;
  inline void set_ex_time(::google::protobuf::int32 value);

  // repeated .protos.Notice notices = 7;
  inline int notices_size() const;
  inline void clear_notices();
  static const int kNoticesFieldNumber = 7;
  inline const ::protos::Notice& notices(int index) const;
  inline ::protos::Notice* mutable_notices(int index);
  inline ::protos::Notice* add_notices();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::Notice >&
      notices() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::Notice >*
      mutable_notices();

  // @@protoc_insertion_point(class_scope:protos.CardListRes)
 private:
  inline void set_has_is_free();
  inline void clear_has_is_free();
  inline void set_has_price_1();
  inline void clear_has_price_1();
  inline void set_has_price_2();
  inline void clear_has_price_2();
  inline void set_has_draw_time();
  inline void clear_has_draw_time();
  inline void set_has_ex_time();
  inline void clear_has_ex_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protos::common::Prize > card_list_;
  bool is_free_;
  ::google::protobuf::int32 price_1_;
  ::google::protobuf::int32 price_2_;
  ::google::protobuf::int32 draw_time_;
  ::google::protobuf::RepeatedPtrField< ::protos::Notice > notices_;
  ::google::protobuf::int32 ex_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static CardListRes* default_instance_;
};
// -------------------------------------------------------------------

class DrawCardStart : public ::google::protobuf::Message {
 public:
  DrawCardStart();
  virtual ~DrawCardStart();

  DrawCardStart(const DrawCardStart& from);

  inline DrawCardStart& operator=(const DrawCardStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawCardStart& default_instance();

  void Swap(DrawCardStart* other);

  // implements Message ----------------------------------------------

  DrawCardStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawCardStart& from);
  void MergeFrom(const DrawCardStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.DrawCardStart)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static DrawCardStart* default_instance_;
};
// -------------------------------------------------------------------

class GetCardReq : public ::google::protobuf::Message {
 public:
  GetCardReq();
  virtual ~GetCardReq();

  GetCardReq(const GetCardReq& from);

  inline GetCardReq& operator=(const GetCardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCardReq& default_instance();

  void Swap(GetCardReq* other);

  // implements Message ----------------------------------------------

  GetCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCardReq& from);
  void MergeFrom(const GetCardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 card_pos = 1;
  inline bool has_card_pos() const;
  inline void clear_card_pos();
  static const int kCardPosFieldNumber = 1;
  inline ::google::protobuf::int32 card_pos() const;
  inline void set_card_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.GetCardReq)
 private:
  inline void set_has_card_pos();
  inline void clear_has_card_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static GetCardReq* default_instance_;
};
// -------------------------------------------------------------------

class GetCardRes : public ::google::protobuf::Message {
 public:
  GetCardRes();
  virtual ~GetCardRes();

  GetCardRes(const GetCardRes& from);

  inline GetCardRes& operator=(const GetCardRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCardRes& default_instance();

  void Swap(GetCardRes* other);

  // implements Message ----------------------------------------------

  GetCardRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCardRes& from);
  void MergeFrom(const GetCardRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .protos.common.Prize card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline const ::protos::common::Prize& card() const;
  inline ::protos::common::Prize* mutable_card();
  inline ::protos::common::Prize* release_card();
  inline void set_allocated_card(::protos::common::Prize* card);

  // @@protoc_insertion_point(class_scope:protos.GetCardRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_card();
  inline void clear_has_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protos::common::Prize* card_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static GetCardRes* default_instance_;
};
// -------------------------------------------------------------------

class LuckyWheel : public ::google::protobuf::Message {
 public:
  LuckyWheel();
  virtual ~LuckyWheel();

  LuckyWheel(const LuckyWheel& from);

  inline LuckyWheel& operator=(const LuckyWheel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuckyWheel& default_instance();

  void Swap(LuckyWheel* other);

  // implements Message ----------------------------------------------

  LuckyWheel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuckyWheel& from);
  void MergeFrom(const LuckyWheel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 price_1 = 1;
  inline bool has_price_1() const;
  inline void clear_price_1();
  static const int kPrice1FieldNumber = 1;
  inline ::google::protobuf::int32 price_1() const;
  inline void set_price_1(::google::protobuf::int32 value);

  // optional int32 price_10 = 2;
  inline bool has_price_10() const;
  inline void clear_price_10();
  static const int kPrice10FieldNumber = 2;
  inline ::google::protobuf::int32 price_10() const;
  inline void set_price_10(::google::protobuf::int32 value);

  // repeated .protos.common.Prize prize_list = 3;
  inline int prize_list_size() const;
  inline void clear_prize_list();
  static const int kPrizeListFieldNumber = 3;
  inline const ::protos::common::Prize& prize_list(int index) const;
  inline ::protos::common::Prize* mutable_prize_list(int index);
  inline ::protos::common::Prize* add_prize_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
      prize_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
      mutable_prize_list();

  // repeated .protos.Notice notices = 4;
  inline int notices_size() const;
  inline void clear_notices();
  static const int kNoticesFieldNumber = 4;
  inline const ::protos::Notice& notices(int index) const;
  inline ::protos::Notice* mutable_notices(int index);
  inline ::protos::Notice* add_notices();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::Notice >&
      notices() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::Notice >*
      mutable_notices();

  // @@protoc_insertion_point(class_scope:protos.LuckyWheel)
 private:
  inline void set_has_price_1();
  inline void clear_has_price_1();
  inline void set_has_price_10();
  inline void clear_has_price_10();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 price_1_;
  ::google::protobuf::int32 price_10_;
  ::google::protobuf::RepeatedPtrField< ::protos::common::Prize > prize_list_;
  ::google::protobuf::RepeatedPtrField< ::protos::Notice > notices_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LuckyWheel* default_instance_;
};
// -------------------------------------------------------------------

class DrawRequest : public ::google::protobuf::Message {
 public:
  DrawRequest();
  virtual ~DrawRequest();

  DrawRequest(const DrawRequest& from);

  inline DrawRequest& operator=(const DrawRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawRequest& default_instance();

  void Swap(DrawRequest* other);

  // implements Message ----------------------------------------------

  DrawRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawRequest& from);
  void MergeFrom(const DrawRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 draw_type = 1;
  inline bool has_draw_type() const;
  inline void clear_draw_type();
  static const int kDrawTypeFieldNumber = 1;
  inline ::google::protobuf::int32 draw_type() const;
  inline void set_draw_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.DrawRequest)
 private:
  inline void set_has_draw_type();
  inline void clear_has_draw_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 draw_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static DrawRequest* default_instance_;
};
// -------------------------------------------------------------------

class DrawResponse : public ::google::protobuf::Message {
 public:
  DrawResponse();
  virtual ~DrawResponse();

  DrawResponse(const DrawResponse& from);

  inline DrawResponse& operator=(const DrawResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawResponse& default_instance();

  void Swap(DrawResponse* other);

  // implements Message ----------------------------------------------

  DrawResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawResponse& from);
  void MergeFrom(const DrawResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated int32 prize_index = 2 [packed = true];
  inline int prize_index_size() const;
  inline void clear_prize_index();
  static const int kPrizeIndexFieldNumber = 2;
  inline ::google::protobuf::int32 prize_index(int index) const;
  inline void set_prize_index(int index, ::google::protobuf::int32 value);
  inline void add_prize_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      prize_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_prize_index();

  // @@protoc_insertion_point(class_scope:protos.DrawResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > prize_index_;
  mutable int _prize_index_cached_byte_size_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static DrawResponse* default_instance_;
};
// -------------------------------------------------------------------

class Notice : public ::google::protobuf::Message {
 public:
  Notice();
  virtual ~Notice();

  Notice(const Notice& from);

  inline Notice& operator=(const Notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notice& default_instance();

  void Swap(Notice* other);

  // implements Message ----------------------------------------------

  Notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notice& from);
  void MergeFrom(const Notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::std::string& player() const;
  inline void set_player(const ::std::string& value);
  inline void set_player(const char* value);
  inline void set_player(const char* value, size_t size);
  inline ::std::string* mutable_player();
  inline ::std::string* release_player();
  inline void set_allocated_player(::std::string* player);

  // optional int32 prize_type = 2;
  inline bool has_prize_type() const;
  inline void clear_prize_type();
  static const int kPrizeTypeFieldNumber = 2;
  inline ::google::protobuf::int32 prize_type() const;
  inline void set_prize_type(::google::protobuf::int32 value);

  // optional int32 prize_num = 3;
  inline bool has_prize_num() const;
  inline void clear_prize_num();
  static const int kPrizeNumFieldNumber = 3;
  inline ::google::protobuf::int32 prize_num() const;
  inline void set_prize_num(::google::protobuf::int32 value);

  // optional int32 prize_id = 4;
  inline bool has_prize_id() const;
  inline void clear_prize_id();
  static const int kPrizeIdFieldNumber = 4;
  inline ::google::protobuf::int32 prize_id() const;
  inline void set_prize_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.Notice)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_prize_type();
  inline void clear_has_prize_type();
  inline void set_has_prize_num();
  inline void clear_has_prize_num();
  inline void set_has_prize_id();
  inline void clear_has_prize_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_;
  ::google::protobuf::int32 prize_type_;
  ::google::protobuf::int32 prize_num_;
  ::google::protobuf::int32 prize_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Notice* default_instance_;
};
// -------------------------------------------------------------------

class LotteryData : public ::google::protobuf::Message {
 public:
  LotteryData();
  virtual ~LotteryData();

  LotteryData(const LotteryData& from);

  inline LotteryData& operator=(const LotteryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryData& default_instance();

  void Swap(LotteryData* other);

  // implements Message ----------------------------------------------

  LotteryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryData& from);
  void MergeFrom(const LotteryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 price_1 = 1;
  inline bool has_price_1() const;
  inline void clear_price_1();
  static const int kPrice1FieldNumber = 1;
  inline ::google::protobuf::int32 price_1() const;
  inline void set_price_1(::google::protobuf::int32 value);

  // required int32 price_2 = 2;
  inline bool has_price_2() const;
  inline void clear_price_2();
  static const int kPrice2FieldNumber = 2;
  inline ::google::protobuf::int32 price_2() const;
  inline void set_price_2(::google::protobuf::int32 value);

  // required int32 price_3 = 3;
  inline bool has_price_3() const;
  inline void clear_price_3();
  static const int kPrice3FieldNumber = 3;
  inline ::google::protobuf::int32 price_3() const;
  inline void set_price_3(::google::protobuf::int32 value);

  // repeated .protos.Lottery prizeList = 4;
  inline int prizelist_size() const;
  inline void clear_prizelist();
  static const int kPrizeListFieldNumber = 4;
  inline const ::protos::Lottery& prizelist(int index) const;
  inline ::protos::Lottery* mutable_prizelist(int index);
  inline ::protos::Lottery* add_prizelist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::Lottery >&
      prizelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::Lottery >*
      mutable_prizelist();

  // optional fixed64 freeTime = 5;
  inline bool has_freetime() const;
  inline void clear_freetime();
  static const int kFreeTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 freetime() const;
  inline void set_freetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protos.LotteryData)
 private:
  inline void set_has_price_1();
  inline void clear_has_price_1();
  inline void set_has_price_2();
  inline void clear_has_price_2();
  inline void set_has_price_3();
  inline void clear_has_price_3();
  inline void set_has_freetime();
  inline void clear_has_freetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 price_1_;
  ::google::protobuf::int32 price_2_;
  ::google::protobuf::RepeatedPtrField< ::protos::Lottery > prizelist_;
  ::google::protobuf::uint64 freetime_;
  ::google::protobuf::int32 price_3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LotteryData* default_instance_;
};
// -------------------------------------------------------------------

class LotteryRequest : public ::google::protobuf::Message {
 public:
  LotteryRequest();
  virtual ~LotteryRequest();

  LotteryRequest(const LotteryRequest& from);

  inline LotteryRequest& operator=(const LotteryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryRequest& default_instance();

  void Swap(LotteryRequest* other);

  // implements Message ----------------------------------------------

  LotteryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryRequest& from);
  void MergeFrom(const LotteryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lottType = 1;
  inline bool has_lotttype() const;
  inline void clear_lotttype();
  static const int kLottTypeFieldNumber = 1;
  inline ::google::protobuf::int32 lotttype() const;
  inline void set_lotttype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LotteryRequest)
 private:
  inline void set_has_lotttype();
  inline void clear_has_lotttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lotttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LotteryRequest* default_instance_;
};
// -------------------------------------------------------------------

class LotteryResponse : public ::google::protobuf::Message {
 public:
  LotteryResponse();
  virtual ~LotteryResponse();

  LotteryResponse(const LotteryResponse& from);

  inline LotteryResponse& operator=(const LotteryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryResponse& default_instance();

  void Swap(LotteryResponse* other);

  // implements Message ----------------------------------------------

  LotteryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryResponse& from);
  void MergeFrom(const LotteryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .protos.Lottery prizeList = 2;
  inline int prizelist_size() const;
  inline void clear_prizelist();
  static const int kPrizeListFieldNumber = 2;
  inline const ::protos::Lottery& prizelist(int index) const;
  inline ::protos::Lottery* mutable_prizelist(int index);
  inline ::protos::Lottery* add_prizelist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::Lottery >&
      prizelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::Lottery >*
      mutable_prizelist();

  // optional int32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LotteryResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protos::Lottery > prizelist_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LotteryResponse* default_instance_;
};
// -------------------------------------------------------------------

class Lottery : public ::google::protobuf::Message {
 public:
  Lottery();
  virtual ~Lottery();

  Lottery(const Lottery& from);

  inline Lottery& operator=(const Lottery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lottery& default_instance();

  void Swap(Lottery* other);

  // implements Message ----------------------------------------------

  Lottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lottery& from);
  void MergeFrom(const Lottery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 thumb = 3;
  inline bool has_thumb() const;
  inline void clear_thumb();
  static const int kThumbFieldNumber = 3;
  inline ::google::protobuf::int32 thumb() const;
  inline void set_thumb(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool isnew = 5;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsnewFieldNumber = 5;
  inline bool isnew() const;
  inline void set_isnew(bool value);

  // optional int32 heroType = 6;
  inline bool has_herotype() const;
  inline void clear_herotype();
  static const int kHeroTypeFieldNumber = 6;
  inline ::google::protobuf::int32 herotype() const;
  inline void set_herotype(::google::protobuf::int32 value);

  // optional int32 num = 8;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 8;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 color = 9;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 9;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.Lottery)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_thumb();
  inline void clear_has_thumb();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_herotype();
  inline void clear_has_herotype();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 thumb_;
  ::google::protobuf::int32 type_;
  bool isnew_;
  ::google::protobuf::int32 herotype_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_lottery_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_lottery_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Lottery* default_instance_;
};
// ===================================================================


// ===================================================================

// CardListReq

// optional bool result = 1;
inline bool CardListReq::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardListReq::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardListReq::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardListReq::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool CardListReq::result() const {
  return result_;
}
inline void CardListReq::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CardListRes

// repeated .protos.common.Prize card_list = 1;
inline int CardListRes::card_list_size() const {
  return card_list_.size();
}
inline void CardListRes::clear_card_list() {
  card_list_.Clear();
}
inline const ::protos::common::Prize& CardListRes::card_list(int index) const {
  return card_list_.Get(index);
}
inline ::protos::common::Prize* CardListRes::mutable_card_list(int index) {
  return card_list_.Mutable(index);
}
inline ::protos::common::Prize* CardListRes::add_card_list() {
  return card_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
CardListRes::card_list() const {
  return card_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
CardListRes::mutable_card_list() {
  return &card_list_;
}

// optional bool is_free = 2;
inline bool CardListRes::has_is_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardListRes::set_has_is_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardListRes::clear_has_is_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardListRes::clear_is_free() {
  is_free_ = false;
  clear_has_is_free();
}
inline bool CardListRes::is_free() const {
  return is_free_;
}
inline void CardListRes::set_is_free(bool value) {
  set_has_is_free();
  is_free_ = value;
}

// optional int32 price_1 = 3;
inline bool CardListRes::has_price_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardListRes::set_has_price_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardListRes::clear_has_price_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardListRes::clear_price_1() {
  price_1_ = 0;
  clear_has_price_1();
}
inline ::google::protobuf::int32 CardListRes::price_1() const {
  return price_1_;
}
inline void CardListRes::set_price_1(::google::protobuf::int32 value) {
  set_has_price_1();
  price_1_ = value;
}

// optional int32 price_2 = 4;
inline bool CardListRes::has_price_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CardListRes::set_has_price_2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CardListRes::clear_has_price_2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CardListRes::clear_price_2() {
  price_2_ = 0;
  clear_has_price_2();
}
inline ::google::protobuf::int32 CardListRes::price_2() const {
  return price_2_;
}
inline void CardListRes::set_price_2(::google::protobuf::int32 value) {
  set_has_price_2();
  price_2_ = value;
}

// optional int32 draw_time = 5;
inline bool CardListRes::has_draw_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CardListRes::set_has_draw_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CardListRes::clear_has_draw_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CardListRes::clear_draw_time() {
  draw_time_ = 0;
  clear_has_draw_time();
}
inline ::google::protobuf::int32 CardListRes::draw_time() const {
  return draw_time_;
}
inline void CardListRes::set_draw_time(::google::protobuf::int32 value) {
  set_has_draw_time();
  draw_time_ = value;
}

// optional int32 ex_time = 6;
inline bool CardListRes::has_ex_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CardListRes::set_has_ex_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CardListRes::clear_has_ex_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CardListRes::clear_ex_time() {
  ex_time_ = 0;
  clear_has_ex_time();
}
inline ::google::protobuf::int32 CardListRes::ex_time() const {
  return ex_time_;
}
inline void CardListRes::set_ex_time(::google::protobuf::int32 value) {
  set_has_ex_time();
  ex_time_ = value;
}

// repeated .protos.Notice notices = 7;
inline int CardListRes::notices_size() const {
  return notices_.size();
}
inline void CardListRes::clear_notices() {
  notices_.Clear();
}
inline const ::protos::Notice& CardListRes::notices(int index) const {
  return notices_.Get(index);
}
inline ::protos::Notice* CardListRes::mutable_notices(int index) {
  return notices_.Mutable(index);
}
inline ::protos::Notice* CardListRes::add_notices() {
  return notices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::Notice >&
CardListRes::notices() const {
  return notices_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::Notice >*
CardListRes::mutable_notices() {
  return &notices_;
}

// -------------------------------------------------------------------

// DrawCardStart

// required int32 result = 1;
inline bool DrawCardStart::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrawCardStart::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrawCardStart::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrawCardStart::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 DrawCardStart::result() const {
  return result_;
}
inline void DrawCardStart::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GetCardReq

// required int32 card_pos = 1;
inline bool GetCardReq::has_card_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCardReq::set_has_card_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCardReq::clear_has_card_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCardReq::clear_card_pos() {
  card_pos_ = 0;
  clear_has_card_pos();
}
inline ::google::protobuf::int32 GetCardReq::card_pos() const {
  return card_pos_;
}
inline void GetCardReq::set_card_pos(::google::protobuf::int32 value) {
  set_has_card_pos();
  card_pos_ = value;
}

// -------------------------------------------------------------------

// GetCardRes

// optional int32 result = 1;
inline bool GetCardRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCardRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCardRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCardRes::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GetCardRes::result() const {
  return result_;
}
inline void GetCardRes::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .protos.common.Prize card = 2;
inline bool GetCardRes::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCardRes::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCardRes::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCardRes::clear_card() {
  if (card_ != NULL) card_->::protos::common::Prize::Clear();
  clear_has_card();
}
inline const ::protos::common::Prize& GetCardRes::card() const {
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::protos::common::Prize* GetCardRes::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::protos::common::Prize;
  return card_;
}
inline ::protos::common::Prize* GetCardRes::release_card() {
  clear_has_card();
  ::protos::common::Prize* temp = card_;
  card_ = NULL;
  return temp;
}
inline void GetCardRes::set_allocated_card(::protos::common::Prize* card) {
  delete card_;
  card_ = card;
  if (card) {
    set_has_card();
  } else {
    clear_has_card();
  }
}

// -------------------------------------------------------------------

// LuckyWheel

// optional int32 price_1 = 1;
inline bool LuckyWheel::has_price_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuckyWheel::set_has_price_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuckyWheel::clear_has_price_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuckyWheel::clear_price_1() {
  price_1_ = 0;
  clear_has_price_1();
}
inline ::google::protobuf::int32 LuckyWheel::price_1() const {
  return price_1_;
}
inline void LuckyWheel::set_price_1(::google::protobuf::int32 value) {
  set_has_price_1();
  price_1_ = value;
}

// optional int32 price_10 = 2;
inline bool LuckyWheel::has_price_10() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuckyWheel::set_has_price_10() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuckyWheel::clear_has_price_10() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuckyWheel::clear_price_10() {
  price_10_ = 0;
  clear_has_price_10();
}
inline ::google::protobuf::int32 LuckyWheel::price_10() const {
  return price_10_;
}
inline void LuckyWheel::set_price_10(::google::protobuf::int32 value) {
  set_has_price_10();
  price_10_ = value;
}

// repeated .protos.common.Prize prize_list = 3;
inline int LuckyWheel::prize_list_size() const {
  return prize_list_.size();
}
inline void LuckyWheel::clear_prize_list() {
  prize_list_.Clear();
}
inline const ::protos::common::Prize& LuckyWheel::prize_list(int index) const {
  return prize_list_.Get(index);
}
inline ::protos::common::Prize* LuckyWheel::mutable_prize_list(int index) {
  return prize_list_.Mutable(index);
}
inline ::protos::common::Prize* LuckyWheel::add_prize_list() {
  return prize_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
LuckyWheel::prize_list() const {
  return prize_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
LuckyWheel::mutable_prize_list() {
  return &prize_list_;
}

// repeated .protos.Notice notices = 4;
inline int LuckyWheel::notices_size() const {
  return notices_.size();
}
inline void LuckyWheel::clear_notices() {
  notices_.Clear();
}
inline const ::protos::Notice& LuckyWheel::notices(int index) const {
  return notices_.Get(index);
}
inline ::protos::Notice* LuckyWheel::mutable_notices(int index) {
  return notices_.Mutable(index);
}
inline ::protos::Notice* LuckyWheel::add_notices() {
  return notices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::Notice >&
LuckyWheel::notices() const {
  return notices_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::Notice >*
LuckyWheel::mutable_notices() {
  return &notices_;
}

// -------------------------------------------------------------------

// DrawRequest

// required int32 draw_type = 1;
inline bool DrawRequest::has_draw_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrawRequest::set_has_draw_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrawRequest::clear_has_draw_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrawRequest::clear_draw_type() {
  draw_type_ = 0;
  clear_has_draw_type();
}
inline ::google::protobuf::int32 DrawRequest::draw_type() const {
  return draw_type_;
}
inline void DrawRequest::set_draw_type(::google::protobuf::int32 value) {
  set_has_draw_type();
  draw_type_ = value;
}

// -------------------------------------------------------------------

// DrawResponse

// required int32 result = 1;
inline bool DrawResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrawResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrawResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrawResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 DrawResponse::result() const {
  return result_;
}
inline void DrawResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated int32 prize_index = 2 [packed = true];
inline int DrawResponse::prize_index_size() const {
  return prize_index_.size();
}
inline void DrawResponse::clear_prize_index() {
  prize_index_.Clear();
}
inline ::google::protobuf::int32 DrawResponse::prize_index(int index) const {
  return prize_index_.Get(index);
}
inline void DrawResponse::set_prize_index(int index, ::google::protobuf::int32 value) {
  prize_index_.Set(index, value);
}
inline void DrawResponse::add_prize_index(::google::protobuf::int32 value) {
  prize_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DrawResponse::prize_index() const {
  return prize_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DrawResponse::mutable_prize_index() {
  return &prize_index_;
}

// -------------------------------------------------------------------

// Notice

// optional string player = 1;
inline bool Notice::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notice::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notice::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notice::clear_player() {
  if (player_ != &::google::protobuf::internal::kEmptyString) {
    player_->clear();
  }
  clear_has_player();
}
inline const ::std::string& Notice::player() const {
  return *player_;
}
inline void Notice::set_player(const ::std::string& value) {
  set_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    player_ = new ::std::string;
  }
  player_->assign(value);
}
inline void Notice::set_player(const char* value) {
  set_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    player_ = new ::std::string;
  }
  player_->assign(value);
}
inline void Notice::set_player(const char* value, size_t size) {
  set_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    player_ = new ::std::string;
  }
  player_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_player() {
  set_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    player_ = new ::std::string;
  }
  return player_;
}
inline ::std::string* Notice::release_player() {
  clear_has_player();
  if (player_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_;
    player_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_player(::std::string* player) {
  if (player_ != &::google::protobuf::internal::kEmptyString) {
    delete player_;
  }
  if (player) {
    set_has_player();
    player_ = player;
  } else {
    clear_has_player();
    player_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prize_type = 2;
inline bool Notice::has_prize_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notice::set_has_prize_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notice::clear_has_prize_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notice::clear_prize_type() {
  prize_type_ = 0;
  clear_has_prize_type();
}
inline ::google::protobuf::int32 Notice::prize_type() const {
  return prize_type_;
}
inline void Notice::set_prize_type(::google::protobuf::int32 value) {
  set_has_prize_type();
  prize_type_ = value;
}

// optional int32 prize_num = 3;
inline bool Notice::has_prize_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notice::set_has_prize_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notice::clear_has_prize_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notice::clear_prize_num() {
  prize_num_ = 0;
  clear_has_prize_num();
}
inline ::google::protobuf::int32 Notice::prize_num() const {
  return prize_num_;
}
inline void Notice::set_prize_num(::google::protobuf::int32 value) {
  set_has_prize_num();
  prize_num_ = value;
}

// optional int32 prize_id = 4;
inline bool Notice::has_prize_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Notice::set_has_prize_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Notice::clear_has_prize_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Notice::clear_prize_id() {
  prize_id_ = 0;
  clear_has_prize_id();
}
inline ::google::protobuf::int32 Notice::prize_id() const {
  return prize_id_;
}
inline void Notice::set_prize_id(::google::protobuf::int32 value) {
  set_has_prize_id();
  prize_id_ = value;
}

// -------------------------------------------------------------------

// LotteryData

// required int32 price_1 = 1;
inline bool LotteryData::has_price_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryData::set_has_price_1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryData::clear_has_price_1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryData::clear_price_1() {
  price_1_ = 0;
  clear_has_price_1();
}
inline ::google::protobuf::int32 LotteryData::price_1() const {
  return price_1_;
}
inline void LotteryData::set_price_1(::google::protobuf::int32 value) {
  set_has_price_1();
  price_1_ = value;
}

// required int32 price_2 = 2;
inline bool LotteryData::has_price_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryData::set_has_price_2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryData::clear_has_price_2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryData::clear_price_2() {
  price_2_ = 0;
  clear_has_price_2();
}
inline ::google::protobuf::int32 LotteryData::price_2() const {
  return price_2_;
}
inline void LotteryData::set_price_2(::google::protobuf::int32 value) {
  set_has_price_2();
  price_2_ = value;
}

// required int32 price_3 = 3;
inline bool LotteryData::has_price_3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryData::set_has_price_3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryData::clear_has_price_3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryData::clear_price_3() {
  price_3_ = 0;
  clear_has_price_3();
}
inline ::google::protobuf::int32 LotteryData::price_3() const {
  return price_3_;
}
inline void LotteryData::set_price_3(::google::protobuf::int32 value) {
  set_has_price_3();
  price_3_ = value;
}

// repeated .protos.Lottery prizeList = 4;
inline int LotteryData::prizelist_size() const {
  return prizelist_.size();
}
inline void LotteryData::clear_prizelist() {
  prizelist_.Clear();
}
inline const ::protos::Lottery& LotteryData::prizelist(int index) const {
  return prizelist_.Get(index);
}
inline ::protos::Lottery* LotteryData::mutable_prizelist(int index) {
  return prizelist_.Mutable(index);
}
inline ::protos::Lottery* LotteryData::add_prizelist() {
  return prizelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::Lottery >&
LotteryData::prizelist() const {
  return prizelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::Lottery >*
LotteryData::mutable_prizelist() {
  return &prizelist_;
}

// optional fixed64 freeTime = 5;
inline bool LotteryData::has_freetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LotteryData::set_has_freetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LotteryData::clear_has_freetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LotteryData::clear_freetime() {
  freetime_ = GOOGLE_ULONGLONG(0);
  clear_has_freetime();
}
inline ::google::protobuf::uint64 LotteryData::freetime() const {
  return freetime_;
}
inline void LotteryData::set_freetime(::google::protobuf::uint64 value) {
  set_has_freetime();
  freetime_ = value;
}

// -------------------------------------------------------------------

// LotteryRequest

// required int32 lottType = 1;
inline bool LotteryRequest::has_lotttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryRequest::set_has_lotttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryRequest::clear_has_lotttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryRequest::clear_lotttype() {
  lotttype_ = 0;
  clear_has_lotttype();
}
inline ::google::protobuf::int32 LotteryRequest::lotttype() const {
  return lotttype_;
}
inline void LotteryRequest::set_lotttype(::google::protobuf::int32 value) {
  set_has_lotttype();
  lotttype_ = value;
}

// -------------------------------------------------------------------

// LotteryResponse

// required int32 result = 1;
inline bool LotteryResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LotteryResponse::result() const {
  return result_;
}
inline void LotteryResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .protos.Lottery prizeList = 2;
inline int LotteryResponse::prizelist_size() const {
  return prizelist_.size();
}
inline void LotteryResponse::clear_prizelist() {
  prizelist_.Clear();
}
inline const ::protos::Lottery& LotteryResponse::prizelist(int index) const {
  return prizelist_.Get(index);
}
inline ::protos::Lottery* LotteryResponse::mutable_prizelist(int index) {
  return prizelist_.Mutable(index);
}
inline ::protos::Lottery* LotteryResponse::add_prizelist() {
  return prizelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::Lottery >&
LotteryResponse::prizelist() const {
  return prizelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::Lottery >*
LotteryResponse::mutable_prizelist() {
  return &prizelist_;
}

// optional int32 price = 3;
inline bool LotteryResponse::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryResponse::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryResponse::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryResponse::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 LotteryResponse::price() const {
  return price_;
}
inline void LotteryResponse::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// Lottery

// required int32 id = 1;
inline bool Lottery::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lottery::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lottery::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lottery::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Lottery::id() const {
  return id_;
}
inline void Lottery::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 7;
inline bool Lottery::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lottery::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lottery::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lottery::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Lottery::name() const {
  return *name_;
}
inline void Lottery::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Lottery::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Lottery::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Lottery::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Lottery::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Lottery::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 quality = 2;
inline bool Lottery::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lottery::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lottery::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lottery::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 Lottery::quality() const {
  return quality_;
}
inline void Lottery::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 thumb = 3;
inline bool Lottery::has_thumb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lottery::set_has_thumb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lottery::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lottery::clear_thumb() {
  thumb_ = 0;
  clear_has_thumb();
}
inline ::google::protobuf::int32 Lottery::thumb() const {
  return thumb_;
}
inline void Lottery::set_thumb(::google::protobuf::int32 value) {
  set_has_thumb();
  thumb_ = value;
}

// optional int32 type = 4;
inline bool Lottery::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lottery::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lottery::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lottery::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Lottery::type() const {
  return type_;
}
inline void Lottery::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bool isnew = 5;
inline bool Lottery::has_isnew() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lottery::set_has_isnew() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lottery::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lottery::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool Lottery::isnew() const {
  return isnew_;
}
inline void Lottery::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
}

// optional int32 heroType = 6;
inline bool Lottery::has_herotype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lottery::set_has_herotype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lottery::clear_has_herotype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lottery::clear_herotype() {
  herotype_ = 0;
  clear_has_herotype();
}
inline ::google::protobuf::int32 Lottery::herotype() const {
  return herotype_;
}
inline void Lottery::set_herotype(::google::protobuf::int32 value) {
  set_has_herotype();
  herotype_ = value;
}

// optional int32 num = 8;
inline bool Lottery::has_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lottery::set_has_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lottery::clear_has_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lottery::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Lottery::num() const {
  return num_;
}
inline void Lottery::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 color = 9;
inline bool Lottery::has_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Lottery::set_has_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Lottery::clear_has_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Lottery::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Lottery::color() const {
  return color_;
}
inline void Lottery::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lottery_5fprotocol_2eproto__INCLUDED
