// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lottery_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lottery_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* LotteryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lottery_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lottery_5fprotocol_2eproto() {
  protobuf_AddDesc_lottery_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lottery_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  LotteryData_descriptor_ = file->message_type(0);
  static const int LotteryData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, price_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, price_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, price_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, prizelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, freetime_),
  };
  LotteryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryData_descriptor_,
      LotteryData::default_instance_,
      LotteryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryData));
  LotteryRequest_descriptor_ = file->message_type(1);
  static const int LotteryRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRequest, lotttype_),
  };
  LotteryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryRequest_descriptor_,
      LotteryRequest::default_instance_,
      LotteryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryRequest));
  LotteryResponse_descriptor_ = file->message_type(2);
  static const int LotteryResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResponse, prizelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResponse, price_),
  };
  LotteryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryResponse_descriptor_,
      LotteryResponse::default_instance_,
      LotteryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryResponse));
  Lottery_descriptor_ = file->message_type(3);
  static const int Lottery_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, herotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, color_),
  };
  Lottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lottery_descriptor_,
      Lottery::default_instance_,
      Lottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lottery));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lottery_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryData_descriptor_, &LotteryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryRequest_descriptor_, &LotteryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryResponse_descriptor_, &LotteryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lottery_descriptor_, &Lottery::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lottery_5fprotocol_2eproto() {
  delete LotteryData::default_instance_;
  delete LotteryData_reflection_;
  delete LotteryRequest::default_instance_;
  delete LotteryRequest_reflection_;
  delete LotteryResponse::default_instance_;
  delete LotteryResponse_reflection_;
  delete Lottery::default_instance_;
  delete Lottery_reflection_;
}

void protobuf_AddDesc_lottery_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026lottery_protocol.proto\022\006protos\"v\n\013Lott"
    "eryData\022\017\n\007price_1\030\001 \002(\005\022\017\n\007price_2\030\002 \002("
    "\005\022\017\n\007price_3\030\003 \002(\005\022\"\n\tprizeList\030\004 \003(\0132\017."
    "protos.Lottery\022\020\n\010freeTime\030\005 \001(\006\"\"\n\016Lott"
    "eryRequest\022\020\n\010lottType\030\001 \002(\005\"T\n\017LotteryR"
    "esponse\022\016\n\006result\030\001 \002(\005\022\"\n\tprizeList\030\002 \003"
    "(\0132\017.protos.Lottery\022\r\n\005price\030\003 \001(\005\"\216\001\n\007L"
    "ottery\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\007 \001(\t\022\017\n\007qual"
    "ity\030\002 \002(\005\022\r\n\005thumb\030\003 \002(\005\022\014\n\004type\030\004 \001(\005\022\r"
    "\n\005isnew\030\005 \001(\010\022\020\n\010heroType\030\006 \001(\005\022\013\n\003num\030\010"
    " \001(\005\022\r\n\005color\030\t \001(\005B3\n\036anvin.server.game"
    "server.protosB\017LotteryProtocolH\001", 472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lottery_protocol.proto", &protobuf_RegisterTypes);
  LotteryData::default_instance_ = new LotteryData();
  LotteryRequest::default_instance_ = new LotteryRequest();
  LotteryResponse::default_instance_ = new LotteryResponse();
  Lottery::default_instance_ = new Lottery();
  LotteryData::default_instance_->InitAsDefaultInstance();
  LotteryRequest::default_instance_->InitAsDefaultInstance();
  LotteryResponse::default_instance_->InitAsDefaultInstance();
  Lottery::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lottery_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lottery_5fprotocol_2eproto {
  StaticDescriptorInitializer_lottery_5fprotocol_2eproto() {
    protobuf_AddDesc_lottery_5fprotocol_2eproto();
  }
} static_descriptor_initializer_lottery_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LotteryData::kPrice1FieldNumber;
const int LotteryData::kPrice2FieldNumber;
const int LotteryData::kPrice3FieldNumber;
const int LotteryData::kPrizeListFieldNumber;
const int LotteryData::kFreeTimeFieldNumber;
#endif  // !_MSC_VER

LotteryData::LotteryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LotteryData::InitAsDefaultInstance() {
}

LotteryData::LotteryData(const LotteryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LotteryData::SharedCtor() {
  _cached_size_ = 0;
  price_1_ = 0;
  price_2_ = 0;
  price_3_ = 0;
  freetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryData::~LotteryData() {
  SharedDtor();
}

void LotteryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryData_descriptor_;
}

const LotteryData& LotteryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lottery_5fprotocol_2eproto();
  return *default_instance_;
}

LotteryData* LotteryData::default_instance_ = NULL;

LotteryData* LotteryData::New() const {
  return new LotteryData;
}

void LotteryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_1_ = 0;
    price_2_ = 0;
    price_3_ = 0;
    freetime_ = GOOGLE_ULONGLONG(0);
  }
  prizelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 price_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_1_)));
          set_has_price_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price_2;
        break;
      }

      // required int32 price_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_2_)));
          set_has_price_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_3;
        break;
      }

      // required int32 price_3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_3_)));
          set_has_price_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prizeList;
        break;
      }

      // repeated .protos.Lottery prizeList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prizeList;
        if (input->ExpectTag(41)) goto parse_freeTime;
        break;
      }

      // optional fixed64 freeTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_freeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &freetime_)));
          set_has_freetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LotteryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 price_1 = 1;
  if (has_price_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->price_1(), output);
  }

  // required int32 price_2 = 2;
  if (has_price_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_2(), output);
  }

  // required int32 price_3 = 3;
  if (has_price_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_3(), output);
  }

  // repeated .protos.Lottery prizeList = 4;
  for (int i = 0; i < this->prizelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prizelist(i), output);
  }

  // optional fixed64 freeTime = 5;
  if (has_freetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->freetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LotteryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 price_1 = 1;
  if (has_price_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->price_1(), target);
  }

  // required int32 price_2 = 2;
  if (has_price_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_2(), target);
  }

  // required int32 price_3 = 3;
  if (has_price_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_3(), target);
  }

  // repeated .protos.Lottery prizeList = 4;
  for (int i = 0; i < this->prizelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prizelist(i), target);
  }

  // optional fixed64 freeTime = 5;
  if (has_freetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->freetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LotteryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 price_1 = 1;
    if (has_price_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_1());
    }

    // required int32 price_2 = 2;
    if (has_price_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_2());
    }

    // required int32 price_3 = 3;
    if (has_price_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_3());
    }

    // optional fixed64 freeTime = 5;
    if (has_freetime()) {
      total_size += 1 + 8;
    }

  }
  // repeated .protos.Lottery prizeList = 4;
  total_size += 1 * this->prizelist_size();
  for (int i = 0; i < this->prizelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryData::MergeFrom(const LotteryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizelist_.MergeFrom(from.prizelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price_1()) {
      set_price_1(from.price_1());
    }
    if (from.has_price_2()) {
      set_price_2(from.price_2());
    }
    if (from.has_price_3()) {
      set_price_3(from.price_3());
    }
    if (from.has_freetime()) {
      set_freetime(from.freetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryData::CopyFrom(const LotteryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < prizelist_size(); i++) {
    if (!this->prizelist(i).IsInitialized()) return false;
  }
  return true;
}

void LotteryData::Swap(LotteryData* other) {
  if (other != this) {
    std::swap(price_1_, other->price_1_);
    std::swap(price_2_, other->price_2_);
    std::swap(price_3_, other->price_3_);
    prizelist_.Swap(&other->prizelist_);
    std::swap(freetime_, other->freetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryData_descriptor_;
  metadata.reflection = LotteryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryRequest::kLottTypeFieldNumber;
#endif  // !_MSC_VER

LotteryRequest::LotteryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LotteryRequest::InitAsDefaultInstance() {
}

LotteryRequest::LotteryRequest(const LotteryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LotteryRequest::SharedCtor() {
  _cached_size_ = 0;
  lotttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryRequest::~LotteryRequest() {
  SharedDtor();
}

void LotteryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryRequest_descriptor_;
}

const LotteryRequest& LotteryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lottery_5fprotocol_2eproto();
  return *default_instance_;
}

LotteryRequest* LotteryRequest::default_instance_ = NULL;

LotteryRequest* LotteryRequest::New() const {
  return new LotteryRequest;
}

void LotteryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lotttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lottType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotttype_)));
          set_has_lotttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LotteryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lottType = 1;
  if (has_lotttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lotttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LotteryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lottType = 1;
  if (has_lotttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lotttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LotteryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lottType = 1;
    if (has_lotttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lotttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryRequest::MergeFrom(const LotteryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lotttype()) {
      set_lotttype(from.lotttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryRequest::CopyFrom(const LotteryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LotteryRequest::Swap(LotteryRequest* other) {
  if (other != this) {
    std::swap(lotttype_, other->lotttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryRequest_descriptor_;
  metadata.reflection = LotteryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryResponse::kResultFieldNumber;
const int LotteryResponse::kPrizeListFieldNumber;
const int LotteryResponse::kPriceFieldNumber;
#endif  // !_MSC_VER

LotteryResponse::LotteryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LotteryResponse::InitAsDefaultInstance() {
}

LotteryResponse::LotteryResponse(const LotteryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LotteryResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryResponse::~LotteryResponse() {
  SharedDtor();
}

void LotteryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryResponse_descriptor_;
}

const LotteryResponse& LotteryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lottery_5fprotocol_2eproto();
  return *default_instance_;
}

LotteryResponse* LotteryResponse::default_instance_ = NULL;

LotteryResponse* LotteryResponse::New() const {
  return new LotteryResponse;
}

void LotteryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    price_ = 0;
  }
  prizelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizeList;
        break;
      }

      // repeated .protos.Lottery prizeList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizeList;
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LotteryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .protos.Lottery prizeList = 2;
  for (int i = 0; i < this->prizelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prizelist(i), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LotteryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .protos.Lottery prizeList = 2;
  for (int i = 0; i < this->prizelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prizelist(i), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LotteryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  // repeated .protos.Lottery prizeList = 2;
  total_size += 1 * this->prizelist_size();
  for (int i = 0; i < this->prizelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryResponse::MergeFrom(const LotteryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizelist_.MergeFrom(from.prizelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryResponse::CopyFrom(const LotteryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < prizelist_size(); i++) {
    if (!this->prizelist(i).IsInitialized()) return false;
  }
  return true;
}

void LotteryResponse::Swap(LotteryResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    prizelist_.Swap(&other->prizelist_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryResponse_descriptor_;
  metadata.reflection = LotteryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lottery::kIdFieldNumber;
const int Lottery::kNameFieldNumber;
const int Lottery::kQualityFieldNumber;
const int Lottery::kThumbFieldNumber;
const int Lottery::kTypeFieldNumber;
const int Lottery::kIsnewFieldNumber;
const int Lottery::kHeroTypeFieldNumber;
const int Lottery::kNumFieldNumber;
const int Lottery::kColorFieldNumber;
#endif  // !_MSC_VER

Lottery::Lottery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lottery::InitAsDefaultInstance() {
}

Lottery::Lottery(const Lottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lottery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  thumb_ = 0;
  type_ = 0;
  isnew_ = false;
  herotype_ = 0;
  num_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lottery::~Lottery() {
  SharedDtor();
}

void Lottery::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Lottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lottery_descriptor_;
}

const Lottery& Lottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lottery_5fprotocol_2eproto();
  return *default_instance_;
}

Lottery* Lottery::default_instance_ = NULL;

Lottery* Lottery::New() const {
  return new Lottery;
}

void Lottery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    thumb_ = 0;
    type_ = 0;
    isnew_ = false;
    herotype_ = 0;
    num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // required int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_thumb;
        break;
      }

      // required int32 thumb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumb_)));
          set_has_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isnew;
        break;
      }

      // optional bool isnew = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isnew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heroType;
        break;
      }

      // optional int32 heroType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herotype_)));
          set_has_herotype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num;
        break;
      }

      // optional int32 num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_color;
        break;
      }

      // optional int32 color = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // required int32 thumb = 3;
  if (has_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->thumb(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional bool isnew = 5;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isnew(), output);
  }

  // optional int32 heroType = 6;
  if (has_herotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->herotype(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional int32 num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num(), output);
  }

  // optional int32 color = 9;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // required int32 thumb = 3;
  if (has_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->thumb(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional bool isnew = 5;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isnew(), target);
  }

  // optional int32 heroType = 6;
  if (has_herotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->herotype(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional int32 num = 8;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num(), target);
  }

  // optional int32 color = 9;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 thumb = 3;
    if (has_thumb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thumb());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool isnew = 5;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // optional int32 heroType = 6;
    if (has_herotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herotype());
    }

    // optional int32 num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 color = 9;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lottery::MergeFrom(const Lottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_thumb()) {
      set_thumb(from.thumb());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_herotype()) {
      set_herotype(from.herotype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lottery::CopyFrom(const Lottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void Lottery::Swap(Lottery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(thumb_, other->thumb_);
    std::swap(type_, other->type_);
    std::swap(isnew_, other->isnew_);
    std::swap(herotype_, other->herotype_);
    std::swap(num_, other->num_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lottery_descriptor_;
  metadata.reflection = Lottery_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
