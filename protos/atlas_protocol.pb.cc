// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atlas_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "atlas_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* AtlasRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AtlasRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AtlasResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AtlasResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AtlasPrizeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AtlasPrizeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AtlasPrizeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AtlasPrizeRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AtlasIns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AtlasIns_reflection_ = NULL;
const ::google::protobuf::Descriptor* AData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_atlas_5fprotocol_2eproto() {
  protobuf_AddDesc_atlas_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "atlas_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  AtlasRequest_descriptor_ = file->message_type(0);
  static const int AtlasRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasRequest, atlas_type_),
  };
  AtlasRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AtlasRequest_descriptor_,
      AtlasRequest::default_instance_,
      AtlasRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AtlasRequest));
  AtlasResponse_descriptor_ = file->message_type(1);
  static const int AtlasResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasResponse, atlas_list_),
  };
  AtlasResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AtlasResponse_descriptor_,
      AtlasResponse::default_instance_,
      AtlasResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AtlasResponse));
  AtlasPrizeReq_descriptor_ = file->message_type(2);
  static const int AtlasPrizeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasPrizeReq, atlas_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasPrizeReq, atlas_id_),
  };
  AtlasPrizeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AtlasPrizeReq_descriptor_,
      AtlasPrizeReq::default_instance_,
      AtlasPrizeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasPrizeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasPrizeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AtlasPrizeReq));
  AtlasPrizeRes_descriptor_ = file->message_type(3);
  static const int AtlasPrizeRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasPrizeRes, result_),
  };
  AtlasPrizeRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AtlasPrizeRes_descriptor_,
      AtlasPrizeRes::default_instance_,
      AtlasPrizeRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasPrizeRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasPrizeRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AtlasPrizeRes));
  AtlasIns_descriptor_ = file->message_type(4);
  static const int AtlasIns_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, prizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, get_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, pro_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, pro_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, pro_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, pro_dex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, pro_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, pro_crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, pro_renew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, pro_dodge_),
  };
  AtlasIns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AtlasIns_descriptor_,
      AtlasIns::default_instance_,
      AtlasIns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasIns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AtlasIns));
  AData_descriptor_ = file->message_type(5);
  static const int AData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AData, thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AData, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AData, max_process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AData, param_),
  };
  AData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AData_descriptor_,
      AData::default_instance_,
      AData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_atlas_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AtlasRequest_descriptor_, &AtlasRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AtlasResponse_descriptor_, &AtlasResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AtlasPrizeReq_descriptor_, &AtlasPrizeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AtlasPrizeRes_descriptor_, &AtlasPrizeRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AtlasIns_descriptor_, &AtlasIns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AData_descriptor_, &AData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_atlas_5fprotocol_2eproto() {
  delete AtlasRequest::default_instance_;
  delete AtlasRequest_reflection_;
  delete AtlasResponse::default_instance_;
  delete AtlasResponse_reflection_;
  delete AtlasPrizeReq::default_instance_;
  delete AtlasPrizeReq_reflection_;
  delete AtlasPrizeRes::default_instance_;
  delete AtlasPrizeRes_reflection_;
  delete AtlasIns::default_instance_;
  delete AtlasIns_reflection_;
  delete AData::default_instance_;
  delete AData_reflection_;
}

void protobuf_AddDesc_atlas_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024atlas_protocol.proto\022\006protos\032\031common/p"
    "rize_common.proto\"\"\n\014AtlasRequest\022\022\n\natl"
    "as_type\030\001 \002(\005\"5\n\rAtlasResponse\022$\n\natlas_"
    "list\030\001 \003(\0132\020.protos.AtlasIns\"5\n\rAtlasPri"
    "zeReq\022\022\n\natlas_type\030\001 \002(\005\022\020\n\010atlas_id\030\002 "
    "\002(\005\"\037\n\rAtlasPrizeRes\022\016\n\006result\030\001 \002(\005\"\361\001\n"
    "\010AtlasIns\022 \n\tdata_list\030\001 \003(\0132\r.protos.AD"
    "ata\022$\n\006prizes\030\002 \003(\0132\024.protos.common.Priz"
    "e\022\021\n\tget_prize\030\003 \001(\005\022\016\n\006pro_hp\030\004 \001(\005\022\017\n\007"
    "pro_atk\030\005 \001(\005\022\017\n\007pro_def\030\006 \001(\005\022\017\n\007pro_de"
    "x\030\007 \001(\005\022\017\n\007pro_hit\030\010 \001(\005\022\020\n\010pro_crit\030\t \001"
    "(\005\022\021\n\tpro_renew\030\n \001(\005\022\021\n\tpro_dodge\030\013 \001(\005"
    "\"h\n\005AData\022\014\n\004type\030\001 \001(\005\022\r\n\005thumb\030\002 \001(\005\022\r"
    "\n\005color\030\003 \001(\005\022\017\n\007process\030\004 \001(\005\022\023\n\013max_pr"
    "ocess\030\005 \001(\005\022\r\n\005param\030\006 \001(\005B0\n\035dass.serve"
    "r.gameserver.protosB\rAtlasProtocolH\001", 636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "atlas_protocol.proto", &protobuf_RegisterTypes);
  AtlasRequest::default_instance_ = new AtlasRequest();
  AtlasResponse::default_instance_ = new AtlasResponse();
  AtlasPrizeReq::default_instance_ = new AtlasPrizeReq();
  AtlasPrizeRes::default_instance_ = new AtlasPrizeRes();
  AtlasIns::default_instance_ = new AtlasIns();
  AData::default_instance_ = new AData();
  AtlasRequest::default_instance_->InitAsDefaultInstance();
  AtlasResponse::default_instance_->InitAsDefaultInstance();
  AtlasPrizeReq::default_instance_->InitAsDefaultInstance();
  AtlasPrizeRes::default_instance_->InitAsDefaultInstance();
  AtlasIns::default_instance_->InitAsDefaultInstance();
  AData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_atlas_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_atlas_5fprotocol_2eproto {
  StaticDescriptorInitializer_atlas_5fprotocol_2eproto() {
    protobuf_AddDesc_atlas_5fprotocol_2eproto();
  }
} static_descriptor_initializer_atlas_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AtlasRequest::kAtlasTypeFieldNumber;
#endif  // !_MSC_VER

AtlasRequest::AtlasRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AtlasRequest::InitAsDefaultInstance() {
}

AtlasRequest::AtlasRequest(const AtlasRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AtlasRequest::SharedCtor() {
  _cached_size_ = 0;
  atlas_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtlasRequest::~AtlasRequest() {
  SharedDtor();
}

void AtlasRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AtlasRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AtlasRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtlasRequest_descriptor_;
}

const AtlasRequest& AtlasRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_5fprotocol_2eproto();
  return *default_instance_;
}

AtlasRequest* AtlasRequest::default_instance_ = NULL;

AtlasRequest* AtlasRequest::New() const {
  return new AtlasRequest;
}

void AtlasRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atlas_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AtlasRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 atlas_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atlas_type_)));
          set_has_atlas_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AtlasRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 atlas_type = 1;
  if (has_atlas_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->atlas_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AtlasRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 atlas_type = 1;
  if (has_atlas_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->atlas_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AtlasRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 atlas_type = 1;
    if (has_atlas_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atlas_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtlasRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AtlasRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AtlasRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AtlasRequest::MergeFrom(const AtlasRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atlas_type()) {
      set_atlas_type(from.atlas_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AtlasRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtlasRequest::CopyFrom(const AtlasRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtlasRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AtlasRequest::Swap(AtlasRequest* other) {
  if (other != this) {
    std::swap(atlas_type_, other->atlas_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AtlasRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AtlasRequest_descriptor_;
  metadata.reflection = AtlasRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AtlasResponse::kAtlasListFieldNumber;
#endif  // !_MSC_VER

AtlasResponse::AtlasResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AtlasResponse::InitAsDefaultInstance() {
}

AtlasResponse::AtlasResponse(const AtlasResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AtlasResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtlasResponse::~AtlasResponse() {
  SharedDtor();
}

void AtlasResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AtlasResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AtlasResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtlasResponse_descriptor_;
}

const AtlasResponse& AtlasResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_5fprotocol_2eproto();
  return *default_instance_;
}

AtlasResponse* AtlasResponse::default_instance_ = NULL;

AtlasResponse* AtlasResponse::New() const {
  return new AtlasResponse;
}

void AtlasResponse::Clear() {
  atlas_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AtlasResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.AtlasIns atlas_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atlas_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atlas_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_atlas_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AtlasResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.AtlasIns atlas_list = 1;
  for (int i = 0; i < this->atlas_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atlas_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AtlasResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.AtlasIns atlas_list = 1;
  for (int i = 0; i < this->atlas_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atlas_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AtlasResponse::ByteSize() const {
  int total_size = 0;

  // repeated .protos.AtlasIns atlas_list = 1;
  total_size += 1 * this->atlas_list_size();
  for (int i = 0; i < this->atlas_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atlas_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtlasResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AtlasResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AtlasResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AtlasResponse::MergeFrom(const AtlasResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  atlas_list_.MergeFrom(from.atlas_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AtlasResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtlasResponse::CopyFrom(const AtlasResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtlasResponse::IsInitialized() const {

  return true;
}

void AtlasResponse::Swap(AtlasResponse* other) {
  if (other != this) {
    atlas_list_.Swap(&other->atlas_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AtlasResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AtlasResponse_descriptor_;
  metadata.reflection = AtlasResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AtlasPrizeReq::kAtlasTypeFieldNumber;
const int AtlasPrizeReq::kAtlasIdFieldNumber;
#endif  // !_MSC_VER

AtlasPrizeReq::AtlasPrizeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AtlasPrizeReq::InitAsDefaultInstance() {
}

AtlasPrizeReq::AtlasPrizeReq(const AtlasPrizeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AtlasPrizeReq::SharedCtor() {
  _cached_size_ = 0;
  atlas_type_ = 0;
  atlas_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtlasPrizeReq::~AtlasPrizeReq() {
  SharedDtor();
}

void AtlasPrizeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AtlasPrizeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AtlasPrizeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtlasPrizeReq_descriptor_;
}

const AtlasPrizeReq& AtlasPrizeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_5fprotocol_2eproto();
  return *default_instance_;
}

AtlasPrizeReq* AtlasPrizeReq::default_instance_ = NULL;

AtlasPrizeReq* AtlasPrizeReq::New() const {
  return new AtlasPrizeReq;
}

void AtlasPrizeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atlas_type_ = 0;
    atlas_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AtlasPrizeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 atlas_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atlas_type_)));
          set_has_atlas_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atlas_id;
        break;
      }

      // required int32 atlas_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atlas_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atlas_id_)));
          set_has_atlas_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AtlasPrizeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 atlas_type = 1;
  if (has_atlas_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->atlas_type(), output);
  }

  // required int32 atlas_id = 2;
  if (has_atlas_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atlas_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AtlasPrizeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 atlas_type = 1;
  if (has_atlas_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->atlas_type(), target);
  }

  // required int32 atlas_id = 2;
  if (has_atlas_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atlas_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AtlasPrizeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 atlas_type = 1;
    if (has_atlas_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atlas_type());
    }

    // required int32 atlas_id = 2;
    if (has_atlas_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atlas_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtlasPrizeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AtlasPrizeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AtlasPrizeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AtlasPrizeReq::MergeFrom(const AtlasPrizeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atlas_type()) {
      set_atlas_type(from.atlas_type());
    }
    if (from.has_atlas_id()) {
      set_atlas_id(from.atlas_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AtlasPrizeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtlasPrizeReq::CopyFrom(const AtlasPrizeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtlasPrizeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AtlasPrizeReq::Swap(AtlasPrizeReq* other) {
  if (other != this) {
    std::swap(atlas_type_, other->atlas_type_);
    std::swap(atlas_id_, other->atlas_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AtlasPrizeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AtlasPrizeReq_descriptor_;
  metadata.reflection = AtlasPrizeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AtlasPrizeRes::kResultFieldNumber;
#endif  // !_MSC_VER

AtlasPrizeRes::AtlasPrizeRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AtlasPrizeRes::InitAsDefaultInstance() {
}

AtlasPrizeRes::AtlasPrizeRes(const AtlasPrizeRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AtlasPrizeRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtlasPrizeRes::~AtlasPrizeRes() {
  SharedDtor();
}

void AtlasPrizeRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AtlasPrizeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AtlasPrizeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtlasPrizeRes_descriptor_;
}

const AtlasPrizeRes& AtlasPrizeRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_5fprotocol_2eproto();
  return *default_instance_;
}

AtlasPrizeRes* AtlasPrizeRes::default_instance_ = NULL;

AtlasPrizeRes* AtlasPrizeRes::New() const {
  return new AtlasPrizeRes;
}

void AtlasPrizeRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AtlasPrizeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AtlasPrizeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AtlasPrizeRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AtlasPrizeRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtlasPrizeRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AtlasPrizeRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AtlasPrizeRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AtlasPrizeRes::MergeFrom(const AtlasPrizeRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AtlasPrizeRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtlasPrizeRes::CopyFrom(const AtlasPrizeRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtlasPrizeRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AtlasPrizeRes::Swap(AtlasPrizeRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AtlasPrizeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AtlasPrizeRes_descriptor_;
  metadata.reflection = AtlasPrizeRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AtlasIns::kDataListFieldNumber;
const int AtlasIns::kPrizesFieldNumber;
const int AtlasIns::kGetPrizeFieldNumber;
const int AtlasIns::kProHpFieldNumber;
const int AtlasIns::kProAtkFieldNumber;
const int AtlasIns::kProDefFieldNumber;
const int AtlasIns::kProDexFieldNumber;
const int AtlasIns::kProHitFieldNumber;
const int AtlasIns::kProCritFieldNumber;
const int AtlasIns::kProRenewFieldNumber;
const int AtlasIns::kProDodgeFieldNumber;
#endif  // !_MSC_VER

AtlasIns::AtlasIns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AtlasIns::InitAsDefaultInstance() {
}

AtlasIns::AtlasIns(const AtlasIns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AtlasIns::SharedCtor() {
  _cached_size_ = 0;
  get_prize_ = 0;
  pro_hp_ = 0;
  pro_atk_ = 0;
  pro_def_ = 0;
  pro_dex_ = 0;
  pro_hit_ = 0;
  pro_crit_ = 0;
  pro_renew_ = 0;
  pro_dodge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtlasIns::~AtlasIns() {
  SharedDtor();
}

void AtlasIns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AtlasIns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AtlasIns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtlasIns_descriptor_;
}

const AtlasIns& AtlasIns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_5fprotocol_2eproto();
  return *default_instance_;
}

AtlasIns* AtlasIns::default_instance_ = NULL;

AtlasIns* AtlasIns::New() const {
  return new AtlasIns;
}

void AtlasIns::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    get_prize_ = 0;
    pro_hp_ = 0;
    pro_atk_ = 0;
    pro_def_ = 0;
    pro_dex_ = 0;
    pro_hit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pro_crit_ = 0;
    pro_renew_ = 0;
    pro_dodge_ = 0;
  }
  data_list_.Clear();
  prizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AtlasIns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.AData data_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_list;
        if (input->ExpectTag(18)) goto parse_prizes;
        break;
      }

      // repeated .protos.common.Prize prizes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizes;
        if (input->ExpectTag(24)) goto parse_get_prize;
        break;
      }

      // optional int32 get_prize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_prize_)));
          set_has_get_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pro_hp;
        break;
      }

      // optional int32 pro_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_hp_)));
          set_has_pro_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pro_atk;
        break;
      }

      // optional int32 pro_atk = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_atk_)));
          set_has_pro_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pro_def;
        break;
      }

      // optional int32 pro_def = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_def_)));
          set_has_pro_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pro_dex;
        break;
      }

      // optional int32 pro_dex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_dex_)));
          set_has_pro_dex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pro_hit;
        break;
      }

      // optional int32 pro_hit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_hit_)));
          set_has_pro_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pro_crit;
        break;
      }

      // optional int32 pro_crit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_crit_)));
          set_has_pro_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pro_renew;
        break;
      }

      // optional int32 pro_renew = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_renew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_renew_)));
          set_has_pro_renew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pro_dodge;
        break;
      }

      // optional int32 pro_dodge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_dodge_)));
          set_has_pro_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AtlasIns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.AData data_list = 1;
  for (int i = 0; i < this->data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_list(i), output);
  }

  // repeated .protos.common.Prize prizes = 2;
  for (int i = 0; i < this->prizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prizes(i), output);
  }

  // optional int32 get_prize = 3;
  if (has_get_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->get_prize(), output);
  }

  // optional int32 pro_hp = 4;
  if (has_pro_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pro_hp(), output);
  }

  // optional int32 pro_atk = 5;
  if (has_pro_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pro_atk(), output);
  }

  // optional int32 pro_def = 6;
  if (has_pro_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pro_def(), output);
  }

  // optional int32 pro_dex = 7;
  if (has_pro_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pro_dex(), output);
  }

  // optional int32 pro_hit = 8;
  if (has_pro_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pro_hit(), output);
  }

  // optional int32 pro_crit = 9;
  if (has_pro_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pro_crit(), output);
  }

  // optional int32 pro_renew = 10;
  if (has_pro_renew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pro_renew(), output);
  }

  // optional int32 pro_dodge = 11;
  if (has_pro_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pro_dodge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AtlasIns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.AData data_list = 1;
  for (int i = 0; i < this->data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_list(i), target);
  }

  // repeated .protos.common.Prize prizes = 2;
  for (int i = 0; i < this->prizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prizes(i), target);
  }

  // optional int32 get_prize = 3;
  if (has_get_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->get_prize(), target);
  }

  // optional int32 pro_hp = 4;
  if (has_pro_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pro_hp(), target);
  }

  // optional int32 pro_atk = 5;
  if (has_pro_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pro_atk(), target);
  }

  // optional int32 pro_def = 6;
  if (has_pro_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pro_def(), target);
  }

  // optional int32 pro_dex = 7;
  if (has_pro_dex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pro_dex(), target);
  }

  // optional int32 pro_hit = 8;
  if (has_pro_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pro_hit(), target);
  }

  // optional int32 pro_crit = 9;
  if (has_pro_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pro_crit(), target);
  }

  // optional int32 pro_renew = 10;
  if (has_pro_renew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pro_renew(), target);
  }

  // optional int32 pro_dodge = 11;
  if (has_pro_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pro_dodge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AtlasIns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 get_prize = 3;
    if (has_get_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_prize());
    }

    // optional int32 pro_hp = 4;
    if (has_pro_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_hp());
    }

    // optional int32 pro_atk = 5;
    if (has_pro_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_atk());
    }

    // optional int32 pro_def = 6;
    if (has_pro_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_def());
    }

    // optional int32 pro_dex = 7;
    if (has_pro_dex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_dex());
    }

    // optional int32 pro_hit = 8;
    if (has_pro_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_hit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pro_crit = 9;
    if (has_pro_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_crit());
    }

    // optional int32 pro_renew = 10;
    if (has_pro_renew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_renew());
    }

    // optional int32 pro_dodge = 11;
    if (has_pro_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_dodge());
    }

  }
  // repeated .protos.AData data_list = 1;
  total_size += 1 * this->data_list_size();
  for (int i = 0; i < this->data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_list(i));
  }

  // repeated .protos.common.Prize prizes = 2;
  total_size += 1 * this->prizes_size();
  for (int i = 0; i < this->prizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtlasIns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AtlasIns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AtlasIns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AtlasIns::MergeFrom(const AtlasIns& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_list_.MergeFrom(from.data_list_);
  prizes_.MergeFrom(from.prizes_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_get_prize()) {
      set_get_prize(from.get_prize());
    }
    if (from.has_pro_hp()) {
      set_pro_hp(from.pro_hp());
    }
    if (from.has_pro_atk()) {
      set_pro_atk(from.pro_atk());
    }
    if (from.has_pro_def()) {
      set_pro_def(from.pro_def());
    }
    if (from.has_pro_dex()) {
      set_pro_dex(from.pro_dex());
    }
    if (from.has_pro_hit()) {
      set_pro_hit(from.pro_hit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pro_crit()) {
      set_pro_crit(from.pro_crit());
    }
    if (from.has_pro_renew()) {
      set_pro_renew(from.pro_renew());
    }
    if (from.has_pro_dodge()) {
      set_pro_dodge(from.pro_dodge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AtlasIns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtlasIns::CopyFrom(const AtlasIns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtlasIns::IsInitialized() const {

  return true;
}

void AtlasIns::Swap(AtlasIns* other) {
  if (other != this) {
    data_list_.Swap(&other->data_list_);
    prizes_.Swap(&other->prizes_);
    std::swap(get_prize_, other->get_prize_);
    std::swap(pro_hp_, other->pro_hp_);
    std::swap(pro_atk_, other->pro_atk_);
    std::swap(pro_def_, other->pro_def_);
    std::swap(pro_dex_, other->pro_dex_);
    std::swap(pro_hit_, other->pro_hit_);
    std::swap(pro_crit_, other->pro_crit_);
    std::swap(pro_renew_, other->pro_renew_);
    std::swap(pro_dodge_, other->pro_dodge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AtlasIns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AtlasIns_descriptor_;
  metadata.reflection = AtlasIns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AData::kTypeFieldNumber;
const int AData::kThumbFieldNumber;
const int AData::kColorFieldNumber;
const int AData::kProcessFieldNumber;
const int AData::kMaxProcessFieldNumber;
const int AData::kParamFieldNumber;
#endif  // !_MSC_VER

AData::AData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AData::InitAsDefaultInstance() {
}

AData::AData(const AData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  thumb_ = 0;
  color_ = 0;
  process_ = 0;
  max_process_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AData::~AData() {
  SharedDtor();
}

void AData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AData_descriptor_;
}

const AData& AData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_atlas_5fprotocol_2eproto();
  return *default_instance_;
}

AData* AData::default_instance_ = NULL;

AData* AData::New() const {
  return new AData;
}

void AData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    thumb_ = 0;
    color_ = 0;
    process_ = 0;
    max_process_ = 0;
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thumb;
        break;
      }

      // optional int32 thumb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumb_)));
          set_has_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional int32 color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_process;
        break;
      }

      // optional int32 process = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_process;
        break;
      }

      // optional int32 max_process = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_process_)));
          set_has_max_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param;
        break;
      }

      // optional int32 param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 thumb = 2;
  if (has_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thumb(), output);
  }

  // optional int32 color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->color(), output);
  }

  // optional int32 process = 4;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->process(), output);
  }

  // optional int32 max_process = 5;
  if (has_max_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_process(), output);
  }

  // optional int32 param = 6;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 thumb = 2;
  if (has_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thumb(), target);
  }

  // optional int32 color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->color(), target);
  }

  // optional int32 process = 4;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->process(), target);
  }

  // optional int32 max_process = 5;
  if (has_max_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_process(), target);
  }

  // optional int32 param = 6;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 thumb = 2;
    if (has_thumb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thumb());
    }

    // optional int32 color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional int32 process = 4;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process());
    }

    // optional int32 max_process = 5;
    if (has_max_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_process());
    }

    // optional int32 param = 6;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AData::MergeFrom(const AData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_thumb()) {
      set_thumb(from.thumb());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_max_process()) {
      set_max_process(from.max_process());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AData::CopyFrom(const AData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AData::IsInitialized() const {

  return true;
}

void AData::Swap(AData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(thumb_, other->thumb_);
    std::swap(color_, other->color_);
    std::swap(process_, other->process_);
    std::swap(max_process_, other->max_process_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AData_descriptor_;
  metadata.reflection = AData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
