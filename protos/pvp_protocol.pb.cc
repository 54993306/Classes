// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvp_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pvp_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* PvpTeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpTeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpDataRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpDataRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpPrizeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpPrizeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* OppTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OppTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OppTeamRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OppTeamRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* Opponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Opponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpPrize_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pvp_5fprotocol_2eproto() {
  protobuf_AddDesc_pvp_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pvp_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  PvpTeamData_descriptor_ = file->message_type(0);
  static const int PvpTeamData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamData, team_),
  };
  PvpTeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpTeamData_descriptor_,
      PvpTeamData::default_instance_,
      PvpTeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpTeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpTeamData));
  PvpDataReq_descriptor_ = file->message_type(1);
  static const int PvpDataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataReq, refresh_),
  };
  PvpDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpDataReq_descriptor_,
      PvpDataReq::default_instance_,
      PvpDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpDataReq));
  PvpDataRes_descriptor_ = file->message_type(2);
  static const int PvpDataRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataRes, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataRes, now_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataRes, opponents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataRes, prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataRes, cd_time_),
  };
  PvpDataRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpDataRes_descriptor_,
      PvpDataRes::default_instance_,
      PvpDataRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpDataRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpDataRes));
  PvpPrizeList_descriptor_ = file->message_type(3);
  static const int PvpPrizeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPrizeList, prize_list_),
  };
  PvpPrizeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpPrizeList_descriptor_,
      PvpPrizeList::default_instance_,
      PvpPrizeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPrizeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPrizeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpPrizeList));
  OppTeamReq_descriptor_ = file->message_type(4);
  static const int OppTeamReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamReq, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamReq, is_robot_),
  };
  OppTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OppTeamReq_descriptor_,
      OppTeamReq::default_instance_,
      OppTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OppTeamReq));
  OppTeamRes_descriptor_ = file->message_type(5);
  static const int OppTeamRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamRes, captin_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamRes, hero_list_),
  };
  OppTeamRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OppTeamRes_descriptor_,
      OppTeamRes::default_instance_,
      OppTeamRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OppTeamRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OppTeamRes));
  Member_descriptor_ = file->message_type(6);
  static const int Member_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, captin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, index_),
  };
  Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Member_descriptor_,
      Member::default_instance_,
      Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Member));
  Opponent_descriptor_ = file->message_type(7);
  static const int Opponent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, role_thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, role_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, hero_thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, fb_id_),
  };
  Opponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Opponent_descriptor_,
      Opponent::default_instance_,
      Opponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Opponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Opponent));
  PvpPrize_descriptor_ = file->message_type(8);
  static const int PvpPrize_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPrize, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPrize, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPrize, prizes_),
  };
  PvpPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpPrize_descriptor_,
      PvpPrize::default_instance_,
      PvpPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpPrize));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pvp_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpTeamData_descriptor_, &PvpTeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpDataReq_descriptor_, &PvpDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpDataRes_descriptor_, &PvpDataRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpPrizeList_descriptor_, &PvpPrizeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OppTeamReq_descriptor_, &OppTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OppTeamRes_descriptor_, &OppTeamRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Member_descriptor_, &Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Opponent_descriptor_, &Opponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpPrize_descriptor_, &PvpPrize::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pvp_5fprotocol_2eproto() {
  delete PvpTeamData::default_instance_;
  delete PvpTeamData_reflection_;
  delete PvpDataReq::default_instance_;
  delete PvpDataReq_reflection_;
  delete PvpDataRes::default_instance_;
  delete PvpDataRes_reflection_;
  delete PvpPrizeList::default_instance_;
  delete PvpPrizeList_reflection_;
  delete OppTeamReq::default_instance_;
  delete OppTeamReq_reflection_;
  delete OppTeamRes::default_instance_;
  delete OppTeamRes_reflection_;
  delete Member::default_instance_;
  delete Member_reflection_;
  delete Opponent::default_instance_;
  delete Opponent_reflection_;
  delete PvpPrize::default_instance_;
  delete PvpPrize_reflection_;
}

void protobuf_AddDesc_pvp_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2fhero_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022pvp_protocol.proto\022\006protos\032\031common/pri"
    "ze_common.proto\032\030common/hero_common.prot"
    "o\";\n\013PvpTeamData\022\016\n\006status\030\001 \002(\005\022\034\n\004team"
    "\030\002 \003(\0132\016.protos.Member\"\035\n\nPvpDataReq\022\017\n\007"
    "refresh\030\001 \002(\010\"\207\001\n\nPvpDataRes\022\020\n\010max_time"
    "\030\001 \001(\005\022\020\n\010now_time\030\002 \001(\005\022#\n\topponents\030\003 "
    "\003(\0132\020.protos.Opponent\022\037\n\005prize\030\004 \001(\0132\020.p"
    "rotos.PvpPrize\022\017\n\007cd_time\030\005 \001(\005\"4\n\014PvpPr"
    "izeList\022$\n\nprize_list\030\001 \003(\0132\020.protos.Pvp"
    "Prize\"/\n\nOppTeamReq\022\017\n\007role_id\030\001 \002(\005\022\020\n\010"
    "is_robot\030\002 \002(\010\"]\n\nOppTeamRes\022\016\n\006result\030\001"
    " \002(\005\022\027\n\017captin_skill_id\030\002 \002(\005\022&\n\thero_li"
    "st\030\003 \003(\0132\023.protos.common.Hero\"V\n\006Member\022"
    "\017\n\007hero_id\030\001 \002(\005\022\016\n\006captin\030\002 \002(\010\022\r\n\005pos_"
    "x\030\003 \001(\005\022\r\n\005pos_y\030\004 \001(\005\022\r\n\005index\030\005 \001(\005\"\250\001"
    "\n\010Opponent\022\017\n\007role_id\030\001 \002(\005\022\021\n\trole_name"
    "\030\002 \001(\t\022\022\n\nrole_thumb\030\006 \001(\005\022\017\n\007role_lv\030\003 "
    "\001(\005\022\016\n\006points\030\004 \001(\005\022\016\n\006combat\030\005 \001(\005\022\022\n\nh"
    "ero_thumb\030\007 \001(\005\022\020\n\010is_robot\030\010 \001(\010\022\r\n\005fb_"
    "id\030\t \001(\t\"N\n\010PvpPrize\022\014\n\004rank\030\001 \001(\005\022\016\n\006po"
    "ints\030\002 \001(\005\022$\n\006prizes\030\003 \003(\0132\024.protos.comm"
    "on.PrizeB.\n\035dass.server.gameserver.proto"
    "sB\013PvpProtocolH\001", 896);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pvp_protocol.proto", &protobuf_RegisterTypes);
  PvpTeamData::default_instance_ = new PvpTeamData();
  PvpDataReq::default_instance_ = new PvpDataReq();
  PvpDataRes::default_instance_ = new PvpDataRes();
  PvpPrizeList::default_instance_ = new PvpPrizeList();
  OppTeamReq::default_instance_ = new OppTeamReq();
  OppTeamRes::default_instance_ = new OppTeamRes();
  Member::default_instance_ = new Member();
  Opponent::default_instance_ = new Opponent();
  PvpPrize::default_instance_ = new PvpPrize();
  PvpTeamData::default_instance_->InitAsDefaultInstance();
  PvpDataReq::default_instance_->InitAsDefaultInstance();
  PvpDataRes::default_instance_->InitAsDefaultInstance();
  PvpPrizeList::default_instance_->InitAsDefaultInstance();
  OppTeamReq::default_instance_->InitAsDefaultInstance();
  OppTeamRes::default_instance_->InitAsDefaultInstance();
  Member::default_instance_->InitAsDefaultInstance();
  Opponent::default_instance_->InitAsDefaultInstance();
  PvpPrize::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pvp_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pvp_5fprotocol_2eproto {
  StaticDescriptorInitializer_pvp_5fprotocol_2eproto() {
    protobuf_AddDesc_pvp_5fprotocol_2eproto();
  }
} static_descriptor_initializer_pvp_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PvpTeamData::kStatusFieldNumber;
const int PvpTeamData::kTeamFieldNumber;
#endif  // !_MSC_VER

PvpTeamData::PvpTeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpTeamData::InitAsDefaultInstance() {
}

PvpTeamData::PvpTeamData(const PvpTeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpTeamData::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpTeamData::~PvpTeamData() {
  SharedDtor();
}

void PvpTeamData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpTeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpTeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpTeamData_descriptor_;
}

const PvpTeamData& PvpTeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

PvpTeamData* PvpTeamData::default_instance_ = NULL;

PvpTeamData* PvpTeamData::New() const {
  return new PvpTeamData;
}

void PvpTeamData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  team_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // repeated .protos.Member team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated .protos.Member team = 2;
  for (int i = 0; i < this->team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpTeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated .protos.Member team = 2;
  for (int i = 0; i < this->team_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpTeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .protos.Member team = 2;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpTeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpTeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpTeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpTeamData::MergeFrom(const PvpTeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_.MergeFrom(from.team_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpTeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpTeamData::CopyFrom(const PvpTeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpTeamData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < team_size(); i++) {
    if (!this->team(i).IsInitialized()) return false;
  }
  return true;
}

void PvpTeamData::Swap(PvpTeamData* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    team_.Swap(&other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpTeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpTeamData_descriptor_;
  metadata.reflection = PvpTeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpDataReq::kRefreshFieldNumber;
#endif  // !_MSC_VER

PvpDataReq::PvpDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpDataReq::InitAsDefaultInstance() {
}

PvpDataReq::PvpDataReq(const PvpDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpDataReq::SharedCtor() {
  _cached_size_ = 0;
  refresh_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpDataReq::~PvpDataReq() {
  SharedDtor();
}

void PvpDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpDataReq_descriptor_;
}

const PvpDataReq& PvpDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

PvpDataReq* PvpDataReq::default_instance_ = NULL;

PvpDataReq* PvpDataReq::New() const {
  return new PvpDataReq;
}

void PvpDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refresh_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool refresh = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_)));
          set_has_refresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool refresh = 1;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->refresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool refresh = 1;
  if (has_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->refresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool refresh = 1;
    if (has_refresh()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpDataReq::MergeFrom(const PvpDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh()) {
      set_refresh(from.refresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpDataReq::CopyFrom(const PvpDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PvpDataReq::Swap(PvpDataReq* other) {
  if (other != this) {
    std::swap(refresh_, other->refresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpDataReq_descriptor_;
  metadata.reflection = PvpDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpDataRes::kMaxTimeFieldNumber;
const int PvpDataRes::kNowTimeFieldNumber;
const int PvpDataRes::kOpponentsFieldNumber;
const int PvpDataRes::kPrizeFieldNumber;
const int PvpDataRes::kCdTimeFieldNumber;
#endif  // !_MSC_VER

PvpDataRes::PvpDataRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpDataRes::InitAsDefaultInstance() {
  prize_ = const_cast< ::protos::PvpPrize*>(&::protos::PvpPrize::default_instance());
}

PvpDataRes::PvpDataRes(const PvpDataRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpDataRes::SharedCtor() {
  _cached_size_ = 0;
  max_time_ = 0;
  now_time_ = 0;
  prize_ = NULL;
  cd_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpDataRes::~PvpDataRes() {
  SharedDtor();
}

void PvpDataRes::SharedDtor() {
  if (this != default_instance_) {
    delete prize_;
  }
}

void PvpDataRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpDataRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpDataRes_descriptor_;
}

const PvpDataRes& PvpDataRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

PvpDataRes* PvpDataRes::default_instance_ = NULL;

PvpDataRes* PvpDataRes::New() const {
  return new PvpDataRes;
}

void PvpDataRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_time_ = 0;
    now_time_ = 0;
    if (has_prize()) {
      if (prize_ != NULL) prize_->::protos::PvpPrize::Clear();
    }
    cd_time_ = 0;
  }
  opponents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpDataRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_time_)));
          set_has_max_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_now_time;
        break;
      }

      // optional int32 now_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_time_)));
          set_has_now_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_opponents;
        break;
      }

      // repeated .protos.Opponent opponents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opponents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opponents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_opponents;
        if (input->ExpectTag(34)) goto parse_prize;
        break;
      }

      // optional .protos.PvpPrize prize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpDataRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_time = 1;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_time(), output);
  }

  // optional int32 now_time = 2;
  if (has_now_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->now_time(), output);
  }

  // repeated .protos.Opponent opponents = 3;
  for (int i = 0; i < this->opponents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->opponents(i), output);
  }

  // optional .protos.PvpPrize prize = 4;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prize(), output);
  }

  // optional int32 cd_time = 5;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cd_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpDataRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_time = 1;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_time(), target);
  }

  // optional int32 now_time = 2;
  if (has_now_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->now_time(), target);
  }

  // repeated .protos.Opponent opponents = 3;
  for (int i = 0; i < this->opponents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->opponents(i), target);
  }

  // optional .protos.PvpPrize prize = 4;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prize(), target);
  }

  // optional int32 cd_time = 5;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cd_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpDataRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_time = 1;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_time());
    }

    // optional int32 now_time = 2;
    if (has_now_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_time());
    }

    // optional .protos.PvpPrize prize = 4;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize());
    }

    // optional int32 cd_time = 5;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

  }
  // repeated .protos.Opponent opponents = 3;
  total_size += 1 * this->opponents_size();
  for (int i = 0; i < this->opponents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opponents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpDataRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpDataRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpDataRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpDataRes::MergeFrom(const PvpDataRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponents_.MergeFrom(from.opponents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_time()) {
      set_max_time(from.max_time());
    }
    if (from.has_now_time()) {
      set_now_time(from.now_time());
    }
    if (from.has_prize()) {
      mutable_prize()->::protos::PvpPrize::MergeFrom(from.prize());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpDataRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpDataRes::CopyFrom(const PvpDataRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpDataRes::IsInitialized() const {

  for (int i = 0; i < opponents_size(); i++) {
    if (!this->opponents(i).IsInitialized()) return false;
  }
  return true;
}

void PvpDataRes::Swap(PvpDataRes* other) {
  if (other != this) {
    std::swap(max_time_, other->max_time_);
    std::swap(now_time_, other->now_time_);
    opponents_.Swap(&other->opponents_);
    std::swap(prize_, other->prize_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpDataRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpDataRes_descriptor_;
  metadata.reflection = PvpDataRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpPrizeList::kPrizeListFieldNumber;
#endif  // !_MSC_VER

PvpPrizeList::PvpPrizeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpPrizeList::InitAsDefaultInstance() {
}

PvpPrizeList::PvpPrizeList(const PvpPrizeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpPrizeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpPrizeList::~PvpPrizeList() {
  SharedDtor();
}

void PvpPrizeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpPrizeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpPrizeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpPrizeList_descriptor_;
}

const PvpPrizeList& PvpPrizeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

PvpPrizeList* PvpPrizeList::default_instance_ = NULL;

PvpPrizeList* PvpPrizeList::New() const {
  return new PvpPrizeList;
}

void PvpPrizeList::Clear() {
  prize_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpPrizeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.PvpPrize prize_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prize_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpPrizeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.PvpPrize prize_list = 1;
  for (int i = 0; i < this->prize_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prize_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpPrizeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.PvpPrize prize_list = 1;
  for (int i = 0; i < this->prize_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prize_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpPrizeList::ByteSize() const {
  int total_size = 0;

  // repeated .protos.PvpPrize prize_list = 1;
  total_size += 1 * this->prize_list_size();
  for (int i = 0; i < this->prize_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpPrizeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpPrizeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpPrizeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpPrizeList::MergeFrom(const PvpPrizeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_list_.MergeFrom(from.prize_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpPrizeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpPrizeList::CopyFrom(const PvpPrizeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpPrizeList::IsInitialized() const {

  return true;
}

void PvpPrizeList::Swap(PvpPrizeList* other) {
  if (other != this) {
    prize_list_.Swap(&other->prize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpPrizeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpPrizeList_descriptor_;
  metadata.reflection = PvpPrizeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OppTeamReq::kRoleIdFieldNumber;
const int OppTeamReq::kIsRobotFieldNumber;
#endif  // !_MSC_VER

OppTeamReq::OppTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OppTeamReq::InitAsDefaultInstance() {
}

OppTeamReq::OppTeamReq(const OppTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OppTeamReq::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  is_robot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OppTeamReq::~OppTeamReq() {
  SharedDtor();
}

void OppTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OppTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OppTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OppTeamReq_descriptor_;
}

const OppTeamReq& OppTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

OppTeamReq* OppTeamReq::default_instance_ = NULL;

OppTeamReq* OppTeamReq::New() const {
  return new OppTeamReq;
}

void OppTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    is_robot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OppTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_robot;
        break;
      }

      // required bool is_robot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OppTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }

  // required bool is_robot = 2;
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_robot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OppTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }

  // required bool is_robot = 2;
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_robot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OppTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // required bool is_robot = 2;
    if (has_is_robot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OppTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OppTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OppTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OppTeamReq::MergeFrom(const OppTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OppTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OppTeamReq::CopyFrom(const OppTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OppTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OppTeamReq::Swap(OppTeamReq* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(is_robot_, other->is_robot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OppTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OppTeamReq_descriptor_;
  metadata.reflection = OppTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OppTeamRes::kResultFieldNumber;
const int OppTeamRes::kCaptinSkillIdFieldNumber;
const int OppTeamRes::kHeroListFieldNumber;
#endif  // !_MSC_VER

OppTeamRes::OppTeamRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OppTeamRes::InitAsDefaultInstance() {
}

OppTeamRes::OppTeamRes(const OppTeamRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OppTeamRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  captin_skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OppTeamRes::~OppTeamRes() {
  SharedDtor();
}

void OppTeamRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OppTeamRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OppTeamRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OppTeamRes_descriptor_;
}

const OppTeamRes& OppTeamRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

OppTeamRes* OppTeamRes::default_instance_ = NULL;

OppTeamRes* OppTeamRes::New() const {
  return new OppTeamRes;
}

void OppTeamRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    captin_skill_id_ = 0;
  }
  hero_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OppTeamRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_captin_skill_id;
        break;
      }

      // required int32 captin_skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captin_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &captin_skill_id_)));
          set_has_captin_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_list;
        break;
      }

      // repeated .protos.common.Hero hero_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OppTeamRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 captin_skill_id = 2;
  if (has_captin_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->captin_skill_id(), output);
  }

  // repeated .protos.common.Hero hero_list = 3;
  for (int i = 0; i < this->hero_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OppTeamRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 captin_skill_id = 2;
  if (has_captin_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->captin_skill_id(), target);
  }

  // repeated .protos.common.Hero hero_list = 3;
  for (int i = 0; i < this->hero_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OppTeamRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 captin_skill_id = 2;
    if (has_captin_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->captin_skill_id());
    }

  }
  // repeated .protos.common.Hero hero_list = 3;
  total_size += 1 * this->hero_list_size();
  for (int i = 0; i < this->hero_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OppTeamRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OppTeamRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OppTeamRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OppTeamRes::MergeFrom(const OppTeamRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_list_.MergeFrom(from.hero_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_captin_skill_id()) {
      set_captin_skill_id(from.captin_skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OppTeamRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OppTeamRes::CopyFrom(const OppTeamRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OppTeamRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < hero_list_size(); i++) {
    if (!this->hero_list(i).IsInitialized()) return false;
  }
  return true;
}

void OppTeamRes::Swap(OppTeamRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(captin_skill_id_, other->captin_skill_id_);
    hero_list_.Swap(&other->hero_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OppTeamRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OppTeamRes_descriptor_;
  metadata.reflection = OppTeamRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Member::kHeroIdFieldNumber;
const int Member::kCaptinFieldNumber;
const int Member::kPosXFieldNumber;
const int Member::kPosYFieldNumber;
const int Member::kIndexFieldNumber;
#endif  // !_MSC_VER

Member::Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Member::InitAsDefaultInstance() {
}

Member::Member(const Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Member::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0;
  captin_ = false;
  pos_x_ = 0;
  pos_y_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Member::~Member() {
  SharedDtor();
}

void Member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New() const {
  return new Member;
}

void Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0;
    captin_ = false;
    pos_x_ = 0;
    pos_y_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_captin;
        break;
      }

      // required bool captin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &captin_)));
          set_has_captin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // required bool captin = 2;
  if (has_captin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->captin(), output);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  // optional int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // required bool captin = 2;
  if (has_captin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->captin(), target);
  }

  // optional int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // optional int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  // optional int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // required bool captin = 2;
    if (has_captin()) {
      total_size += 1 + 1;
    }

    // optional int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // optional int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_captin()) {
      set_captin(from.captin());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Member::Swap(Member* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(captin_, other->captin_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Opponent::kRoleIdFieldNumber;
const int Opponent::kRoleNameFieldNumber;
const int Opponent::kRoleThumbFieldNumber;
const int Opponent::kRoleLvFieldNumber;
const int Opponent::kPointsFieldNumber;
const int Opponent::kCombatFieldNumber;
const int Opponent::kHeroThumbFieldNumber;
const int Opponent::kIsRobotFieldNumber;
const int Opponent::kFbIdFieldNumber;
#endif  // !_MSC_VER

Opponent::Opponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Opponent::InitAsDefaultInstance() {
}

Opponent::Opponent(const Opponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Opponent::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_thumb_ = 0;
  role_lv_ = 0;
  points_ = 0;
  combat_ = 0;
  hero_thumb_ = 0;
  is_robot_ = false;
  fb_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Opponent::~Opponent() {
  SharedDtor();
}

void Opponent::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (fb_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fb_id_;
  }
  if (this != default_instance_) {
  }
}

void Opponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Opponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Opponent_descriptor_;
}

const Opponent& Opponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

Opponent* Opponent::default_instance_ = NULL;

Opponent* Opponent::New() const {
  return new Opponent;
}

void Opponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_thumb_ = 0;
    role_lv_ = 0;
    points_ = 0;
    combat_ = 0;
    hero_thumb_ = 0;
    is_robot_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fb_id()) {
      if (fb_id_ != &::google::protobuf::internal::kEmptyString) {
        fb_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Opponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_lv;
        break;
      }

      // optional int32 role_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_lv_)));
          set_has_role_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_points;
        break;
      }

      // optional int32 points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_combat;
        break;
      }

      // optional int32 combat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_thumb;
        break;
      }

      // optional int32 role_thumb = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_thumb_)));
          set_has_role_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hero_thumb;
        break;
      }

      // optional int32 hero_thumb = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_thumb_)));
          set_has_hero_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_robot;
        break;
      }

      // optional bool is_robot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fb_id;
        break;
      }

      // optional string fb_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fb_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fb_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fb_id().data(), this->fb_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Opponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional int32 role_lv = 3;
  if (has_role_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_lv(), output);
  }

  // optional int32 points = 4;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->points(), output);
  }

  // optional int32 combat = 5;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->combat(), output);
  }

  // optional int32 role_thumb = 6;
  if (has_role_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->role_thumb(), output);
  }

  // optional int32 hero_thumb = 7;
  if (has_hero_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hero_thumb(), output);
  }

  // optional bool is_robot = 8;
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_robot(), output);
  }

  // optional string fb_id = 9;
  if (has_fb_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fb_id().data(), this->fb_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->fb_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Opponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional int32 role_lv = 3;
  if (has_role_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_lv(), target);
  }

  // optional int32 points = 4;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->points(), target);
  }

  // optional int32 combat = 5;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->combat(), target);
  }

  // optional int32 role_thumb = 6;
  if (has_role_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->role_thumb(), target);
  }

  // optional int32 hero_thumb = 7;
  if (has_hero_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hero_thumb(), target);
  }

  // optional bool is_robot = 8;
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_robot(), target);
  }

  // optional string fb_id = 9;
  if (has_fb_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fb_id().data(), this->fb_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fb_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Opponent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional int32 role_thumb = 6;
    if (has_role_thumb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_thumb());
    }

    // optional int32 role_lv = 3;
    if (has_role_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_lv());
    }

    // optional int32 points = 4;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional int32 combat = 5;
    if (has_combat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

    // optional int32 hero_thumb = 7;
    if (has_hero_thumb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_thumb());
    }

    // optional bool is_robot = 8;
    if (has_is_robot()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string fb_id = 9;
    if (has_fb_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fb_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Opponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Opponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Opponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Opponent::MergeFrom(const Opponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_thumb()) {
      set_role_thumb(from.role_thumb());
    }
    if (from.has_role_lv()) {
      set_role_lv(from.role_lv());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
    if (from.has_hero_thumb()) {
      set_hero_thumb(from.hero_thumb());
    }
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fb_id()) {
      set_fb_id(from.fb_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Opponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Opponent::CopyFrom(const Opponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Opponent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Opponent::Swap(Opponent* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_thumb_, other->role_thumb_);
    std::swap(role_lv_, other->role_lv_);
    std::swap(points_, other->points_);
    std::swap(combat_, other->combat_);
    std::swap(hero_thumb_, other->hero_thumb_);
    std::swap(is_robot_, other->is_robot_);
    std::swap(fb_id_, other->fb_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Opponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Opponent_descriptor_;
  metadata.reflection = Opponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpPrize::kRankFieldNumber;
const int PvpPrize::kPointsFieldNumber;
const int PvpPrize::kPrizesFieldNumber;
#endif  // !_MSC_VER

PvpPrize::PvpPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpPrize::InitAsDefaultInstance() {
}

PvpPrize::PvpPrize(const PvpPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpPrize::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpPrize::~PvpPrize() {
  SharedDtor();
}

void PvpPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpPrize_descriptor_;
}

const PvpPrize& PvpPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pvp_5fprotocol_2eproto();
  return *default_instance_;
}

PvpPrize* PvpPrize::default_instance_ = NULL;

PvpPrize* PvpPrize::New() const {
  return new PvpPrize;
}

void PvpPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    points_ = 0;
  }
  prizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prizes;
        break;
      }

      // repeated .protos.common.Prize prizes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prizes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // repeated .protos.common.Prize prizes = 3;
  for (int i = 0; i < this->prizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prizes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // repeated .protos.common.Prize prizes = 3;
  for (int i = 0; i < this->prizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prizes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  // repeated .protos.common.Prize prizes = 3;
  total_size += 1 * this->prizes_size();
  for (int i = 0; i < this->prizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpPrize::MergeFrom(const PvpPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizes_.MergeFrom(from.prizes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpPrize::CopyFrom(const PvpPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpPrize::IsInitialized() const {

  return true;
}

void PvpPrize::Swap(PvpPrize* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(points_, other->points_);
    prizes_.Swap(&other->prizes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpPrize_descriptor_;
  metadata.reflection = PvpPrize_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
