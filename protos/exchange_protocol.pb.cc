// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "exchange_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* ExchangeInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeInfoRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeInfoRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_exchange_5fprotocol_2eproto() {
  protobuf_AddDesc_exchange_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "exchange_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ExchangeInfoReq_descriptor_ = file->message_type(0);
  static const int ExchangeInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoReq, type_),
  };
  ExchangeInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeInfoReq_descriptor_,
      ExchangeInfoReq::default_instance_,
      ExchangeInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeInfoReq));
  ExchangeInfoRes_descriptor_ = file->message_type(1);
  static const int ExchangeInfoRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoRes, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoRes, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoRes, extime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoRes, maxtime_),
  };
  ExchangeInfoRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeInfoRes_descriptor_,
      ExchangeInfoRes::default_instance_,
      ExchangeInfoRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeInfoRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeInfoRes));
  ExchangeReq_descriptor_ = file->message_type(2);
  static const int ExchangeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeReq, way_),
  };
  ExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeReq_descriptor_,
      ExchangeReq::default_instance_,
      ExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeReq));
  ExchangeRes_descriptor_ = file->message_type(3);
  static const int ExchangeRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRes, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRes, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRes, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRes, extime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRes, result_),
  };
  ExchangeRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeRes_descriptor_,
      ExchangeRes::default_instance_,
      ExchangeRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeRes));
  ExRes_descriptor_ = file->message_type(4);
  static const int ExRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExRes, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExRes, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExRes, crit_),
  };
  ExRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExRes_descriptor_,
      ExRes::default_instance_,
      ExRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_exchange_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeInfoReq_descriptor_, &ExchangeInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeInfoRes_descriptor_, &ExchangeInfoRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeReq_descriptor_, &ExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeRes_descriptor_, &ExchangeRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExRes_descriptor_, &ExRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_exchange_5fprotocol_2eproto() {
  delete ExchangeInfoReq::default_instance_;
  delete ExchangeInfoReq_reflection_;
  delete ExchangeInfoRes::default_instance_;
  delete ExchangeInfoRes_reflection_;
  delete ExchangeReq::default_instance_;
  delete ExchangeReq_reflection_;
  delete ExchangeRes::default_instance_;
  delete ExchangeRes_reflection_;
  delete ExRes::default_instance_;
  delete ExRes_reflection_;
}

void protobuf_AddDesc_exchange_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027exchange_protocol.proto\022\006protos\"\037\n\017Exc"
    "hangeInfoReq\022\014\n\004type\030\001 \002(\005\"R\n\017ExchangeIn"
    "foRes\022\014\n\004gold\030\001 \001(\005\022\020\n\010exchange\030\002 \001(\005\022\016\n"
    "\006exTime\030\003 \001(\005\022\017\n\007maxTime\030\004 \001(\005\"(\n\013Exchan"
    "geReq\022\014\n\004type\030\001 \002(\005\022\013\n\003way\030\002 \001(\005\"l\n\013Exch"
    "angeRes\022\016\n\006status\030\001 \002(\005\022\014\n\004gold\030\002 \001(\005\022\020\n"
    "\010exchange\030\005 \001(\005\022\016\n\006exTime\030\003 \001(\005\022\035\n\006resul"
    "t\030\004 \003(\0132\r.protos.ExRes\"5\n\005ExRes\022\014\n\004gold\030"
    "\001 \001(\005\022\020\n\010exchange\030\002 \001(\005\022\014\n\004crit\030\003 \001(\005B4\n"
    "\036anvin.server.gameserver.protosB\020Exchang"
    "eProtocolH\001", 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "exchange_protocol.proto", &protobuf_RegisterTypes);
  ExchangeInfoReq::default_instance_ = new ExchangeInfoReq();
  ExchangeInfoRes::default_instance_ = new ExchangeInfoRes();
  ExchangeReq::default_instance_ = new ExchangeReq();
  ExchangeRes::default_instance_ = new ExchangeRes();
  ExRes::default_instance_ = new ExRes();
  ExchangeInfoReq::default_instance_->InitAsDefaultInstance();
  ExchangeInfoRes::default_instance_->InitAsDefaultInstance();
  ExchangeReq::default_instance_->InitAsDefaultInstance();
  ExchangeRes::default_instance_->InitAsDefaultInstance();
  ExRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_exchange_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_exchange_5fprotocol_2eproto {
  StaticDescriptorInitializer_exchange_5fprotocol_2eproto() {
    protobuf_AddDesc_exchange_5fprotocol_2eproto();
  }
} static_descriptor_initializer_exchange_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExchangeInfoReq::kTypeFieldNumber;
#endif  // !_MSC_VER

ExchangeInfoReq::ExchangeInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeInfoReq::InitAsDefaultInstance() {
}

ExchangeInfoReq::ExchangeInfoReq(const ExchangeInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeInfoReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeInfoReq::~ExchangeInfoReq() {
  SharedDtor();
}

void ExchangeInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeInfoReq_descriptor_;
}

const ExchangeInfoReq& ExchangeInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_5fprotocol_2eproto();
  return *default_instance_;
}

ExchangeInfoReq* ExchangeInfoReq::default_instance_ = NULL;

ExchangeInfoReq* ExchangeInfoReq::New() const {
  return new ExchangeInfoReq;
}

void ExchangeInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeInfoReq::MergeFrom(const ExchangeInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeInfoReq::CopyFrom(const ExchangeInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExchangeInfoReq::Swap(ExchangeInfoReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeInfoReq_descriptor_;
  metadata.reflection = ExchangeInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeInfoRes::kGoldFieldNumber;
const int ExchangeInfoRes::kExchangeFieldNumber;
const int ExchangeInfoRes::kExTimeFieldNumber;
const int ExchangeInfoRes::kMaxTimeFieldNumber;
#endif  // !_MSC_VER

ExchangeInfoRes::ExchangeInfoRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeInfoRes::InitAsDefaultInstance() {
}

ExchangeInfoRes::ExchangeInfoRes(const ExchangeInfoRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeInfoRes::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  exchange_ = 0;
  extime_ = 0;
  maxtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeInfoRes::~ExchangeInfoRes() {
  SharedDtor();
}

void ExchangeInfoRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeInfoRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeInfoRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeInfoRes_descriptor_;
}

const ExchangeInfoRes& ExchangeInfoRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_5fprotocol_2eproto();
  return *default_instance_;
}

ExchangeInfoRes* ExchangeInfoRes::default_instance_ = NULL;

ExchangeInfoRes* ExchangeInfoRes::New() const {
  return new ExchangeInfoRes;
}

void ExchangeInfoRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0;
    exchange_ = 0;
    extime_ = 0;
    maxtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeInfoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange;
        break;
      }

      // optional int32 exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exTime;
        break;
      }

      // optional int32 exTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extime_)));
          set_has_extime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxTime;
        break;
      }

      // optional int32 maxTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxtime_)));
          set_has_maxtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeInfoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // optional int32 exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }

  // optional int32 exTime = 3;
  if (has_extime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extime(), output);
  }

  // optional int32 maxTime = 4;
  if (has_maxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeInfoRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }

  // optional int32 exchange = 2;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }

  // optional int32 exTime = 3;
  if (has_extime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->extime(), target);
  }

  // optional int32 maxTime = 4;
  if (has_maxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeInfoRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }

    // optional int32 exTime = 3;
    if (has_extime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extime());
    }

    // optional int32 maxTime = 4;
    if (has_maxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeInfoRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeInfoRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeInfoRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeInfoRes::MergeFrom(const ExchangeInfoRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_extime()) {
      set_extime(from.extime());
    }
    if (from.has_maxtime()) {
      set_maxtime(from.maxtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeInfoRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeInfoRes::CopyFrom(const ExchangeInfoRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeInfoRes::IsInitialized() const {

  return true;
}

void ExchangeInfoRes::Swap(ExchangeInfoRes* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(exchange_, other->exchange_);
    std::swap(extime_, other->extime_);
    std::swap(maxtime_, other->maxtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeInfoRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeInfoRes_descriptor_;
  metadata.reflection = ExchangeInfoRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeReq::kTypeFieldNumber;
const int ExchangeReq::kWayFieldNumber;
#endif  // !_MSC_VER

ExchangeReq::ExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeReq::InitAsDefaultInstance() {
}

ExchangeReq::ExchangeReq(const ExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  way_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeReq::~ExchangeReq() {
  SharedDtor();
}

void ExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeReq_descriptor_;
}

const ExchangeReq& ExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_5fprotocol_2eproto();
  return *default_instance_;
}

ExchangeReq* ExchangeReq::default_instance_ = NULL;

ExchangeReq* ExchangeReq::New() const {
  return new ExchangeReq;
}

void ExchangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    way_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_way;
        break;
      }

      // optional int32 way = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &way_)));
          set_has_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 way = 2;
  if (has_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->way(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 way = 2;
  if (has_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->way(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 way = 2;
    if (has_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->way());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeReq::MergeFrom(const ExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_way()) {
      set_way(from.way());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeReq::CopyFrom(const ExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExchangeReq::Swap(ExchangeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(way_, other->way_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeReq_descriptor_;
  metadata.reflection = ExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeRes::kStatusFieldNumber;
const int ExchangeRes::kGoldFieldNumber;
const int ExchangeRes::kExchangeFieldNumber;
const int ExchangeRes::kExTimeFieldNumber;
const int ExchangeRes::kResultFieldNumber;
#endif  // !_MSC_VER

ExchangeRes::ExchangeRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeRes::InitAsDefaultInstance() {
}

ExchangeRes::ExchangeRes(const ExchangeRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeRes::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  gold_ = 0;
  exchange_ = 0;
  extime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeRes::~ExchangeRes() {
  SharedDtor();
}

void ExchangeRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeRes_descriptor_;
}

const ExchangeRes& ExchangeRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_5fprotocol_2eproto();
  return *default_instance_;
}

ExchangeRes* ExchangeRes::default_instance_ = NULL;

ExchangeRes* ExchangeRes::New() const {
  return new ExchangeRes;
}

void ExchangeRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    gold_ = 0;
    exchange_ = 0;
    extime_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exTime;
        break;
      }

      // optional int32 exTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extime_)));
          set_has_extime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // repeated .protos.ExRes result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        if (input->ExpectTag(40)) goto parse_exchange;
        break;
      }

      // optional int32 exchange = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // optional int32 exTime = 3;
  if (has_extime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extime(), output);
  }

  // repeated .protos.ExRes result = 4;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(i), output);
  }

  // optional int32 exchange = 5;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exchange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // optional int32 exTime = 3;
  if (has_extime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->extime(), target);
  }

  // repeated .protos.ExRes result = 4;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(i), target);
  }

  // optional int32 exchange = 5;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exchange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }

    // optional int32 exTime = 3;
    if (has_extime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extime());
    }

  }
  // repeated .protos.ExRes result = 4;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeRes::MergeFrom(const ExchangeRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_extime()) {
      set_extime(from.extime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRes::CopyFrom(const ExchangeRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExchangeRes::Swap(ExchangeRes* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(gold_, other->gold_);
    std::swap(exchange_, other->exchange_);
    std::swap(extime_, other->extime_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeRes_descriptor_;
  metadata.reflection = ExchangeRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExRes::kGoldFieldNumber;
const int ExRes::kExchangeFieldNumber;
const int ExRes::kCritFieldNumber;
#endif  // !_MSC_VER

ExRes::ExRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExRes::InitAsDefaultInstance() {
}

ExRes::ExRes(const ExRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExRes::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  exchange_ = 0;
  crit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExRes::~ExRes() {
  SharedDtor();
}

void ExRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExRes_descriptor_;
}

const ExRes& ExRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_5fprotocol_2eproto();
  return *default_instance_;
}

ExRes* ExRes::default_instance_ = NULL;

ExRes* ExRes::New() const {
  return new ExRes;
}

void ExRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0;
    exchange_ = 0;
    crit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange;
        break;
      }

      // optional int32 exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crit;
        break;
      }

      // optional int32 crit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // optional int32 exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }

  // optional int32 crit = 3;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->crit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }

  // optional int32 exchange = 2;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }

  // optional int32 crit = 3;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->crit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }

    // optional int32 crit = 3;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExRes::MergeFrom(const ExRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExRes::CopyFrom(const ExRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExRes::IsInitialized() const {

  return true;
}

void ExRes::Swap(ExRes* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(exchange_, other->exchange_);
    std::swap(crit_, other->crit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExRes_descriptor_;
  metadata.reflection = ExRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
