// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boss_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "boss_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* BossNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyInspire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyInspire_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetBattleTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetBattleTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossFinishReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossFinishReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossFinishRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossFinishRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossPrizes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossPrizes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* NextRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NextRank_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_boss_5fprotocol_2eproto() {
  protobuf_AddDesc_boss_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "boss_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  BossNotice_descriptor_ = file->message_type(0);
  static const int BossNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossNotice, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossNotice, bossid_),
  };
  BossNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossNotice_descriptor_,
      BossNotice::default_instance_,
      BossNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossNotice));
  BossData_descriptor_ = file->message_type(1);
  static const int BossData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, bosstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, cdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, resetgold_),
  };
  BossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossData_descriptor_,
      BossData::default_instance_,
      BossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossData));
  BuyInspire_descriptor_ = file->message_type(2);
  static const int BuyInspire_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyInspire, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyInspire, inspire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyInspire, inspireprice_),
  };
  BuyInspire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyInspire_descriptor_,
      BuyInspire::default_instance_,
      BuyInspire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyInspire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyInspire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyInspire));
  ResetBattleTime_descriptor_ = file->message_type(3);
  static const int ResetBattleTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetBattleTime, result_),
  };
  ResetBattleTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetBattleTime_descriptor_,
      ResetBattleTime::default_instance_,
      ResetBattleTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetBattleTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetBattleTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetBattleTime));
  WarRequest_descriptor_ = file->message_type(4);
  static const int WarRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRequest, hero1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRequest, hero2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRequest, hero3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRequest, hero4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRequest, hero5_),
  };
  WarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarRequest_descriptor_,
      WarRequest::default_instance_,
      WarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarRequest));
  WarResponse_descriptor_ = file->message_type(5);
  static const int WarResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResponse, monsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResponse, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResponse, addhurt_),
  };
  WarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarResponse_descriptor_,
      WarResponse::default_instance_,
      WarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarResponse));
  BossFinishReq_descriptor_ = file->message_type(6);
  static const int BossFinishReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishReq, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishReq, checkhurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishReq, checksum_),
  };
  BossFinishReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossFinishReq_descriptor_,
      BossFinishReq::default_instance_,
      BossFinishReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossFinishReq));
  BossFinishRes_descriptor_ = file->message_type(7);
  static const int BossFinishRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishRes, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishRes, totalhurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishRes, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishRes, next_),
  };
  BossFinishRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossFinishRes_descriptor_,
      BossFinishRes::default_instance_,
      BossFinishRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossFinishRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossFinishRes));
  BossPrizes_descriptor_ = file->message_type(8);
  static const int BossPrizes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPrizes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPrizes, prizelist_),
  };
  BossPrizes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossPrizes_descriptor_,
      BossPrizes::default_instance_,
      BossPrizes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPrizes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPrizes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossPrizes));
  ChallengeData_descriptor_ = file->message_type(9);
  static const int ChallengeData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeData, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeData, inspire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeData, inspireprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeData, prizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeData, againtime_),
  };
  ChallengeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeData_descriptor_,
      ChallengeData::default_instance_,
      ChallengeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeData));
  BossPrize_descriptor_ = file->message_type(10);
  static const int BossPrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPrize, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPrize, prizes_),
  };
  BossPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossPrize_descriptor_,
      BossPrize::default_instance_,
      BossPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossPrize));
  NextRank_descriptor_ = file->message_type(11);
  static const int NextRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRank, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRank, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRank, thumb_),
  };
  NextRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NextRank_descriptor_,
      NextRank::default_instance_,
      NextRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NextRank));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_boss_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossNotice_descriptor_, &BossNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossData_descriptor_, &BossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyInspire_descriptor_, &BuyInspire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetBattleTime_descriptor_, &ResetBattleTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarRequest_descriptor_, &WarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarResponse_descriptor_, &WarResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossFinishReq_descriptor_, &BossFinishReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossFinishRes_descriptor_, &BossFinishRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossPrizes_descriptor_, &BossPrizes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeData_descriptor_, &ChallengeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossPrize_descriptor_, &BossPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NextRank_descriptor_, &NextRank::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_boss_5fprotocol_2eproto() {
  delete BossNotice::default_instance_;
  delete BossNotice_reflection_;
  delete BossData::default_instance_;
  delete BossData_reflection_;
  delete BuyInspire::default_instance_;
  delete BuyInspire_reflection_;
  delete ResetBattleTime::default_instance_;
  delete ResetBattleTime_reflection_;
  delete WarRequest::default_instance_;
  delete WarRequest_reflection_;
  delete WarResponse::default_instance_;
  delete WarResponse_reflection_;
  delete BossFinishReq::default_instance_;
  delete BossFinishReq_reflection_;
  delete BossFinishRes::default_instance_;
  delete BossFinishRes_reflection_;
  delete BossPrizes::default_instance_;
  delete BossPrizes_reflection_;
  delete ChallengeData::default_instance_;
  delete ChallengeData_reflection_;
  delete BossPrize::default_instance_;
  delete BossPrize_reflection_;
  delete NextRank::default_instance_;
  delete NextRank_reflection_;
}

void protobuf_AddDesc_boss_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fmonster_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2fhero_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023boss_protocol.proto\022\006protos\032\033common/mo"
    "nster_common.proto\032\030common/hero_common.p"
    "roto\032\031common/prize_common.proto\"*\n\nBossN"
    "otice\022\014\n\004open\030\001 \002(\010\022\016\n\006bossId\030\002 \001(\005\"\231\001\n\010"
    "BossData\022\016\n\006result\030\001 \002(\005\022\014\n\004open\030\002 \001(\005\022$"
    "\n\004boss\030\003 \001(\0132\026.protos.common.Monster\022\020\n\010"
    "bossTime\030\004 \001(\005\022$\n\005cData\030\005 \001(\0132\025.protos.C"
    "hallengeData\022\021\n\tresetGold\030\006 \001(\005\"C\n\nBuyIn"
    "spire\022\016\n\006result\030\001 \002(\005\022\017\n\007inspire\030\002 \001(\005\022\024"
    "\n\014inspirePrice\030\003 \001(\005\"!\n\017ResetBattleTime\022"
    "\016\n\006result\030\001 \002(\010\"W\n\nWarRequest\022\r\n\005hero1\030\001"
    " \002(\005\022\r\n\005hero2\030\002 \001(\005\022\r\n\005hero3\030\003 \001(\005\022\r\n\005he"
    "ro4\030\004 \001(\005\022\r\n\005hero5\030\005 \001(\005\"\177\n\013WarResponse\022"
    "\016\n\006result\030\001 \002(\005\022(\n\010monsters\030\002 \003(\0132\026.prot"
    "os.common.Monster\022%\n\010heroList\030\003 \003(\0132\023.pr"
    "otos.common.Hero\022\017\n\007addHurt\030\004 \001(\005\"F\n\rBos"
    "sFinishReq\022\014\n\004hurt\030\001 \002(\005\022\025\n\tcheckHurt\030\002 "
    "\003(\005B\002\020\001\022\020\n\010checkSum\030\003 \002(\021\"n\n\rBossFinishR"
    "es\022\016\n\006result\030\001 \002(\005\022\014\n\004hurt\030\002 \002(\005\022\021\n\ttota"
    "lHurt\030\003 \002(\005\022\014\n\004rank\030\004 \001(\005\022\036\n\004next\030\005 \001(\0132"
    "\020.protos.NextRank\"B\n\nBossPrizes\022\016\n\006resul"
    "t\030\001 \002(\010\022$\n\tprizeList\030\002 \003(\0132\021.protos.Boss"
    "Prize\"\213\001\n\rChallengeData\022\014\n\004hurt\030\001 \001(\005\022\014\n"
    "\004rank\030\002 \001(\005\022\017\n\007inspire\030\003 \001(\005\022\024\n\014inspireP"
    "rice\030\004 \001(\005\022$\n\006prizes\030\005 \003(\0132\024.protos.comm"
    "on.Prize\022\021\n\tagainTime\030\006 \001(\005\"\?\n\tBossPrize"
    "\022\014\n\004rank\030\001 \002(\005\022$\n\006prizes\030\002 \003(\0132\024.protos."
    "common.Prize\"R\n\010NextRank\022\014\n\004rank\030\001 \001(\005\022\r"
    "\n\005level\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004hurt\030\004 \001("
    "\005\022\r\n\005thumb\030\005 \001(\005B/\n\035dass.server.gameserv"
    "er.protosB\014BossProtocolH\001", 1225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "boss_protocol.proto", &protobuf_RegisterTypes);
  BossNotice::default_instance_ = new BossNotice();
  BossData::default_instance_ = new BossData();
  BuyInspire::default_instance_ = new BuyInspire();
  ResetBattleTime::default_instance_ = new ResetBattleTime();
  WarRequest::default_instance_ = new WarRequest();
  WarResponse::default_instance_ = new WarResponse();
  BossFinishReq::default_instance_ = new BossFinishReq();
  BossFinishRes::default_instance_ = new BossFinishRes();
  BossPrizes::default_instance_ = new BossPrizes();
  ChallengeData::default_instance_ = new ChallengeData();
  BossPrize::default_instance_ = new BossPrize();
  NextRank::default_instance_ = new NextRank();
  BossNotice::default_instance_->InitAsDefaultInstance();
  BossData::default_instance_->InitAsDefaultInstance();
  BuyInspire::default_instance_->InitAsDefaultInstance();
  ResetBattleTime::default_instance_->InitAsDefaultInstance();
  WarRequest::default_instance_->InitAsDefaultInstance();
  WarResponse::default_instance_->InitAsDefaultInstance();
  BossFinishReq::default_instance_->InitAsDefaultInstance();
  BossFinishRes::default_instance_->InitAsDefaultInstance();
  BossPrizes::default_instance_->InitAsDefaultInstance();
  ChallengeData::default_instance_->InitAsDefaultInstance();
  BossPrize::default_instance_->InitAsDefaultInstance();
  NextRank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_boss_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_boss_5fprotocol_2eproto {
  StaticDescriptorInitializer_boss_5fprotocol_2eproto() {
    protobuf_AddDesc_boss_5fprotocol_2eproto();
  }
} static_descriptor_initializer_boss_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BossNotice::kOpenFieldNumber;
const int BossNotice::kBossIdFieldNumber;
#endif  // !_MSC_VER

BossNotice::BossNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossNotice::InitAsDefaultInstance() {
}

BossNotice::BossNotice(const BossNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossNotice::SharedCtor() {
  _cached_size_ = 0;
  open_ = false;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossNotice::~BossNotice() {
  SharedDtor();
}

void BossNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossNotice_descriptor_;
}

const BossNotice& BossNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

BossNotice* BossNotice::default_instance_ = NULL;

BossNotice* BossNotice::New() const {
  return new BossNotice;
}

void BossNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    open_ = false;
    bossid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool open = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int32 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool open = 1;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  // optional int32 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool open = 1;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  // optional int32 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool open = 1;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional int32 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossNotice::MergeFrom(const BossNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossNotice::CopyFrom(const BossNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BossNotice::Swap(BossNotice* other) {
  if (other != this) {
    std::swap(open_, other->open_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossNotice_descriptor_;
  metadata.reflection = BossNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossData::kResultFieldNumber;
const int BossData::kOpenFieldNumber;
const int BossData::kBossFieldNumber;
const int BossData::kBossTimeFieldNumber;
const int BossData::kCDataFieldNumber;
const int BossData::kResetGoldFieldNumber;
#endif  // !_MSC_VER

BossData::BossData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossData::InitAsDefaultInstance() {
  boss_ = const_cast< ::protos::common::Monster*>(&::protos::common::Monster::default_instance());
  cdata_ = const_cast< ::protos::ChallengeData*>(&::protos::ChallengeData::default_instance());
}

BossData::BossData(const BossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  open_ = 0;
  boss_ = NULL;
  bosstime_ = 0;
  cdata_ = NULL;
  resetgold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossData::~BossData() {
  SharedDtor();
}

void BossData::SharedDtor() {
  if (this != default_instance_) {
    delete boss_;
    delete cdata_;
  }
}

void BossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossData_descriptor_;
}

const BossData& BossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

BossData* BossData::default_instance_ = NULL;

BossData* BossData::New() const {
  return new BossData;
}

void BossData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    open_ = 0;
    if (has_boss()) {
      if (boss_ != NULL) boss_->::protos::common::Monster::Clear();
    }
    bosstime_ = 0;
    if (has_cdata()) {
      if (cdata_ != NULL) cdata_->::protos::ChallengeData::Clear();
    }
    resetgold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }

      // optional int32 open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_boss;
        break;
      }

      // optional .protos.common.Monster boss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bossTime;
        break;
      }

      // optional int32 bossTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosstime_)));
          set_has_bosstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cData;
        break;
      }

      // optional .protos.ChallengeData cData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resetGold;
        break;
      }

      // optional int32 resetGold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resetgold_)));
          set_has_resetgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open(), output);
  }

  // optional .protos.common.Monster boss = 3;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boss(), output);
  }

  // optional int32 bossTime = 4;
  if (has_bosstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bosstime(), output);
  }

  // optional .protos.ChallengeData cData = 5;
  if (has_cdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cdata(), output);
  }

  // optional int32 resetGold = 6;
  if (has_resetgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->resetgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open(), target);
  }

  // optional .protos.common.Monster boss = 3;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->boss(), target);
  }

  // optional int32 bossTime = 4;
  if (has_bosstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bosstime(), target);
  }

  // optional .protos.ChallengeData cData = 5;
  if (has_cdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cdata(), target);
  }

  // optional int32 resetGold = 6;
  if (has_resetgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->resetgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 open = 2;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

    // optional .protos.common.Monster boss = 3;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

    // optional int32 bossTime = 4;
    if (has_bosstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosstime());
    }

    // optional .protos.ChallengeData cData = 5;
    if (has_cdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdata());
    }

    // optional int32 resetGold = 6;
    if (has_resetgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resetgold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossData::MergeFrom(const BossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_boss()) {
      mutable_boss()->::protos::common::Monster::MergeFrom(from.boss());
    }
    if (from.has_bosstime()) {
      set_bosstime(from.bosstime());
    }
    if (from.has_cdata()) {
      mutable_cdata()->::protos::ChallengeData::MergeFrom(from.cdata());
    }
    if (from.has_resetgold()) {
      set_resetgold(from.resetgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossData::CopyFrom(const BossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_boss()) {
    if (!this->boss().IsInitialized()) return false;
  }
  return true;
}

void BossData::Swap(BossData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(open_, other->open_);
    std::swap(boss_, other->boss_);
    std::swap(bosstime_, other->bosstime_);
    std::swap(cdata_, other->cdata_);
    std::swap(resetgold_, other->resetgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossData_descriptor_;
  metadata.reflection = BossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyInspire::kResultFieldNumber;
const int BuyInspire::kInspireFieldNumber;
const int BuyInspire::kInspirePriceFieldNumber;
#endif  // !_MSC_VER

BuyInspire::BuyInspire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyInspire::InitAsDefaultInstance() {
}

BuyInspire::BuyInspire(const BuyInspire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyInspire::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  inspire_ = 0;
  inspireprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyInspire::~BuyInspire() {
  SharedDtor();
}

void BuyInspire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyInspire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyInspire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyInspire_descriptor_;
}

const BuyInspire& BuyInspire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

BuyInspire* BuyInspire::default_instance_ = NULL;

BuyInspire* BuyInspire::New() const {
  return new BuyInspire;
}

void BuyInspire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    inspire_ = 0;
    inspireprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyInspire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inspire;
        break;
      }

      // optional int32 inspire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inspire_)));
          set_has_inspire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inspirePrice;
        break;
      }

      // optional int32 inspirePrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspirePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inspireprice_)));
          set_has_inspireprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyInspire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 inspire = 2;
  if (has_inspire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inspire(), output);
  }

  // optional int32 inspirePrice = 3;
  if (has_inspireprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inspireprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyInspire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 inspire = 2;
  if (has_inspire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inspire(), target);
  }

  // optional int32 inspirePrice = 3;
  if (has_inspireprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inspireprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyInspire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 inspire = 2;
    if (has_inspire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inspire());
    }

    // optional int32 inspirePrice = 3;
    if (has_inspireprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inspireprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyInspire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyInspire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyInspire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyInspire::MergeFrom(const BuyInspire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_inspire()) {
      set_inspire(from.inspire());
    }
    if (from.has_inspireprice()) {
      set_inspireprice(from.inspireprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyInspire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyInspire::CopyFrom(const BuyInspire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyInspire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuyInspire::Swap(BuyInspire* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(inspire_, other->inspire_);
    std::swap(inspireprice_, other->inspireprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyInspire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyInspire_descriptor_;
  metadata.reflection = BuyInspire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetBattleTime::kResultFieldNumber;
#endif  // !_MSC_VER

ResetBattleTime::ResetBattleTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetBattleTime::InitAsDefaultInstance() {
}

ResetBattleTime::ResetBattleTime(const ResetBattleTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetBattleTime::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetBattleTime::~ResetBattleTime() {
  SharedDtor();
}

void ResetBattleTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetBattleTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetBattleTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetBattleTime_descriptor_;
}

const ResetBattleTime& ResetBattleTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

ResetBattleTime* ResetBattleTime::default_instance_ = NULL;

ResetBattleTime* ResetBattleTime::New() const {
  return new ResetBattleTime;
}

void ResetBattleTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetBattleTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResetBattleTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetBattleTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetBattleTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetBattleTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetBattleTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetBattleTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetBattleTime::MergeFrom(const ResetBattleTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetBattleTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetBattleTime::CopyFrom(const ResetBattleTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetBattleTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResetBattleTime::Swap(ResetBattleTime* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetBattleTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetBattleTime_descriptor_;
  metadata.reflection = ResetBattleTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarRequest::kHero1FieldNumber;
const int WarRequest::kHero2FieldNumber;
const int WarRequest::kHero3FieldNumber;
const int WarRequest::kHero4FieldNumber;
const int WarRequest::kHero5FieldNumber;
#endif  // !_MSC_VER

WarRequest::WarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarRequest::InitAsDefaultInstance() {
}

WarRequest::WarRequest(const WarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarRequest::SharedCtor() {
  _cached_size_ = 0;
  hero1_ = 0;
  hero2_ = 0;
  hero3_ = 0;
  hero4_ = 0;
  hero5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarRequest::~WarRequest() {
  SharedDtor();
}

void WarRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarRequest_descriptor_;
}

const WarRequest& WarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

WarRequest* WarRequest::default_instance_ = NULL;

WarRequest* WarRequest::New() const {
  return new WarRequest;
}

void WarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero1_ = 0;
    hero2_ = 0;
    hero3_ = 0;
    hero4_ = 0;
    hero5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hero1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero1_)));
          set_has_hero1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero2;
        break;
      }

      // optional int32 hero2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero2_)));
          set_has_hero2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero3;
        break;
      }

      // optional int32 hero3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero3_)));
          set_has_hero3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero4;
        break;
      }

      // optional int32 hero4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero4_)));
          set_has_hero4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero5;
        break;
      }

      // optional int32 hero5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero5_)));
          set_has_hero5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hero1 = 1;
  if (has_hero1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero1(), output);
  }

  // optional int32 hero2 = 2;
  if (has_hero2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero2(), output);
  }

  // optional int32 hero3 = 3;
  if (has_hero3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero3(), output);
  }

  // optional int32 hero4 = 4;
  if (has_hero4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hero4(), output);
  }

  // optional int32 hero5 = 5;
  if (has_hero5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hero5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hero1 = 1;
  if (has_hero1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero1(), target);
  }

  // optional int32 hero2 = 2;
  if (has_hero2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero2(), target);
  }

  // optional int32 hero3 = 3;
  if (has_hero3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero3(), target);
  }

  // optional int32 hero4 = 4;
  if (has_hero4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hero4(), target);
  }

  // optional int32 hero5 = 5;
  if (has_hero5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hero5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hero1 = 1;
    if (has_hero1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero1());
    }

    // optional int32 hero2 = 2;
    if (has_hero2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero2());
    }

    // optional int32 hero3 = 3;
    if (has_hero3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero3());
    }

    // optional int32 hero4 = 4;
    if (has_hero4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero4());
    }

    // optional int32 hero5 = 5;
    if (has_hero5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarRequest::MergeFrom(const WarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero1()) {
      set_hero1(from.hero1());
    }
    if (from.has_hero2()) {
      set_hero2(from.hero2());
    }
    if (from.has_hero3()) {
      set_hero3(from.hero3());
    }
    if (from.has_hero4()) {
      set_hero4(from.hero4());
    }
    if (from.has_hero5()) {
      set_hero5(from.hero5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarRequest::CopyFrom(const WarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WarRequest::Swap(WarRequest* other) {
  if (other != this) {
    std::swap(hero1_, other->hero1_);
    std::swap(hero2_, other->hero2_);
    std::swap(hero3_, other->hero3_);
    std::swap(hero4_, other->hero4_);
    std::swap(hero5_, other->hero5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarRequest_descriptor_;
  metadata.reflection = WarRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarResponse::kResultFieldNumber;
const int WarResponse::kMonstersFieldNumber;
const int WarResponse::kHeroListFieldNumber;
const int WarResponse::kAddHurtFieldNumber;
#endif  // !_MSC_VER

WarResponse::WarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarResponse::InitAsDefaultInstance() {
}

WarResponse::WarResponse(const WarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  addhurt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarResponse::~WarResponse() {
  SharedDtor();
}

void WarResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarResponse_descriptor_;
}

const WarResponse& WarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

WarResponse* WarResponse::default_instance_ = NULL;

WarResponse* WarResponse::New() const {
  return new WarResponse;
}

void WarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    addhurt_ = 0;
  }
  monsters_.Clear();
  herolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsters;
        break;
      }

      // repeated .protos.common.Monster monsters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsters;
        if (input->ExpectTag(26)) goto parse_heroList;
        break;
      }

      // repeated .protos.common.Hero heroList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heroList;
        if (input->ExpectTag(32)) goto parse_addHurt;
        break;
      }

      // optional int32 addHurt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addhurt_)));
          set_has_addhurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .protos.common.Monster monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsters(i), output);
  }

  // repeated .protos.common.Hero heroList = 3;
  for (int i = 0; i < this->herolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herolist(i), output);
  }

  // optional int32 addHurt = 4;
  if (has_addhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addhurt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .protos.common.Monster monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsters(i), target);
  }

  // repeated .protos.common.Hero heroList = 3;
  for (int i = 0; i < this->herolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herolist(i), target);
  }

  // optional int32 addHurt = 4;
  if (has_addhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addhurt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 addHurt = 4;
    if (has_addhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhurt());
    }

  }
  // repeated .protos.common.Monster monsters = 2;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  // repeated .protos.common.Hero heroList = 3;
  total_size += 1 * this->herolist_size();
  for (int i = 0; i < this->herolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarResponse::MergeFrom(const WarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  herolist_.MergeFrom(from.herolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_addhurt()) {
      set_addhurt(from.addhurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarResponse::CopyFrom(const WarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < herolist_size(); i++) {
    if (!this->herolist(i).IsInitialized()) return false;
  }
  return true;
}

void WarResponse::Swap(WarResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    monsters_.Swap(&other->monsters_);
    herolist_.Swap(&other->herolist_);
    std::swap(addhurt_, other->addhurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarResponse_descriptor_;
  metadata.reflection = WarResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossFinishReq::kHurtFieldNumber;
const int BossFinishReq::kCheckHurtFieldNumber;
const int BossFinishReq::kCheckSumFieldNumber;
#endif  // !_MSC_VER

BossFinishReq::BossFinishReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossFinishReq::InitAsDefaultInstance() {
}

BossFinishReq::BossFinishReq(const BossFinishReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossFinishReq::SharedCtor() {
  _cached_size_ = 0;
  hurt_ = 0;
  checksum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossFinishReq::~BossFinishReq() {
  SharedDtor();
}

void BossFinishReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossFinishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossFinishReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossFinishReq_descriptor_;
}

const BossFinishReq& BossFinishReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

BossFinishReq* BossFinishReq::default_instance_ = NULL;

BossFinishReq* BossFinishReq::New() const {
  return new BossFinishReq;
}

void BossFinishReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hurt_ = 0;
    checksum_ = 0;
  }
  checkhurt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossFinishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hurt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_checkHurt;
        break;
      }

      // repeated int32 checkHurt = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_checkhurt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_checkhurt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_checkSum;
        break;
      }

      // required sint32 checkSum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossFinishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hurt = 1;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hurt(), output);
  }

  // repeated int32 checkHurt = 2 [packed = true];
  if (this->checkhurt_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_checkhurt_cached_byte_size_);
  }
  for (int i = 0; i < this->checkhurt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->checkhurt(i), output);
  }

  // required sint32 checkSum = 3;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossFinishReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hurt = 1;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hurt(), target);
  }

  // repeated int32 checkHurt = 2 [packed = true];
  if (this->checkhurt_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _checkhurt_cached_byte_size_, target);
  }
  for (int i = 0; i < this->checkhurt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->checkhurt(i), target);
  }

  // required sint32 checkSum = 3;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossFinishReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hurt = 1;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt());
    }

    // required sint32 checkSum = 3;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->checksum());
    }

  }
  // repeated int32 checkHurt = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->checkhurt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->checkhurt(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _checkhurt_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossFinishReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossFinishReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossFinishReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossFinishReq::MergeFrom(const BossFinishReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  checkhurt_.MergeFrom(from.checkhurt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossFinishReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossFinishReq::CopyFrom(const BossFinishReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossFinishReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void BossFinishReq::Swap(BossFinishReq* other) {
  if (other != this) {
    std::swap(hurt_, other->hurt_);
    checkhurt_.Swap(&other->checkhurt_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossFinishReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossFinishReq_descriptor_;
  metadata.reflection = BossFinishReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossFinishRes::kResultFieldNumber;
const int BossFinishRes::kHurtFieldNumber;
const int BossFinishRes::kTotalHurtFieldNumber;
const int BossFinishRes::kRankFieldNumber;
const int BossFinishRes::kNextFieldNumber;
#endif  // !_MSC_VER

BossFinishRes::BossFinishRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossFinishRes::InitAsDefaultInstance() {
  next_ = const_cast< ::protos::NextRank*>(&::protos::NextRank::default_instance());
}

BossFinishRes::BossFinishRes(const BossFinishRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossFinishRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  hurt_ = 0;
  totalhurt_ = 0;
  rank_ = 0;
  next_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossFinishRes::~BossFinishRes() {
  SharedDtor();
}

void BossFinishRes::SharedDtor() {
  if (this != default_instance_) {
    delete next_;
  }
}

void BossFinishRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossFinishRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossFinishRes_descriptor_;
}

const BossFinishRes& BossFinishRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

BossFinishRes* BossFinishRes::default_instance_ = NULL;

BossFinishRes* BossFinishRes::New() const {
  return new BossFinishRes;
}

void BossFinishRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    hurt_ = 0;
    totalhurt_ = 0;
    rank_ = 0;
    if (has_next()) {
      if (next_ != NULL) next_->::protos::NextRank::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossFinishRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hurt;
        break;
      }

      // required int32 hurt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalHurt;
        break;
      }

      // required int32 totalHurt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalhurt_)));
          set_has_totalhurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_next;
        break;
      }

      // optional .protos.NextRank next = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossFinishRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 hurt = 2;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hurt(), output);
  }

  // required int32 totalHurt = 3;
  if (has_totalhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalhurt(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional .protos.NextRank next = 5;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->next(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossFinishRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 hurt = 2;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hurt(), target);
  }

  // required int32 totalHurt = 3;
  if (has_totalhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalhurt(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional .protos.NextRank next = 5;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->next(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossFinishRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 hurt = 2;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt());
    }

    // required int32 totalHurt = 3;
    if (has_totalhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalhurt());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional .protos.NextRank next = 5;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossFinishRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossFinishRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossFinishRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossFinishRes::MergeFrom(const BossFinishRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_totalhurt()) {
      set_totalhurt(from.totalhurt());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_next()) {
      mutable_next()->::protos::NextRank::MergeFrom(from.next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossFinishRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossFinishRes::CopyFrom(const BossFinishRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossFinishRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BossFinishRes::Swap(BossFinishRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(hurt_, other->hurt_);
    std::swap(totalhurt_, other->totalhurt_);
    std::swap(rank_, other->rank_);
    std::swap(next_, other->next_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossFinishRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossFinishRes_descriptor_;
  metadata.reflection = BossFinishRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossPrizes::kResultFieldNumber;
const int BossPrizes::kPrizeListFieldNumber;
#endif  // !_MSC_VER

BossPrizes::BossPrizes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossPrizes::InitAsDefaultInstance() {
}

BossPrizes::BossPrizes(const BossPrizes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossPrizes::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossPrizes::~BossPrizes() {
  SharedDtor();
}

void BossPrizes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossPrizes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossPrizes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossPrizes_descriptor_;
}

const BossPrizes& BossPrizes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

BossPrizes* BossPrizes::default_instance_ = NULL;

BossPrizes* BossPrizes::New() const {
  return new BossPrizes;
}

void BossPrizes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  prizelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossPrizes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizeList;
        break;
      }

      // repeated .protos.BossPrize prizeList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossPrizes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // repeated .protos.BossPrize prizeList = 2;
  for (int i = 0; i < this->prizelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prizelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossPrizes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // repeated .protos.BossPrize prizeList = 2;
  for (int i = 0; i < this->prizelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prizelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossPrizes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protos.BossPrize prizeList = 2;
  total_size += 1 * this->prizelist_size();
  for (int i = 0; i < this->prizelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossPrizes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossPrizes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossPrizes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossPrizes::MergeFrom(const BossPrizes& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizelist_.MergeFrom(from.prizelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossPrizes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossPrizes::CopyFrom(const BossPrizes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossPrizes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < prizelist_size(); i++) {
    if (!this->prizelist(i).IsInitialized()) return false;
  }
  return true;
}

void BossPrizes::Swap(BossPrizes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    prizelist_.Swap(&other->prizelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossPrizes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossPrizes_descriptor_;
  metadata.reflection = BossPrizes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeData::kHurtFieldNumber;
const int ChallengeData::kRankFieldNumber;
const int ChallengeData::kInspireFieldNumber;
const int ChallengeData::kInspirePriceFieldNumber;
const int ChallengeData::kPrizesFieldNumber;
const int ChallengeData::kAgainTimeFieldNumber;
#endif  // !_MSC_VER

ChallengeData::ChallengeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChallengeData::InitAsDefaultInstance() {
}

ChallengeData::ChallengeData(const ChallengeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChallengeData::SharedCtor() {
  _cached_size_ = 0;
  hurt_ = 0;
  rank_ = 0;
  inspire_ = 0;
  inspireprice_ = 0;
  againtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeData::~ChallengeData() {
  SharedDtor();
}

void ChallengeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeData_descriptor_;
}

const ChallengeData& ChallengeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

ChallengeData* ChallengeData::default_instance_ = NULL;

ChallengeData* ChallengeData::New() const {
  return new ChallengeData;
}

void ChallengeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hurt_ = 0;
    rank_ = 0;
    inspire_ = 0;
    inspireprice_ = 0;
    againtime_ = 0;
  }
  prizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hurt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inspire;
        break;
      }

      // optional int32 inspire = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inspire_)));
          set_has_inspire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inspirePrice;
        break;
      }

      // optional int32 inspirePrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspirePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inspireprice_)));
          set_has_inspireprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_prizes;
        break;
      }

      // repeated .protos.common.Prize prizes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_prizes;
        if (input->ExpectTag(48)) goto parse_againTime;
        break;
      }

      // optional int32 againTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_againTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &againtime_)));
          set_has_againtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChallengeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hurt = 1;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hurt(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 inspire = 3;
  if (has_inspire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inspire(), output);
  }

  // optional int32 inspirePrice = 4;
  if (has_inspireprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inspireprice(), output);
  }

  // repeated .protos.common.Prize prizes = 5;
  for (int i = 0; i < this->prizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->prizes(i), output);
  }

  // optional int32 againTime = 6;
  if (has_againtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->againtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChallengeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hurt = 1;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hurt(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 inspire = 3;
  if (has_inspire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inspire(), target);
  }

  // optional int32 inspirePrice = 4;
  if (has_inspireprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inspireprice(), target);
  }

  // repeated .protos.common.Prize prizes = 5;
  for (int i = 0; i < this->prizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->prizes(i), target);
  }

  // optional int32 againTime = 6;
  if (has_againtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->againtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChallengeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hurt = 1;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 inspire = 3;
    if (has_inspire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inspire());
    }

    // optional int32 inspirePrice = 4;
    if (has_inspireprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inspireprice());
    }

    // optional int32 againTime = 6;
    if (has_againtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->againtime());
    }

  }
  // repeated .protos.common.Prize prizes = 5;
  total_size += 1 * this->prizes_size();
  for (int i = 0; i < this->prizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeData::MergeFrom(const ChallengeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizes_.MergeFrom(from.prizes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_inspire()) {
      set_inspire(from.inspire());
    }
    if (from.has_inspireprice()) {
      set_inspireprice(from.inspireprice());
    }
    if (from.has_againtime()) {
      set_againtime(from.againtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeData::CopyFrom(const ChallengeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeData::IsInitialized() const {

  return true;
}

void ChallengeData::Swap(ChallengeData* other) {
  if (other != this) {
    std::swap(hurt_, other->hurt_);
    std::swap(rank_, other->rank_);
    std::swap(inspire_, other->inspire_);
    std::swap(inspireprice_, other->inspireprice_);
    prizes_.Swap(&other->prizes_);
    std::swap(againtime_, other->againtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeData_descriptor_;
  metadata.reflection = ChallengeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossPrize::kRankFieldNumber;
const int BossPrize::kPrizesFieldNumber;
#endif  // !_MSC_VER

BossPrize::BossPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossPrize::InitAsDefaultInstance() {
}

BossPrize::BossPrize(const BossPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossPrize::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossPrize::~BossPrize() {
  SharedDtor();
}

void BossPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossPrize_descriptor_;
}

const BossPrize& BossPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

BossPrize* BossPrize::default_instance_ = NULL;

BossPrize* BossPrize::New() const {
  return new BossPrize;
}

void BossPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
  }
  prizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizes;
        break;
      }

      // repeated .protos.common.Prize prizes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // repeated .protos.common.Prize prizes = 2;
  for (int i = 0; i < this->prizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prizes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // repeated .protos.common.Prize prizes = 2;
  for (int i = 0; i < this->prizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prizes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated .protos.common.Prize prizes = 2;
  total_size += 1 * this->prizes_size();
  for (int i = 0; i < this->prizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossPrize::MergeFrom(const BossPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizes_.MergeFrom(from.prizes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossPrize::CopyFrom(const BossPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossPrize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BossPrize::Swap(BossPrize* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    prizes_.Swap(&other->prizes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossPrize_descriptor_;
  metadata.reflection = BossPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NextRank::kRankFieldNumber;
const int NextRank::kLevelFieldNumber;
const int NextRank::kNameFieldNumber;
const int NextRank::kHurtFieldNumber;
const int NextRank::kThumbFieldNumber;
#endif  // !_MSC_VER

NextRank::NextRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NextRank::InitAsDefaultInstance() {
}

NextRank::NextRank(const NextRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NextRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hurt_ = 0;
  thumb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextRank::~NextRank() {
  SharedDtor();
}

void NextRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NextRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NextRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NextRank_descriptor_;
}

const NextRank& NextRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_boss_5fprotocol_2eproto();
  return *default_instance_;
}

NextRank* NextRank::default_instance_ = NULL;

NextRank* NextRank::New() const {
  return new NextRank;
}

void NextRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hurt_ = 0;
    thumb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NextRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hurt;
        break;
      }

      // optional int32 hurt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_thumb;
        break;
      }

      // optional int32 thumb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumb_)));
          set_has_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 hurt = 4;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hurt(), output);
  }

  // optional int32 thumb = 5;
  if (has_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->thumb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NextRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 hurt = 4;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hurt(), target);
  }

  // optional int32 thumb = 5;
  if (has_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->thumb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NextRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 hurt = 4;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt());
    }

    // optional int32 thumb = 5;
    if (has_thumb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thumb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NextRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NextRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NextRank::MergeFrom(const NextRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_thumb()) {
      set_thumb(from.thumb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NextRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextRank::CopyFrom(const NextRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextRank::IsInitialized() const {

  return true;
}

void NextRank::Swap(NextRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(hurt_, other->hurt_);
    std::swap(thumb_, other->thumb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NextRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NextRank_descriptor_;
  metadata.reflection = NextRank_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
