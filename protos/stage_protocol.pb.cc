// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stage_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stage_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* StageInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageInfoRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageInfoRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChapterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChapterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChapterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChapterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmbushRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmbushRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFinishRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFinishRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageContinueRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageContinueRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrizeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrizeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrizeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrizeRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldEff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldEff_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stage_5fprotocol_2eproto() {
  protobuf_AddDesc_stage_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stage_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  StageInfoReq_descriptor_ = file->message_type(0);
  static const int StageInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfoReq, stageid_),
  };
  StageInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageInfoReq_descriptor_,
      StageInfoReq::default_instance_,
      StageInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageInfoReq));
  StageInfoRes_descriptor_ = file->message_type(1);
  static const int StageInfoRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfoRes, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfoRes, monsterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfoRes, itemlist_),
  };
  StageInfoRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageInfoRes_descriptor_,
      StageInfoRes::default_instance_,
      StageInfoRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfoRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfoRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageInfoRes));
  ChapterRequest_descriptor_ = file->message_type(2);
  static const int ChapterRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterRequest, chapter_),
  };
  ChapterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChapterRequest_descriptor_,
      ChapterRequest::default_instance_,
      ChapterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChapterRequest));
  ChapterResponse_descriptor_ = file->message_type(3);
  static const int ChapterResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterResponse, chapterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterResponse, nowchapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterResponse, stagelist_),
  };
  ChapterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChapterResponse_descriptor_,
      ChapterResponse::default_instance_,
      ChapterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChapterResponse));
  StageListRequest_descriptor_ = file->message_type(4);
  static const int StageListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageListRequest, chapter_),
  };
  StageListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageListRequest_descriptor_,
      StageListRequest::default_instance_,
      StageListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageListRequest));
  StageListResponse_descriptor_ = file->message_type(5);
  static const int StageListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageListResponse, stagelist_),
  };
  StageListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageListResponse_descriptor_,
      StageListResponse::default_instance_,
      StageListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageListResponse));
  BattleRequest_descriptor_ = file->message_type(6);
  static const int BattleRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, hero1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, hero2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, hero3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, hero4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, hero5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, fid_),
  };
  BattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleRequest_descriptor_,
      BattleRequest::default_instance_,
      BattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleRequest));
  BattleResponse_descriptor_ = file->message_type(7);
  static const int BattleResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, monsterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, traplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, maxtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, param_),
  };
  BattleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleResponse_descriptor_,
      BattleResponse::default_instance_,
      BattleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleResponse));
  AmbushRequest_descriptor_ = file->message_type(8);
  static const int AmbushRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmbushRequest, batch_),
  };
  AmbushRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AmbushRequest_descriptor_,
      AmbushRequest::default_instance_,
      AmbushRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmbushRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmbushRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AmbushRequest));
  BattleFinish_descriptor_ = file->message_type(9);
  static const int BattleFinish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, ispass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, blood_),
  };
  BattleFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFinish_descriptor_,
      BattleFinish::default_instance_,
      BattleFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFinish));
  BattleFinishRep_descriptor_ = file->message_type(10);
  static const int BattleFinishRep_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, fcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, mobieshop_),
  };
  BattleFinishRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFinishRep_descriptor_,
      BattleFinishRep::default_instance_,
      BattleFinishRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFinishRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFinishRep));
  StageContinueRes_descriptor_ = file->message_type(11);
  static const int StageContinueRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageContinueRes, result_),
  };
  StageContinueRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageContinueRes_descriptor_,
      StageContinueRes::default_instance_,
      StageContinueRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageContinueRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageContinueRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageContinueRes));
  GetPrizeReq_descriptor_ = file->message_type(12);
  static const int GetPrizeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrizeReq, prizetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrizeReq, id_),
  };
  GetPrizeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrizeReq_descriptor_,
      GetPrizeReq::default_instance_,
      GetPrizeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrizeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrizeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrizeReq));
  GetPrizeRes_descriptor_ = file->message_type(13);
  static const int GetPrizeRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrizeRes, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrizeRes, prizes_),
  };
  GetPrizeRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrizeRes_descriptor_,
      GetPrizeRes::default_instance_,
      GetPrizeRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrizeRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrizeRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrizeRes));
  Chapter_descriptor_ = file->message_type(14);
  static const int Chapter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chapter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chapter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chapter, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chapter, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chapter, totalstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chapter, prize_),
  };
  Chapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chapter_descriptor_,
      Chapter::default_instance_,
      Chapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chapter));
  StageInfo_descriptor_ = file->message_type(15);
  static const int StageInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, inlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, ismain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, friends_),
  };
  StageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageInfo_descriptor_,
      StageInfo::default_instance_,
      StageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageInfo));
  FieldEff_descriptor_ = file->message_type(16);
  static const int FieldEff_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, batch_),
  };
  FieldEff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldEff_descriptor_,
      FieldEff::default_instance_,
      FieldEff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldEff));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stage_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageInfoReq_descriptor_, &StageInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageInfoRes_descriptor_, &StageInfoRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChapterRequest_descriptor_, &ChapterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChapterResponse_descriptor_, &ChapterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageListRequest_descriptor_, &StageListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageListResponse_descriptor_, &StageListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleRequest_descriptor_, &BattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleResponse_descriptor_, &BattleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AmbushRequest_descriptor_, &AmbushRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFinish_descriptor_, &BattleFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFinishRep_descriptor_, &BattleFinishRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageContinueRes_descriptor_, &StageContinueRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrizeReq_descriptor_, &GetPrizeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrizeRes_descriptor_, &GetPrizeRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chapter_descriptor_, &Chapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageInfo_descriptor_, &StageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldEff_descriptor_, &FieldEff::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stage_5fprotocol_2eproto() {
  delete StageInfoReq::default_instance_;
  delete StageInfoReq_reflection_;
  delete StageInfoRes::default_instance_;
  delete StageInfoRes_reflection_;
  delete ChapterRequest::default_instance_;
  delete ChapterRequest_reflection_;
  delete ChapterResponse::default_instance_;
  delete ChapterResponse_reflection_;
  delete StageListRequest::default_instance_;
  delete StageListRequest_reflection_;
  delete StageListResponse::default_instance_;
  delete StageListResponse_reflection_;
  delete BattleRequest::default_instance_;
  delete BattleRequest_reflection_;
  delete BattleResponse::default_instance_;
  delete BattleResponse_reflection_;
  delete AmbushRequest::default_instance_;
  delete AmbushRequest_reflection_;
  delete BattleFinish::default_instance_;
  delete BattleFinish_reflection_;
  delete BattleFinishRep::default_instance_;
  delete BattleFinishRep_reflection_;
  delete StageContinueRes::default_instance_;
  delete StageContinueRes_reflection_;
  delete GetPrizeReq::default_instance_;
  delete GetPrizeReq_reflection_;
  delete GetPrizeRes::default_instance_;
  delete GetPrizeRes_reflection_;
  delete Chapter::default_instance_;
  delete Chapter_reflection_;
  delete StageInfo::default_instance_;
  delete StageInfo_reflection_;
  delete FieldEff::default_instance_;
  delete FieldEff_reflection_;
}

void protobuf_AddDesc_stage_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fhero_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2fmonster_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2ftrap_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024stage_protocol.proto\022\006protos\032\030common/h"
    "ero_common.proto\032\033common/monster_common."
    "proto\032\030common/trap_common.proto\032\031common/"
    "prize_common.proto\"\037\n\014StageInfoReq\022\017\n\007st"
    "ageId\030\001 \002(\005\"s\n\014StageInfoRes\022\016\n\006action\030\001 "
    "\001(\005\022+\n\013monsterList\030\002 \003(\0132\026.protos.common"
    ".Monster\022&\n\010itemList\030\003 \003(\0132\024.protos.comm"
    "on.Prize\"/\n\016ChapterRequest\022\014\n\004type\030\001 \002(\005"
    "\022\017\n\007chapter\030\002 \001(\005\"q\n\017ChapterResponse\022$\n\013"
    "chapterList\030\001 \003(\0132\017.protos.Chapter\022\022\n\nno"
    "wChapter\030\002 \001(\005\022$\n\tstageList\030\003 \003(\0132\021.prot"
    "os.StageInfo\"#\n\020StageListRequest\022\017\n\007chap"
    "ter\030\001 \002(\005\"9\n\021StageListResponse\022$\n\tstageL"
    "ist\030\001 \003(\0132\021.protos.StageInfo\"x\n\rBattleRe"
    "quest\022\017\n\007stageId\030\001 \001(\005\022\r\n\005hero1\030\002 \001(\005\022\r\n"
    "\005hero2\030\003 \001(\005\022\r\n\005hero3\030\004 \001(\005\022\r\n\005hero4\030\005 \001"
    "(\005\022\r\n\005hero5\030\006 \001(\005\022\013\n\003fid\030\007 \001(\005\"\354\001\n\016Battl"
    "eResponse\022\017\n\007stageId\030\001 \002(\005\022\r\n\005batch\030\002 \002("
    "\005\022%\n\010heroList\030\003 \003(\0132\023.protos.common.Hero"
    "\022+\n\013monsterList\030\004 \003(\0132\026.protos.common.Mo"
    "nster\022%\n\010trapList\030\005 \003(\0132\023.protos.common."
    "Trap\022\037\n\005field\030\n \001(\0132\020.protos.FieldEff\022\017\n"
    "\007maxTime\030\013 \001(\005\022\r\n\005param\030\014 \001(\005\"\036\n\rAmbushR"
    "equest\022\r\n\005batch\030\001 \002(\005\"=\n\014BattleFinish\022\016\n"
    "\006reason\030\001 \002(\005\022\016\n\006ispass\030\002 \001(\010\022\r\n\005blood\030\003"
    " \001(\005\"\253\001\n\017BattleFinishRep\022\013\n\003win\030\001 \002(\010\022\014\n"
    "\004star\030\002 \001(\005\022\014\n\004coin\030\003 \001(\005\022\r\n\005fcoin\030\005 \001(\005"
    "\022%\n\010heroList\030\004 \003(\0132\023.protos.common.Hero\022"
    "&\n\010itemList\030\006 \003(\0132\024.protos.common.Prize\022"
    "\021\n\tmobieShop\030\007 \001(\010\"\"\n\020StageContinueRes\022\016"
    "\n\006result\030\001 \002(\005\",\n\013GetPrizeReq\022\021\n\tprizeTy"
    "pe\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\"C\n\013GetPrizeRes\022\016\n\006r"
    "esult\030\001 \002(\010\022$\n\006prizes\030\002 \003(\0132\024.protos.com"
    "mon.Prize\"c\n\007Chapter\022\n\n\002id\030\001 \002(\005\022\014\n\004name"
    "\030\002 \001(\t\022\016\n\006isOpen\030\003 \001(\010\022\014\n\004star\030\004 \001(\005\022\021\n\t"
    "totalStar\030\005 \001(\005\022\r\n\005prize\030\006 \001(\005\"\224\001\n\tStage"
    "Info\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\017\n\007inLeve"
    "l\030\003 \001(\005\022\016\n\006isOpen\030\004 \001(\010\022\014\n\004star\030\005 \001(\005\022\016\n"
    "\006action\030\006 \001(\005\022\016\n\006isMain\030\007 \001(\010\022\r\n\005prize\030\010"
    " \001(\005\022\017\n\007friends\030\t \003(\t\"\253\001\n\010FieldEff\022\n\n\002id"
    "\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004name\030\003 \001(\t\022\020\n\010in"
    "terval\030\004 \002(\005\022\r\n\005limit\030\005 \002(\005\022\016\n\006param1\030\006 "
    "\001(\005\022\016\n\006param2\030\007 \001(\005\022\'\n\007monster\030\010 \001(\0132\026.p"
    "rotos.common.Monster\022\r\n\005batch\030\t \001(\005B0\n\035d"
    "ass.server.gameserver.protosB\rStageProto"
    "colH\001", 1805);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stage_protocol.proto", &protobuf_RegisterTypes);
  StageInfoReq::default_instance_ = new StageInfoReq();
  StageInfoRes::default_instance_ = new StageInfoRes();
  ChapterRequest::default_instance_ = new ChapterRequest();
  ChapterResponse::default_instance_ = new ChapterResponse();
  StageListRequest::default_instance_ = new StageListRequest();
  StageListResponse::default_instance_ = new StageListResponse();
  BattleRequest::default_instance_ = new BattleRequest();
  BattleResponse::default_instance_ = new BattleResponse();
  AmbushRequest::default_instance_ = new AmbushRequest();
  BattleFinish::default_instance_ = new BattleFinish();
  BattleFinishRep::default_instance_ = new BattleFinishRep();
  StageContinueRes::default_instance_ = new StageContinueRes();
  GetPrizeReq::default_instance_ = new GetPrizeReq();
  GetPrizeRes::default_instance_ = new GetPrizeRes();
  Chapter::default_instance_ = new Chapter();
  StageInfo::default_instance_ = new StageInfo();
  FieldEff::default_instance_ = new FieldEff();
  StageInfoReq::default_instance_->InitAsDefaultInstance();
  StageInfoRes::default_instance_->InitAsDefaultInstance();
  ChapterRequest::default_instance_->InitAsDefaultInstance();
  ChapterResponse::default_instance_->InitAsDefaultInstance();
  StageListRequest::default_instance_->InitAsDefaultInstance();
  StageListResponse::default_instance_->InitAsDefaultInstance();
  BattleRequest::default_instance_->InitAsDefaultInstance();
  BattleResponse::default_instance_->InitAsDefaultInstance();
  AmbushRequest::default_instance_->InitAsDefaultInstance();
  BattleFinish::default_instance_->InitAsDefaultInstance();
  BattleFinishRep::default_instance_->InitAsDefaultInstance();
  StageContinueRes::default_instance_->InitAsDefaultInstance();
  GetPrizeReq::default_instance_->InitAsDefaultInstance();
  GetPrizeRes::default_instance_->InitAsDefaultInstance();
  Chapter::default_instance_->InitAsDefaultInstance();
  StageInfo::default_instance_->InitAsDefaultInstance();
  FieldEff::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stage_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stage_5fprotocol_2eproto {
  StaticDescriptorInitializer_stage_5fprotocol_2eproto() {
    protobuf_AddDesc_stage_5fprotocol_2eproto();
  }
} static_descriptor_initializer_stage_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StageInfoReq::kStageIdFieldNumber;
#endif  // !_MSC_VER

StageInfoReq::StageInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageInfoReq::InitAsDefaultInstance() {
}

StageInfoReq::StageInfoReq(const StageInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageInfoReq::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageInfoReq::~StageInfoReq() {
  SharedDtor();
}

void StageInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageInfoReq_descriptor_;
}

const StageInfoReq& StageInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

StageInfoReq* StageInfoReq::default_instance_ = NULL;

StageInfoReq* StageInfoReq::New() const {
  return new StageInfoReq;
}

void StageInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stageId = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stageId = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stageId = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageInfoReq::MergeFrom(const StageInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageInfoReq::CopyFrom(const StageInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StageInfoReq::Swap(StageInfoReq* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageInfoReq_descriptor_;
  metadata.reflection = StageInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageInfoRes::kActionFieldNumber;
const int StageInfoRes::kMonsterListFieldNumber;
const int StageInfoRes::kItemListFieldNumber;
#endif  // !_MSC_VER

StageInfoRes::StageInfoRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageInfoRes::InitAsDefaultInstance() {
}

StageInfoRes::StageInfoRes(const StageInfoRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageInfoRes::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageInfoRes::~StageInfoRes() {
  SharedDtor();
}

void StageInfoRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageInfoRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageInfoRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageInfoRes_descriptor_;
}

const StageInfoRes& StageInfoRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

StageInfoRes* StageInfoRes::default_instance_ = NULL;

StageInfoRes* StageInfoRes::New() const {
  return new StageInfoRes;
}

void StageInfoRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
  }
  monsterlist_.Clear();
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageInfoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsterList;
        break;
      }

      // repeated .protos.common.Monster monsterList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsterList;
        if (input->ExpectTag(26)) goto parse_itemList;
        break;
      }

      // repeated .protos.common.Prize itemList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageInfoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // repeated .protos.common.Monster monsterList = 2;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsterlist(i), output);
  }

  // repeated .protos.common.Prize itemList = 3;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageInfoRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  // repeated .protos.common.Monster monsterList = 2;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsterlist(i), target);
  }

  // repeated .protos.common.Prize itemList = 3;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageInfoRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  // repeated .protos.common.Monster monsterList = 2;
  total_size += 1 * this->monsterlist_size();
  for (int i = 0; i < this->monsterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterlist(i));
  }

  // repeated .protos.common.Prize itemList = 3;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageInfoRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageInfoRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageInfoRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageInfoRes::MergeFrom(const StageInfoRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterlist_.MergeFrom(from.monsterlist_);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageInfoRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageInfoRes::CopyFrom(const StageInfoRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageInfoRes::IsInitialized() const {

  for (int i = 0; i < monsterlist_size(); i++) {
    if (!this->monsterlist(i).IsInitialized()) return false;
  }
  return true;
}

void StageInfoRes::Swap(StageInfoRes* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    monsterlist_.Swap(&other->monsterlist_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageInfoRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageInfoRes_descriptor_;
  metadata.reflection = StageInfoRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChapterRequest::kTypeFieldNumber;
const int ChapterRequest::kChapterFieldNumber;
#endif  // !_MSC_VER

ChapterRequest::ChapterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChapterRequest::InitAsDefaultInstance() {
}

ChapterRequest::ChapterRequest(const ChapterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChapterRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  chapter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChapterRequest::~ChapterRequest() {
  SharedDtor();
}

void ChapterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChapterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChapterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChapterRequest_descriptor_;
}

const ChapterRequest& ChapterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

ChapterRequest* ChapterRequest::default_instance_ = NULL;

ChapterRequest* ChapterRequest::New() const {
  return new ChapterRequest;
}

void ChapterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    chapter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChapterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter;
        break;
      }

      // optional int32 chapter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_)));
          set_has_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChapterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 chapter = 2;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chapter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChapterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 chapter = 2;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chapter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChapterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 chapter = 2;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChapterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChapterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChapterRequest::MergeFrom(const ChapterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_chapter()) {
      set_chapter(from.chapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChapterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterRequest::CopyFrom(const ChapterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChapterRequest::Swap(ChapterRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(chapter_, other->chapter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChapterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChapterRequest_descriptor_;
  metadata.reflection = ChapterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChapterResponse::kChapterListFieldNumber;
const int ChapterResponse::kNowChapterFieldNumber;
const int ChapterResponse::kStageListFieldNumber;
#endif  // !_MSC_VER

ChapterResponse::ChapterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChapterResponse::InitAsDefaultInstance() {
}

ChapterResponse::ChapterResponse(const ChapterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChapterResponse::SharedCtor() {
  _cached_size_ = 0;
  nowchapter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChapterResponse::~ChapterResponse() {
  SharedDtor();
}

void ChapterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChapterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChapterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChapterResponse_descriptor_;
}

const ChapterResponse& ChapterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

ChapterResponse* ChapterResponse::default_instance_ = NULL;

ChapterResponse* ChapterResponse::New() const {
  return new ChapterResponse;
}

void ChapterResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    nowchapter_ = 0;
  }
  chapterlist_.Clear();
  stagelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChapterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.Chapter chapterList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapterList;
        if (input->ExpectTag(16)) goto parse_nowChapter;
        break;
      }

      // optional int32 nowChapter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowChapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowchapter_)));
          set_has_nowchapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stageList;
        break;
      }

      // repeated .protos.StageInfo stageList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stageList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stagelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stageList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChapterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.Chapter chapterList = 1;
  for (int i = 0; i < this->chapterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapterlist(i), output);
  }

  // optional int32 nowChapter = 2;
  if (has_nowchapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nowchapter(), output);
  }

  // repeated .protos.StageInfo stageList = 3;
  for (int i = 0; i < this->stagelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stagelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChapterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.Chapter chapterList = 1;
  for (int i = 0; i < this->chapterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapterlist(i), target);
  }

  // optional int32 nowChapter = 2;
  if (has_nowchapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nowchapter(), target);
  }

  // repeated .protos.StageInfo stageList = 3;
  for (int i = 0; i < this->stagelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stagelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChapterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 nowChapter = 2;
    if (has_nowchapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowchapter());
    }

  }
  // repeated .protos.Chapter chapterList = 1;
  total_size += 1 * this->chapterlist_size();
  for (int i = 0; i < this->chapterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapterlist(i));
  }

  // repeated .protos.StageInfo stageList = 3;
  total_size += 1 * this->stagelist_size();
  for (int i = 0; i < this->stagelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stagelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChapterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChapterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChapterResponse::MergeFrom(const ChapterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapterlist_.MergeFrom(from.chapterlist_);
  stagelist_.MergeFrom(from.stagelist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nowchapter()) {
      set_nowchapter(from.nowchapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChapterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterResponse::CopyFrom(const ChapterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterResponse::IsInitialized() const {

  for (int i = 0; i < chapterlist_size(); i++) {
    if (!this->chapterlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < stagelist_size(); i++) {
    if (!this->stagelist(i).IsInitialized()) return false;
  }
  return true;
}

void ChapterResponse::Swap(ChapterResponse* other) {
  if (other != this) {
    chapterlist_.Swap(&other->chapterlist_);
    std::swap(nowchapter_, other->nowchapter_);
    stagelist_.Swap(&other->stagelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChapterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChapterResponse_descriptor_;
  metadata.reflection = ChapterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageListRequest::kChapterFieldNumber;
#endif  // !_MSC_VER

StageListRequest::StageListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageListRequest::InitAsDefaultInstance() {
}

StageListRequest::StageListRequest(const StageListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageListRequest::SharedCtor() {
  _cached_size_ = 0;
  chapter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageListRequest::~StageListRequest() {
  SharedDtor();
}

void StageListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageListRequest_descriptor_;
}

const StageListRequest& StageListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

StageListRequest* StageListRequest::default_instance_ = NULL;

StageListRequest* StageListRequest::New() const {
  return new StageListRequest;
}

void StageListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chapter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_)));
          set_has_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chapter = 1;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chapter = 1;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chapter = 1;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageListRequest::MergeFrom(const StageListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter()) {
      set_chapter(from.chapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageListRequest::CopyFrom(const StageListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StageListRequest::Swap(StageListRequest* other) {
  if (other != this) {
    std::swap(chapter_, other->chapter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageListRequest_descriptor_;
  metadata.reflection = StageListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageListResponse::kStageListFieldNumber;
#endif  // !_MSC_VER

StageListResponse::StageListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageListResponse::InitAsDefaultInstance() {
}

StageListResponse::StageListResponse(const StageListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageListResponse::~StageListResponse() {
  SharedDtor();
}

void StageListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageListResponse_descriptor_;
}

const StageListResponse& StageListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

StageListResponse* StageListResponse::default_instance_ = NULL;

StageListResponse* StageListResponse::New() const {
  return new StageListResponse;
}

void StageListResponse::Clear() {
  stagelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.StageInfo stageList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stageList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stagelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stageList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.StageInfo stageList = 1;
  for (int i = 0; i < this->stagelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stagelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.StageInfo stageList = 1;
  for (int i = 0; i < this->stagelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stagelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .protos.StageInfo stageList = 1;
  total_size += 1 * this->stagelist_size();
  for (int i = 0; i < this->stagelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stagelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageListResponse::MergeFrom(const StageListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stagelist_.MergeFrom(from.stagelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageListResponse::CopyFrom(const StageListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageListResponse::IsInitialized() const {

  for (int i = 0; i < stagelist_size(); i++) {
    if (!this->stagelist(i).IsInitialized()) return false;
  }
  return true;
}

void StageListResponse::Swap(StageListResponse* other) {
  if (other != this) {
    stagelist_.Swap(&other->stagelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageListResponse_descriptor_;
  metadata.reflection = StageListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRequest::kStageIdFieldNumber;
const int BattleRequest::kHero1FieldNumber;
const int BattleRequest::kHero2FieldNumber;
const int BattleRequest::kHero3FieldNumber;
const int BattleRequest::kHero4FieldNumber;
const int BattleRequest::kHero5FieldNumber;
const int BattleRequest::kFidFieldNumber;
#endif  // !_MSC_VER

BattleRequest::BattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleRequest::InitAsDefaultInstance() {
}

BattleRequest::BattleRequest(const BattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleRequest::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0;
  hero1_ = 0;
  hero2_ = 0;
  hero3_ = 0;
  hero4_ = 0;
  hero5_ = 0;
  fid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRequest::~BattleRequest() {
  SharedDtor();
}

void BattleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleRequest_descriptor_;
}

const BattleRequest& BattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

BattleRequest* BattleRequest::default_instance_ = NULL;

BattleRequest* BattleRequest::New() const {
  return new BattleRequest;
}

void BattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0;
    hero1_ = 0;
    hero2_ = 0;
    hero3_ = 0;
    hero4_ = 0;
    hero5_ = 0;
    fid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero1;
        break;
      }

      // optional int32 hero1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero1_)));
          set_has_hero1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero2;
        break;
      }

      // optional int32 hero2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero2_)));
          set_has_hero2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero3;
        break;
      }

      // optional int32 hero3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero3_)));
          set_has_hero3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero4;
        break;
      }

      // optional int32 hero4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero4_)));
          set_has_hero4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hero5;
        break;
      }

      // optional int32 hero5 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero5_)));
          set_has_hero5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fid;
        break;
      }

      // optional int32 fid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fid_)));
          set_has_fid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stageId = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stageid(), output);
  }

  // optional int32 hero1 = 2;
  if (has_hero1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero1(), output);
  }

  // optional int32 hero2 = 3;
  if (has_hero2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero2(), output);
  }

  // optional int32 hero3 = 4;
  if (has_hero3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hero3(), output);
  }

  // optional int32 hero4 = 5;
  if (has_hero4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hero4(), output);
  }

  // optional int32 hero5 = 6;
  if (has_hero5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hero5(), output);
  }

  // optional int32 fid = 7;
  if (has_fid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stageId = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stageid(), target);
  }

  // optional int32 hero1 = 2;
  if (has_hero1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero1(), target);
  }

  // optional int32 hero2 = 3;
  if (has_hero2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero2(), target);
  }

  // optional int32 hero3 = 4;
  if (has_hero3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hero3(), target);
  }

  // optional int32 hero4 = 5;
  if (has_hero4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hero4(), target);
  }

  // optional int32 hero5 = 6;
  if (has_hero5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hero5(), target);
  }

  // optional int32 fid = 7;
  if (has_fid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stageId = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stageid());
    }

    // optional int32 hero1 = 2;
    if (has_hero1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero1());
    }

    // optional int32 hero2 = 3;
    if (has_hero2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero2());
    }

    // optional int32 hero3 = 4;
    if (has_hero3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero3());
    }

    // optional int32 hero4 = 5;
    if (has_hero4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero4());
    }

    // optional int32 hero5 = 6;
    if (has_hero5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero5());
    }

    // optional int32 fid = 7;
    if (has_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleRequest::MergeFrom(const BattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_hero1()) {
      set_hero1(from.hero1());
    }
    if (from.has_hero2()) {
      set_hero2(from.hero2());
    }
    if (from.has_hero3()) {
      set_hero3(from.hero3());
    }
    if (from.has_hero4()) {
      set_hero4(from.hero4());
    }
    if (from.has_hero5()) {
      set_hero5(from.hero5());
    }
    if (from.has_fid()) {
      set_fid(from.fid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRequest::CopyFrom(const BattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRequest::IsInitialized() const {

  return true;
}

void BattleRequest::Swap(BattleRequest* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(hero1_, other->hero1_);
    std::swap(hero2_, other->hero2_);
    std::swap(hero3_, other->hero3_);
    std::swap(hero4_, other->hero4_);
    std::swap(hero5_, other->hero5_);
    std::swap(fid_, other->fid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleRequest_descriptor_;
  metadata.reflection = BattleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleResponse::kStageIdFieldNumber;
const int BattleResponse::kBatchFieldNumber;
const int BattleResponse::kHeroListFieldNumber;
const int BattleResponse::kMonsterListFieldNumber;
const int BattleResponse::kTrapListFieldNumber;
const int BattleResponse::kFieldFieldNumber;
const int BattleResponse::kMaxTimeFieldNumber;
const int BattleResponse::kParamFieldNumber;
#endif  // !_MSC_VER

BattleResponse::BattleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleResponse::InitAsDefaultInstance() {
  field_ = const_cast< ::protos::FieldEff*>(&::protos::FieldEff::default_instance());
}

BattleResponse::BattleResponse(const BattleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleResponse::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0;
  batch_ = 0;
  field_ = NULL;
  maxtime_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleResponse::~BattleResponse() {
  SharedDtor();
}

void BattleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete field_;
  }
}

void BattleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleResponse_descriptor_;
}

const BattleResponse& BattleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

BattleResponse* BattleResponse::default_instance_ = NULL;

BattleResponse* BattleResponse::New() const {
  return new BattleResponse;
}

void BattleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0;
    batch_ = 0;
    if (has_field()) {
      if (field_ != NULL) field_->::protos::FieldEff::Clear();
    }
    maxtime_ = 0;
    param_ = 0;
  }
  herolist_.Clear();
  monsterlist_.Clear();
  traplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_batch;
        break;
      }

      // required int32 batch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_)));
          set_has_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heroList;
        break;
      }

      // repeated .protos.common.Hero heroList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heroList;
        if (input->ExpectTag(34)) goto parse_monsterList;
        break;
      }

      // repeated .protos.common.Monster monsterList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monsterList;
        if (input->ExpectTag(42)) goto parse_trapList;
        break;
      }

      // repeated .protos.common.Trap trapList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trapList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_trapList;
        if (input->ExpectTag(82)) goto parse_field;
        break;
      }

      // optional .protos.FieldEff field = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_maxTime;
        break;
      }

      // optional int32 maxTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxtime_)));
          set_has_maxtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_param;
        break;
      }

      // optional int32 param = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stageId = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stageid(), output);
  }

  // required int32 batch = 2;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batch(), output);
  }

  // repeated .protos.common.Hero heroList = 3;
  for (int i = 0; i < this->herolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herolist(i), output);
  }

  // repeated .protos.common.Monster monsterList = 4;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->monsterlist(i), output);
  }

  // repeated .protos.common.Trap trapList = 5;
  for (int i = 0; i < this->traplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->traplist(i), output);
  }

  // optional .protos.FieldEff field = 10;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->field(), output);
  }

  // optional int32 maxTime = 11;
  if (has_maxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxtime(), output);
  }

  // optional int32 param = 12;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stageId = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stageid(), target);
  }

  // required int32 batch = 2;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batch(), target);
  }

  // repeated .protos.common.Hero heroList = 3;
  for (int i = 0; i < this->herolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herolist(i), target);
  }

  // repeated .protos.common.Monster monsterList = 4;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->monsterlist(i), target);
  }

  // repeated .protos.common.Trap trapList = 5;
  for (int i = 0; i < this->traplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->traplist(i), target);
  }

  // optional .protos.FieldEff field = 10;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->field(), target);
  }

  // optional int32 maxTime = 11;
  if (has_maxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxtime(), target);
  }

  // optional int32 param = 12;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stageId = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stageid());
    }

    // required int32 batch = 2;
    if (has_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch());
    }

    // optional .protos.FieldEff field = 10;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field());
    }

    // optional int32 maxTime = 11;
    if (has_maxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxtime());
    }

    // optional int32 param = 12;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

  }
  // repeated .protos.common.Hero heroList = 3;
  total_size += 1 * this->herolist_size();
  for (int i = 0; i < this->herolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herolist(i));
  }

  // repeated .protos.common.Monster monsterList = 4;
  total_size += 1 * this->monsterlist_size();
  for (int i = 0; i < this->monsterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterlist(i));
  }

  // repeated .protos.common.Trap trapList = 5;
  total_size += 1 * this->traplist_size();
  for (int i = 0; i < this->traplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleResponse::MergeFrom(const BattleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  herolist_.MergeFrom(from.herolist_);
  monsterlist_.MergeFrom(from.monsterlist_);
  traplist_.MergeFrom(from.traplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_batch()) {
      set_batch(from.batch());
    }
    if (from.has_field()) {
      mutable_field()->::protos::FieldEff::MergeFrom(from.field());
    }
    if (from.has_maxtime()) {
      set_maxtime(from.maxtime());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleResponse::CopyFrom(const BattleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < herolist_size(); i++) {
    if (!this->herolist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monsterlist_size(); i++) {
    if (!this->monsterlist(i).IsInitialized()) return false;
  }
  if (has_field()) {
    if (!this->field().IsInitialized()) return false;
  }
  return true;
}

void BattleResponse::Swap(BattleResponse* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(batch_, other->batch_);
    herolist_.Swap(&other->herolist_);
    monsterlist_.Swap(&other->monsterlist_);
    traplist_.Swap(&other->traplist_);
    std::swap(field_, other->field_);
    std::swap(maxtime_, other->maxtime_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleResponse_descriptor_;
  metadata.reflection = BattleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AmbushRequest::kBatchFieldNumber;
#endif  // !_MSC_VER

AmbushRequest::AmbushRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AmbushRequest::InitAsDefaultInstance() {
}

AmbushRequest::AmbushRequest(const AmbushRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AmbushRequest::SharedCtor() {
  _cached_size_ = 0;
  batch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AmbushRequest::~AmbushRequest() {
  SharedDtor();
}

void AmbushRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AmbushRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmbushRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmbushRequest_descriptor_;
}

const AmbushRequest& AmbushRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

AmbushRequest* AmbushRequest::default_instance_ = NULL;

AmbushRequest* AmbushRequest::New() const {
  return new AmbushRequest;
}

void AmbushRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    batch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AmbushRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 batch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_)));
          set_has_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AmbushRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 batch = 1;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->batch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AmbushRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 batch = 1;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->batch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AmbushRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 batch = 1;
    if (has_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmbushRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AmbushRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AmbushRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmbushRequest::MergeFrom(const AmbushRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch()) {
      set_batch(from.batch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AmbushRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmbushRequest::CopyFrom(const AmbushRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmbushRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AmbushRequest::Swap(AmbushRequest* other) {
  if (other != this) {
    std::swap(batch_, other->batch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AmbushRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmbushRequest_descriptor_;
  metadata.reflection = AmbushRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFinish::kReasonFieldNumber;
const int BattleFinish::kIspassFieldNumber;
const int BattleFinish::kBloodFieldNumber;
#endif  // !_MSC_VER

BattleFinish::BattleFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleFinish::InitAsDefaultInstance() {
}

BattleFinish::BattleFinish(const BattleFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleFinish::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ispass_ = false;
  blood_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFinish::~BattleFinish() {
  SharedDtor();
}

void BattleFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFinish_descriptor_;
}

const BattleFinish& BattleFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

BattleFinish* BattleFinish::default_instance_ = NULL;

BattleFinish* BattleFinish::New() const {
  return new BattleFinish;
}

void BattleFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
    ispass_ = false;
    blood_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ispass;
        break;
      }

      // optional bool ispass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispass_)));
          set_has_ispass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blood;
        break;
      }

      // optional int32 blood = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  // optional bool ispass = 2;
  if (has_ispass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ispass(), output);
  }

  // optional int32 blood = 3;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blood(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  // optional bool ispass = 2;
  if (has_ispass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispass(), target);
  }

  // optional int32 blood = 3;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blood(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional bool ispass = 2;
    if (has_ispass()) {
      total_size += 1 + 1;
    }

    // optional int32 blood = 3;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleFinish::MergeFrom(const BattleFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_ispass()) {
      set_ispass(from.ispass());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleFinish::CopyFrom(const BattleFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BattleFinish::Swap(BattleFinish* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(ispass_, other->ispass_);
    std::swap(blood_, other->blood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFinish_descriptor_;
  metadata.reflection = BattleFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFinishRep::kWinFieldNumber;
const int BattleFinishRep::kStarFieldNumber;
const int BattleFinishRep::kCoinFieldNumber;
const int BattleFinishRep::kFcoinFieldNumber;
const int BattleFinishRep::kHeroListFieldNumber;
const int BattleFinishRep::kItemListFieldNumber;
const int BattleFinishRep::kMobieShopFieldNumber;
#endif  // !_MSC_VER

BattleFinishRep::BattleFinishRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleFinishRep::InitAsDefaultInstance() {
}

BattleFinishRep::BattleFinishRep(const BattleFinishRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleFinishRep::SharedCtor() {
  _cached_size_ = 0;
  win_ = false;
  star_ = 0;
  coin_ = 0;
  fcoin_ = 0;
  mobieshop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFinishRep::~BattleFinishRep() {
  SharedDtor();
}

void BattleFinishRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFinishRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFinishRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFinishRep_descriptor_;
}

const BattleFinishRep& BattleFinishRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

BattleFinishRep* BattleFinishRep::default_instance_ = NULL;

BattleFinishRep* BattleFinishRep::New() const {
  return new BattleFinishRep;
}

void BattleFinishRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_ = false;
    star_ = 0;
    coin_ = 0;
    fcoin_ = 0;
    mobieshop_ = false;
  }
  herolist_.Clear();
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleFinishRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int32 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heroList;
        break;
      }

      // repeated .protos.common.Hero heroList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heroList;
        if (input->ExpectTag(40)) goto parse_fcoin;
        break;
      }

      // optional int32 fcoin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcoin_)));
          set_has_fcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemList;
        break;
      }

      // repeated .protos.common.Prize itemList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemList;
        if (input->ExpectTag(56)) goto parse_mobieShop;
        break;
      }

      // optional bool mobieShop = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobieShop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobieshop_)));
          set_has_mobieshop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleFinishRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool win = 1;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->win(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coin(), output);
  }

  // repeated .protos.common.Hero heroList = 4;
  for (int i = 0; i < this->herolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->herolist(i), output);
  }

  // optional int32 fcoin = 5;
  if (has_fcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fcoin(), output);
  }

  // repeated .protos.common.Prize itemList = 6;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->itemlist(i), output);
  }

  // optional bool mobieShop = 7;
  if (has_mobieshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->mobieshop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleFinishRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool win = 1;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->win(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional int32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coin(), target);
  }

  // repeated .protos.common.Hero heroList = 4;
  for (int i = 0; i < this->herolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->herolist(i), target);
  }

  // optional int32 fcoin = 5;
  if (has_fcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fcoin(), target);
  }

  // repeated .protos.common.Prize itemList = 6;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->itemlist(i), target);
  }

  // optional bool mobieShop = 7;
  if (has_mobieshop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->mobieshop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleFinishRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool win = 1;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 fcoin = 5;
    if (has_fcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcoin());
    }

    // optional bool mobieShop = 7;
    if (has_mobieshop()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protos.common.Hero heroList = 4;
  total_size += 1 * this->herolist_size();
  for (int i = 0; i < this->herolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herolist(i));
  }

  // repeated .protos.common.Prize itemList = 6;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFinishRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFinishRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFinishRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleFinishRep::MergeFrom(const BattleFinishRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  herolist_.MergeFrom(from.herolist_);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_fcoin()) {
      set_fcoin(from.fcoin());
    }
    if (from.has_mobieshop()) {
      set_mobieshop(from.mobieshop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleFinishRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleFinishRep::CopyFrom(const BattleFinishRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleFinishRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < herolist_size(); i++) {
    if (!this->herolist(i).IsInitialized()) return false;
  }
  return true;
}

void BattleFinishRep::Swap(BattleFinishRep* other) {
  if (other != this) {
    std::swap(win_, other->win_);
    std::swap(star_, other->star_);
    std::swap(coin_, other->coin_);
    std::swap(fcoin_, other->fcoin_);
    herolist_.Swap(&other->herolist_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(mobieshop_, other->mobieshop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleFinishRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFinishRep_descriptor_;
  metadata.reflection = BattleFinishRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageContinueRes::kResultFieldNumber;
#endif  // !_MSC_VER

StageContinueRes::StageContinueRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageContinueRes::InitAsDefaultInstance() {
}

StageContinueRes::StageContinueRes(const StageContinueRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageContinueRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageContinueRes::~StageContinueRes() {
  SharedDtor();
}

void StageContinueRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageContinueRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageContinueRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageContinueRes_descriptor_;
}

const StageContinueRes& StageContinueRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

StageContinueRes* StageContinueRes::default_instance_ = NULL;

StageContinueRes* StageContinueRes::New() const {
  return new StageContinueRes;
}

void StageContinueRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageContinueRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageContinueRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageContinueRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageContinueRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageContinueRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageContinueRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageContinueRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageContinueRes::MergeFrom(const StageContinueRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageContinueRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageContinueRes::CopyFrom(const StageContinueRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageContinueRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StageContinueRes::Swap(StageContinueRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageContinueRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageContinueRes_descriptor_;
  metadata.reflection = StageContinueRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrizeReq::kPrizeTypeFieldNumber;
const int GetPrizeReq::kIdFieldNumber;
#endif  // !_MSC_VER

GetPrizeReq::GetPrizeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrizeReq::InitAsDefaultInstance() {
}

GetPrizeReq::GetPrizeReq(const GetPrizeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrizeReq::SharedCtor() {
  _cached_size_ = 0;
  prizetype_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrizeReq::~GetPrizeReq() {
  SharedDtor();
}

void GetPrizeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPrizeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrizeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrizeReq_descriptor_;
}

const GetPrizeReq& GetPrizeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

GetPrizeReq* GetPrizeReq::default_instance_ = NULL;

GetPrizeReq* GetPrizeReq::New() const {
  return new GetPrizeReq;
}

void GetPrizeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizetype_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrizeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 prizeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizetype_)));
          set_has_prizetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrizeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 prizeType = 1;
  if (has_prizetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prizetype(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrizeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 prizeType = 1;
  if (has_prizetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prizetype(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPrizeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 prizeType = 1;
    if (has_prizetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prizetype());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrizeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrizeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrizeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrizeReq::MergeFrom(const GetPrizeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizetype()) {
      set_prizetype(from.prizetype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrizeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrizeReq::CopyFrom(const GetPrizeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrizeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetPrizeReq::Swap(GetPrizeReq* other) {
  if (other != this) {
    std::swap(prizetype_, other->prizetype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrizeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrizeReq_descriptor_;
  metadata.reflection = GetPrizeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrizeRes::kResultFieldNumber;
const int GetPrizeRes::kPrizesFieldNumber;
#endif  // !_MSC_VER

GetPrizeRes::GetPrizeRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrizeRes::InitAsDefaultInstance() {
}

GetPrizeRes::GetPrizeRes(const GetPrizeRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrizeRes::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrizeRes::~GetPrizeRes() {
  SharedDtor();
}

void GetPrizeRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPrizeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrizeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrizeRes_descriptor_;
}

const GetPrizeRes& GetPrizeRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

GetPrizeRes* GetPrizeRes::default_instance_ = NULL;

GetPrizeRes* GetPrizeRes::New() const {
  return new GetPrizeRes;
}

void GetPrizeRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  prizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrizeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizes;
        break;
      }

      // repeated .protos.common.Prize prizes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrizeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // repeated .protos.common.Prize prizes = 2;
  for (int i = 0; i < this->prizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prizes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrizeRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // repeated .protos.common.Prize prizes = 2;
  for (int i = 0; i < this->prizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prizes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPrizeRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protos.common.Prize prizes = 2;
  total_size += 1 * this->prizes_size();
  for (int i = 0; i < this->prizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrizeRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrizeRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrizeRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrizeRes::MergeFrom(const GetPrizeRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizes_.MergeFrom(from.prizes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrizeRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrizeRes::CopyFrom(const GetPrizeRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrizeRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetPrizeRes::Swap(GetPrizeRes* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    prizes_.Swap(&other->prizes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrizeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrizeRes_descriptor_;
  metadata.reflection = GetPrizeRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chapter::kIdFieldNumber;
const int Chapter::kNameFieldNumber;
const int Chapter::kIsOpenFieldNumber;
const int Chapter::kStarFieldNumber;
const int Chapter::kTotalStarFieldNumber;
const int Chapter::kPrizeFieldNumber;
#endif  // !_MSC_VER

Chapter::Chapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chapter::InitAsDefaultInstance() {
}

Chapter::Chapter(const Chapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chapter::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isopen_ = false;
  star_ = 0;
  totalstar_ = 0;
  prize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chapter::~Chapter() {
  SharedDtor();
}

void Chapter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Chapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chapter_descriptor_;
}

const Chapter& Chapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

Chapter* Chapter::default_instance_ = NULL;

Chapter* Chapter::New() const {
  return new Chapter;
}

void Chapter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    isopen_ = false;
    star_ = 0;
    totalstar_ = 0;
    prize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isOpen;
        break;
      }

      // optional bool isOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalStar;
        break;
      }

      // optional int32 totalStar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalstar_)));
          set_has_totalstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prize;
        break;
      }

      // optional int32 prize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prize_)));
          set_has_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional bool isOpen = 3;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isopen(), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // optional int32 totalStar = 5;
  if (has_totalstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalstar(), output);
  }

  // optional int32 prize = 6;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool isOpen = 3;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isopen(), target);
  }

  // optional int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // optional int32 totalStar = 5;
  if (has_totalstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalstar(), target);
  }

  // optional int32 prize = 6;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->prize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isOpen = 3;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 totalStar = 5;
    if (has_totalstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalstar());
    }

    // optional int32 prize = 6;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chapter::MergeFrom(const Chapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_totalstar()) {
      set_totalstar(from.totalstar());
    }
    if (from.has_prize()) {
      set_prize(from.prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chapter::CopyFrom(const Chapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Chapter::Swap(Chapter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(isopen_, other->isopen_);
    std::swap(star_, other->star_);
    std::swap(totalstar_, other->totalstar_);
    std::swap(prize_, other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chapter_descriptor_;
  metadata.reflection = Chapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageInfo::kIdFieldNumber;
const int StageInfo::kNameFieldNumber;
const int StageInfo::kInLevelFieldNumber;
const int StageInfo::kIsOpenFieldNumber;
const int StageInfo::kStarFieldNumber;
const int StageInfo::kActionFieldNumber;
const int StageInfo::kIsMainFieldNumber;
const int StageInfo::kPrizeFieldNumber;
const int StageInfo::kFriendsFieldNumber;
#endif  // !_MSC_VER

StageInfo::StageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageInfo::InitAsDefaultInstance() {
}

StageInfo::StageInfo(const StageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inlevel_ = 0;
  isopen_ = false;
  star_ = 0;
  action_ = 0;
  ismain_ = false;
  prize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageInfo::~StageInfo() {
  SharedDtor();
}

void StageInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageInfo_descriptor_;
}

const StageInfo& StageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

StageInfo* StageInfo::default_instance_ = NULL;

StageInfo* StageInfo::New() const {
  return new StageInfo;
}

void StageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    inlevel_ = 0;
    isopen_ = false;
    star_ = 0;
    action_ = 0;
    ismain_ = false;
    prize_ = 0;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inLevel;
        break;
      }

      // optional int32 inLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inlevel_)));
          set_has_inlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isOpen;
        break;
      }

      // optional bool isOpen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional int32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_action;
        break;
      }

      // optional int32 action = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isMain;
        break;
      }

      // optional bool isMain = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismain_)));
          set_has_ismain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prize;
        break;
      }

      // optional int32 prize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prize_)));
          set_has_prize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_friends;
        break;
      }

      // repeated string friends = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_friends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friends(this->friends_size() - 1).data(),
            this->friends(this->friends_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 inLevel = 3;
  if (has_inlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inlevel(), output);
  }

  // optional bool isOpen = 4;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isopen(), output);
  }

  // optional int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  // optional int32 action = 6;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->action(), output);
  }

  // optional bool isMain = 7;
  if (has_ismain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ismain(), output);
  }

  // optional int32 prize = 8;
  if (has_prize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->prize(), output);
  }

  // repeated string friends = 9;
  for (int i = 0; i < this->friends_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->friends(i).data(), this->friends(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 inLevel = 3;
  if (has_inlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inlevel(), target);
  }

  // optional bool isOpen = 4;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isopen(), target);
  }

  // optional int32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  // optional int32 action = 6;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->action(), target);
  }

  // optional bool isMain = 7;
  if (has_ismain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ismain(), target);
  }

  // optional int32 prize = 8;
  if (has_prize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->prize(), target);
  }

  // repeated string friends = 9;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friends(i).data(), this->friends(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 inLevel = 3;
    if (has_inlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inlevel());
    }

    // optional bool isOpen = 4;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // optional int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 action = 6;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // optional bool isMain = 7;
    if (has_ismain()) {
      total_size += 1 + 1;
    }

    // optional int32 prize = 8;
    if (has_prize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prize());
    }

  }
  // repeated string friends = 9;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageInfo::MergeFrom(const StageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_inlevel()) {
      set_inlevel(from.inlevel());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_ismain()) {
      set_ismain(from.ismain());
    }
    if (from.has_prize()) {
      set_prize(from.prize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageInfo::CopyFrom(const StageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StageInfo::Swap(StageInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(inlevel_, other->inlevel_);
    std::swap(isopen_, other->isopen_);
    std::swap(star_, other->star_);
    std::swap(action_, other->action_);
    std::swap(ismain_, other->ismain_);
    std::swap(prize_, other->prize_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageInfo_descriptor_;
  metadata.reflection = StageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldEff::kIdFieldNumber;
const int FieldEff::kTypeFieldNumber;
const int FieldEff::kNameFieldNumber;
const int FieldEff::kIntervalFieldNumber;
const int FieldEff::kLimitFieldNumber;
const int FieldEff::kParam1FieldNumber;
const int FieldEff::kParam2FieldNumber;
const int FieldEff::kMonsterFieldNumber;
const int FieldEff::kBatchFieldNumber;
#endif  // !_MSC_VER

FieldEff::FieldEff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldEff::InitAsDefaultInstance() {
  monster_ = const_cast< ::protos::common::Monster*>(&::protos::common::Monster::default_instance());
}

FieldEff::FieldEff(const FieldEff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldEff::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  interval_ = 0;
  limit_ = 0;
  param1_ = 0;
  param2_ = 0;
  monster_ = NULL;
  batch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldEff::~FieldEff() {
  SharedDtor();
}

void FieldEff::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete monster_;
  }
}

void FieldEff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldEff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldEff_descriptor_;
}

const FieldEff& FieldEff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stage_5fprotocol_2eproto();
  return *default_instance_;
}

FieldEff* FieldEff::default_instance_ = NULL;

FieldEff* FieldEff::New() const {
  return new FieldEff;
}

void FieldEff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    interval_ = 0;
    limit_ = 0;
    param1_ = 0;
    param2_ = 0;
    if (has_monster()) {
      if (monster_ != NULL) monster_->::protos::common::Monster::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    batch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldEff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_interval;
        break;
      }

      // required int32 interval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // required int32 limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param1;
        break;
      }

      // optional int32 param1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monster;
        break;
      }

      // optional .protos.common.Monster monster = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_batch;
        break;
      }

      // optional int32 batch = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_)));
          set_has_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldEff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required int32 interval = 4;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->interval(), output);
  }

  // required int32 limit = 5;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  // optional int32 param1 = 6;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param1(), output);
  }

  // optional int32 param2 = 7;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->param2(), output);
  }

  // optional .protos.common.Monster monster = 8;
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monster(), output);
  }

  // optional int32 batch = 9;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->batch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldEff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 interval = 4;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->interval(), target);
  }

  // required int32 limit = 5;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  // optional int32 param1 = 6;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->param1(), target);
  }

  // optional int32 param2 = 7;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->param2(), target);
  }

  // optional .protos.common.Monster monster = 8;
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monster(), target);
  }

  // optional int32 batch = 9;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->batch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldEff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 interval = 4;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // required int32 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int32 param1 = 6;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 param2 = 7;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // optional .protos.common.Monster monster = 8;
    if (has_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 batch = 9;
    if (has_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldEff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldEff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldEff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldEff::MergeFrom(const FieldEff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_monster()) {
      mutable_monster()->::protos::common::Monster::MergeFrom(from.monster());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_batch()) {
      set_batch(from.batch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldEff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldEff::CopyFrom(const FieldEff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldEff::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_monster()) {
    if (!this->monster().IsInitialized()) return false;
  }
  return true;
}

void FieldEff::Swap(FieldEff* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(interval_, other->interval_);
    std::swap(limit_, other->limit_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(monster_, other->monster_);
    std::swap(batch_, other->batch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldEff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldEff_descriptor_;
  metadata.reflection = FieldEff_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
