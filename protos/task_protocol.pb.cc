// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {

namespace {

const ::google::protobuf::Descriptor* TaskListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_5fprotocol_2eproto() {
  protobuf_AddDesc_task_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  TaskListRequest_descriptor_ = file->message_type(0);
  static const int TaskListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListRequest, type_),
  };
  TaskListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskListRequest_descriptor_,
      TaskListRequest::default_instance_,
      TaskListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskListRequest));
  TaskListResponse_descriptor_ = file->message_type(1);
  static const int TaskListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResponse, tasklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResponse, dailytips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResponse, maintips_),
  };
  TaskListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskListResponse_descriptor_,
      TaskListResponse::default_instance_,
      TaskListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskListResponse));
  TaskNotice_descriptor_ = file->message_type(2);
  static const int TaskNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskNotice, param_),
  };
  TaskNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskNotice_descriptor_,
      TaskNotice::default_instance_,
      TaskNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskNotice));
  PrizeRequest_descriptor_ = file->message_type(3);
  static const int PrizeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeRequest, taskid_),
  };
  PrizeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeRequest_descriptor_,
      PrizeRequest::default_instance_,
      PrizeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeRequest));
  PrizeResponse_descriptor_ = file->message_type(4);
  static const int PrizeResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeResponse, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeResponse, prizes_),
  };
  PrizeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeResponse_descriptor_,
      PrizeResponse::default_instance_,
      PrizeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskListRequest_descriptor_, &TaskListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskListResponse_descriptor_, &TaskListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskNotice_descriptor_, &TaskNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeRequest_descriptor_, &PrizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeResponse_descriptor_, &PrizeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_5fprotocol_2eproto() {
  delete TaskListRequest::default_instance_;
  delete TaskListRequest_reflection_;
  delete TaskListResponse::default_instance_;
  delete TaskListResponse_reflection_;
  delete TaskNotice::default_instance_;
  delete TaskNotice_reflection_;
  delete PrizeRequest::default_instance_;
  delete PrizeRequest_reflection_;
  delete PrizeResponse::default_instance_;
  delete PrizeResponse_reflection_;
}

void protobuf_AddDesc_task_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2ftask_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2frole_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023task_protocol.proto\022\006protos\032\030common/ta"
    "sk_common.proto\032\030common/role_common.prot"
    "o\032\031common/prize_common.proto\"\037\n\017TaskList"
    "Request\022\014\n\004type\030\001 \001(\005\"^\n\020TaskListRespons"
    "e\022%\n\010taskList\030\001 \003(\0132\023.protos.common.Task"
    "\022\021\n\tdailyTips\030\002 \001(\010\022\020\n\010mainTips\030\003 \001(\010\"\033\n"
    "\nTaskNotice\022\r\n\005param\030\001 \002(\005\"\036\n\014PrizeReque"
    "st\022\016\n\006taskId\030\001 \002(\005\"h\n\rPrizeResponse\022\016\n\006r"
    "esult\030\001 \002(\005\022!\n\004role\030\002 \001(\0132\023.protos.commo"
    "n.Role\022$\n\006prizes\030\003 \003(\0132\024.protos.common.P"
    "rizeB/\n\035dass.server.gameserver.protosB\014T"
    "askProtocolH\001", 453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task_protocol.proto", &protobuf_RegisterTypes);
  TaskListRequest::default_instance_ = new TaskListRequest();
  TaskListResponse::default_instance_ = new TaskListResponse();
  TaskNotice::default_instance_ = new TaskNotice();
  PrizeRequest::default_instance_ = new PrizeRequest();
  PrizeResponse::default_instance_ = new PrizeResponse();
  TaskListRequest::default_instance_->InitAsDefaultInstance();
  TaskListResponse::default_instance_->InitAsDefaultInstance();
  TaskNotice::default_instance_->InitAsDefaultInstance();
  PrizeRequest::default_instance_->InitAsDefaultInstance();
  PrizeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_5fprotocol_2eproto {
  StaticDescriptorInitializer_task_5fprotocol_2eproto() {
    protobuf_AddDesc_task_5fprotocol_2eproto();
  }
} static_descriptor_initializer_task_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TaskListRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

TaskListRequest::TaskListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskListRequest::InitAsDefaultInstance() {
}

TaskListRequest::TaskListRequest(const TaskListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskListRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskListRequest::~TaskListRequest() {
  SharedDtor();
}

void TaskListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskListRequest_descriptor_;
}

const TaskListRequest& TaskListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fprotocol_2eproto();
  return *default_instance_;
}

TaskListRequest* TaskListRequest::default_instance_ = NULL;

TaskListRequest* TaskListRequest::New() const {
  return new TaskListRequest;
}

void TaskListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskListRequest::MergeFrom(const TaskListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskListRequest::CopyFrom(const TaskListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskListRequest::IsInitialized() const {

  return true;
}

void TaskListRequest::Swap(TaskListRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskListRequest_descriptor_;
  metadata.reflection = TaskListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskListResponse::kTaskListFieldNumber;
const int TaskListResponse::kDailyTipsFieldNumber;
const int TaskListResponse::kMainTipsFieldNumber;
#endif  // !_MSC_VER

TaskListResponse::TaskListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskListResponse::InitAsDefaultInstance() {
}

TaskListResponse::TaskListResponse(const TaskListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskListResponse::SharedCtor() {
  _cached_size_ = 0;
  dailytips_ = false;
  maintips_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskListResponse::~TaskListResponse() {
  SharedDtor();
}

void TaskListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskListResponse_descriptor_;
}

const TaskListResponse& TaskListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fprotocol_2eproto();
  return *default_instance_;
}

TaskListResponse* TaskListResponse::default_instance_ = NULL;

TaskListResponse* TaskListResponse::New() const {
  return new TaskListResponse;
}

void TaskListResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dailytips_ = false;
    maintips_ = false;
  }
  tasklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protos.common.Task taskList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskList;
        if (input->ExpectTag(16)) goto parse_dailyTips;
        break;
      }

      // optional bool dailyTips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dailytips_)));
          set_has_dailytips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mainTips;
        break;
      }

      // optional bool mainTips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainTips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maintips_)));
          set_has_maintips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protos.common.Task taskList = 1;
  for (int i = 0; i < this->tasklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasklist(i), output);
  }

  // optional bool dailyTips = 2;
  if (has_dailytips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dailytips(), output);
  }

  // optional bool mainTips = 3;
  if (has_maintips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->maintips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protos.common.Task taskList = 1;
  for (int i = 0; i < this->tasklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasklist(i), target);
  }

  // optional bool dailyTips = 2;
  if (has_dailytips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dailytips(), target);
  }

  // optional bool mainTips = 3;
  if (has_maintips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->maintips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool dailyTips = 2;
    if (has_dailytips()) {
      total_size += 1 + 1;
    }

    // optional bool mainTips = 3;
    if (has_maintips()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protos.common.Task taskList = 1;
  total_size += 1 * this->tasklist_size();
  for (int i = 0; i < this->tasklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskListResponse::MergeFrom(const TaskListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasklist_.MergeFrom(from.tasklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dailytips()) {
      set_dailytips(from.dailytips());
    }
    if (from.has_maintips()) {
      set_maintips(from.maintips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskListResponse::CopyFrom(const TaskListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskListResponse::IsInitialized() const {

  return true;
}

void TaskListResponse::Swap(TaskListResponse* other) {
  if (other != this) {
    tasklist_.Swap(&other->tasklist_);
    std::swap(dailytips_, other->dailytips_);
    std::swap(maintips_, other->maintips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskListResponse_descriptor_;
  metadata.reflection = TaskListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskNotice::kParamFieldNumber;
#endif  // !_MSC_VER

TaskNotice::TaskNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskNotice::InitAsDefaultInstance() {
}

TaskNotice::TaskNotice(const TaskNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskNotice::SharedCtor() {
  _cached_size_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskNotice::~TaskNotice() {
  SharedDtor();
}

void TaskNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskNotice_descriptor_;
}

const TaskNotice& TaskNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fprotocol_2eproto();
  return *default_instance_;
}

TaskNotice* TaskNotice::default_instance_ = NULL;

TaskNotice* TaskNotice::New() const {
  return new TaskNotice;
}

void TaskNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskNotice::MergeFrom(const TaskNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskNotice::CopyFrom(const TaskNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskNotice::Swap(TaskNotice* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskNotice_descriptor_;
  metadata.reflection = TaskNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeRequest::kTaskIdFieldNumber;
#endif  // !_MSC_VER

PrizeRequest::PrizeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrizeRequest::InitAsDefaultInstance() {
}

PrizeRequest::PrizeRequest(const PrizeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrizeRequest::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeRequest::~PrizeRequest() {
  SharedDtor();
}

void PrizeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeRequest_descriptor_;
}

const PrizeRequest& PrizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fprotocol_2eproto();
  return *default_instance_;
}

PrizeRequest* PrizeRequest::default_instance_ = NULL;

PrizeRequest* PrizeRequest::New() const {
  return new PrizeRequest;
}

void PrizeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrizeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrizeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeRequest::MergeFrom(const PrizeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeRequest::CopyFrom(const PrizeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrizeRequest::Swap(PrizeRequest* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeRequest_descriptor_;
  metadata.reflection = PrizeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeResponse::kResultFieldNumber;
const int PrizeResponse::kRoleFieldNumber;
const int PrizeResponse::kPrizesFieldNumber;
#endif  // !_MSC_VER

PrizeResponse::PrizeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrizeResponse::InitAsDefaultInstance() {
  role_ = const_cast< ::protos::common::Role*>(&::protos::common::Role::default_instance());
}

PrizeResponse::PrizeResponse(const PrizeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrizeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeResponse::~PrizeResponse() {
  SharedDtor();
}

void PrizeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void PrizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeResponse_descriptor_;
}

const PrizeResponse& PrizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fprotocol_2eproto();
  return *default_instance_;
}

PrizeResponse* PrizeResponse::default_instance_ = NULL;

PrizeResponse* PrizeResponse::New() const {
  return new PrizeResponse;
}

void PrizeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_role()) {
      if (role_ != NULL) role_->::protos::common::Role::Clear();
    }
  }
  prizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // optional .protos.common.Role role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prizes;
        break;
      }

      // repeated .protos.common.Prize prizes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prizes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .protos.common.Role role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(), output);
  }

  // repeated .protos.common.Prize prizes = 3;
  for (int i = 0; i < this->prizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prizes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .protos.common.Role role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(), target);
  }

  // repeated .protos.common.Prize prizes = 3;
  for (int i = 0; i < this->prizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prizes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrizeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .protos.common.Role role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  // repeated .protos.common.Prize prizes = 3;
  total_size += 1 * this->prizes_size();
  for (int i = 0; i < this->prizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeResponse::MergeFrom(const PrizeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizes_.MergeFrom(from.prizes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_role()) {
      mutable_role()->::protos::common::Role::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeResponse::CopyFrom(const PrizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void PrizeResponse::Swap(PrizeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(role_, other->role_);
    prizes_.Swap(&other->prizes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeResponse_descriptor_;
  metadata.reflection = PrizeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)
