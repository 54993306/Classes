// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/armor_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "armor_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Armor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Armor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2farmor_5fcommon_2eproto() {
  protobuf_AddDesc_common_2farmor_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/armor_common.proto");
  GOOGLE_CHECK(file != NULL);
  Armor_descriptor_ = file->message_type(0);
  static const int Armor_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, armortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, strenlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, armor_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, basehp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, basedef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, baseatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, basehit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, basedex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, basecrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, baserenew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, basedodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, addhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, adddef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, addatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, addhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, adddex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, addcrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, addrenew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, adddodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, nextatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, nexthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, nextdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, nexthit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, nextdex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, nextcrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, nextrenew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, nextdodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, atkrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, hprange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, defrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, dexrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, hitrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, critrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, renewrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, dodgerange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, combat_),
  };
  Armor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Armor_descriptor_,
      Armor::default_instance_,
      Armor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Armor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Armor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2farmor_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Armor_descriptor_, &Armor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2farmor_5fcommon_2eproto() {
  delete Armor::default_instance_;
  delete Armor_reflection_;
}

void protobuf_AddDesc_common_2farmor_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031common/armor_common.proto\022\rprotos.comm"
    "on\"\216\005\n\005Armor\022\021\n\tarmorType\030\001 \001(\005\022\017\n\007stren"
    "Lv\030\002 \001(\005\022\014\n\004hero\030\003 \001(\005\022\023\n\013armor_skill\030\004 "
    "\001(\005\022\016\n\006baseHp\030\005 \001(\005\022\017\n\007baseDef\030\006 \001(\005\022\017\n\007"
    "baseAtk\030\007 \001(\005\022\017\n\007baseHit\030\010 \001(\005\022\017\n\007baseDe"
    "x\030\t \001(\005\022\020\n\010baseCrit\030\n \001(\005\022\021\n\tbaseRenew\030\013"
    " \001(\005\022\021\n\tbaseDodge\030\014 \001(\005\022\r\n\005addHp\030\r \001(\005\022\016"
    "\n\006addDef\030\016 \001(\005\022\016\n\006addAtk\030\017 \001(\005\022\016\n\006addHit"
    "\030\020 \001(\005\022\016\n\006addDex\030\021 \001(\005\022\017\n\007addCrit\030\022 \001(\005\022"
    "\020\n\010addRenew\030\023 \001(\005\022\020\n\010addDodge\030\024 \001(\005\022\017\n\007n"
    "extAtk\030\025 \001(\005\022\016\n\006nextHp\030\026 \001(\005\022\017\n\007nextDef\030"
    "\027 \001(\005\022\017\n\007nextHit\030\030 \001(\005\022\017\n\007nextDex\030\031 \001(\005\022"
    "\020\n\010nextCrit\030\032 \001(\005\022\021\n\tnextRenew\030\033 \001(\005\022\021\n\t"
    "nextDodge\030\034 \001(\005\022\020\n\010atkRange\030\035 \001(\t\022\017\n\007hpR"
    "ange\030\036 \001(\t\022\020\n\010defRange\030\037 \001(\t\022\020\n\010dexRange"
    "\030  \001(\t\022\020\n\010hitRange\030! \001(\t\022\021\n\tcritRange\030\" "
    "\001(\t\022\022\n\nrenewRange\030# \001(\t\022\022\n\ndodgeRange\030$ "
    "\001(\t\022\016\n\006combat\030% \001(\005B5\n$dass.server.games"
    "erver.protos.commonB\013ArmorCommonH\001", 754);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/armor_common.proto", &protobuf_RegisterTypes);
  Armor::default_instance_ = new Armor();
  Armor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2farmor_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2farmor_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2farmor_5fcommon_2eproto() {
    protobuf_AddDesc_common_2farmor_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2farmor_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Armor::kArmorTypeFieldNumber;
const int Armor::kStrenLvFieldNumber;
const int Armor::kHeroFieldNumber;
const int Armor::kArmorSkillFieldNumber;
const int Armor::kBaseHpFieldNumber;
const int Armor::kBaseDefFieldNumber;
const int Armor::kBaseAtkFieldNumber;
const int Armor::kBaseHitFieldNumber;
const int Armor::kBaseDexFieldNumber;
const int Armor::kBaseCritFieldNumber;
const int Armor::kBaseRenewFieldNumber;
const int Armor::kBaseDodgeFieldNumber;
const int Armor::kAddHpFieldNumber;
const int Armor::kAddDefFieldNumber;
const int Armor::kAddAtkFieldNumber;
const int Armor::kAddHitFieldNumber;
const int Armor::kAddDexFieldNumber;
const int Armor::kAddCritFieldNumber;
const int Armor::kAddRenewFieldNumber;
const int Armor::kAddDodgeFieldNumber;
const int Armor::kNextAtkFieldNumber;
const int Armor::kNextHpFieldNumber;
const int Armor::kNextDefFieldNumber;
const int Armor::kNextHitFieldNumber;
const int Armor::kNextDexFieldNumber;
const int Armor::kNextCritFieldNumber;
const int Armor::kNextRenewFieldNumber;
const int Armor::kNextDodgeFieldNumber;
const int Armor::kAtkRangeFieldNumber;
const int Armor::kHpRangeFieldNumber;
const int Armor::kDefRangeFieldNumber;
const int Armor::kDexRangeFieldNumber;
const int Armor::kHitRangeFieldNumber;
const int Armor::kCritRangeFieldNumber;
const int Armor::kRenewRangeFieldNumber;
const int Armor::kDodgeRangeFieldNumber;
const int Armor::kCombatFieldNumber;
#endif  // !_MSC_VER

Armor::Armor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Armor::InitAsDefaultInstance() {
}

Armor::Armor(const Armor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Armor::SharedCtor() {
  _cached_size_ = 0;
  armortype_ = 0;
  strenlv_ = 0;
  hero_ = 0;
  armor_skill_ = 0;
  basehp_ = 0;
  basedef_ = 0;
  baseatk_ = 0;
  basehit_ = 0;
  basedex_ = 0;
  basecrit_ = 0;
  baserenew_ = 0;
  basedodge_ = 0;
  addhp_ = 0;
  adddef_ = 0;
  addatk_ = 0;
  addhit_ = 0;
  adddex_ = 0;
  addcrit_ = 0;
  addrenew_ = 0;
  adddodge_ = 0;
  nextatk_ = 0;
  nexthp_ = 0;
  nextdef_ = 0;
  nexthit_ = 0;
  nextdex_ = 0;
  nextcrit_ = 0;
  nextrenew_ = 0;
  nextdodge_ = 0;
  atkrange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hprange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defrange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dexrange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hitrange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  critrange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  renewrange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dodgerange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  combat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Armor::~Armor() {
  SharedDtor();
}

void Armor::SharedDtor() {
  if (atkrange_ != &::google::protobuf::internal::kEmptyString) {
    delete atkrange_;
  }
  if (hprange_ != &::google::protobuf::internal::kEmptyString) {
    delete hprange_;
  }
  if (defrange_ != &::google::protobuf::internal::kEmptyString) {
    delete defrange_;
  }
  if (dexrange_ != &::google::protobuf::internal::kEmptyString) {
    delete dexrange_;
  }
  if (hitrange_ != &::google::protobuf::internal::kEmptyString) {
    delete hitrange_;
  }
  if (critrange_ != &::google::protobuf::internal::kEmptyString) {
    delete critrange_;
  }
  if (renewrange_ != &::google::protobuf::internal::kEmptyString) {
    delete renewrange_;
  }
  if (dodgerange_ != &::google::protobuf::internal::kEmptyString) {
    delete dodgerange_;
  }
  if (this != default_instance_) {
  }
}

void Armor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Armor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Armor_descriptor_;
}

const Armor& Armor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2farmor_5fcommon_2eproto();
  return *default_instance_;
}

Armor* Armor::default_instance_ = NULL;

Armor* Armor::New() const {
  return new Armor;
}

void Armor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    armortype_ = 0;
    strenlv_ = 0;
    hero_ = 0;
    armor_skill_ = 0;
    basehp_ = 0;
    basedef_ = 0;
    baseatk_ = 0;
    basehit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    basedex_ = 0;
    basecrit_ = 0;
    baserenew_ = 0;
    basedodge_ = 0;
    addhp_ = 0;
    adddef_ = 0;
    addatk_ = 0;
    addhit_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    adddex_ = 0;
    addcrit_ = 0;
    addrenew_ = 0;
    adddodge_ = 0;
    nextatk_ = 0;
    nexthp_ = 0;
    nextdef_ = 0;
    nexthit_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    nextdex_ = 0;
    nextcrit_ = 0;
    nextrenew_ = 0;
    nextdodge_ = 0;
    if (has_atkrange()) {
      if (atkrange_ != &::google::protobuf::internal::kEmptyString) {
        atkrange_->clear();
      }
    }
    if (has_hprange()) {
      if (hprange_ != &::google::protobuf::internal::kEmptyString) {
        hprange_->clear();
      }
    }
    if (has_defrange()) {
      if (defrange_ != &::google::protobuf::internal::kEmptyString) {
        defrange_->clear();
      }
    }
    if (has_dexrange()) {
      if (dexrange_ != &::google::protobuf::internal::kEmptyString) {
        dexrange_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_hitrange()) {
      if (hitrange_ != &::google::protobuf::internal::kEmptyString) {
        hitrange_->clear();
      }
    }
    if (has_critrange()) {
      if (critrange_ != &::google::protobuf::internal::kEmptyString) {
        critrange_->clear();
      }
    }
    if (has_renewrange()) {
      if (renewrange_ != &::google::protobuf::internal::kEmptyString) {
        renewrange_->clear();
      }
    }
    if (has_dodgerange()) {
      if (dodgerange_ != &::google::protobuf::internal::kEmptyString) {
        dodgerange_->clear();
      }
    }
    combat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Armor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 armorType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armortype_)));
          set_has_armortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strenLv;
        break;
      }

      // optional int32 strenLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strenLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strenlv_)));
          set_has_strenlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero;
        break;
      }

      // optional int32 hero = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_armor_skill;
        break;
      }

      // optional int32 armor_skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_skill_)));
          set_has_armor_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_baseHp;
        break;
      }

      // optional int32 baseHp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basehp_)));
          set_has_basehp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_baseDef;
        break;
      }

      // optional int32 baseDef = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basedef_)));
          set_has_basedef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_baseAtk;
        break;
      }

      // optional int32 baseAtk = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseatk_)));
          set_has_baseatk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_baseHit;
        break;
      }

      // optional int32 baseHit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basehit_)));
          set_has_basehit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_baseDex;
        break;
      }

      // optional int32 baseDex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseDex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basedex_)));
          set_has_basedex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_baseCrit;
        break;
      }

      // optional int32 baseCrit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basecrit_)));
          set_has_basecrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_baseRenew;
        break;
      }

      // optional int32 baseRenew = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseRenew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baserenew_)));
          set_has_baserenew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_baseDodge;
        break;
      }

      // optional int32 baseDodge = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basedodge_)));
          set_has_basedodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_addHp;
        break;
      }

      // optional int32 addHp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addhp_)));
          set_has_addhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_addDef;
        break;
      }

      // optional int32 addDef = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adddef_)));
          set_has_adddef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_addAtk;
        break;
      }

      // optional int32 addAtk = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addatk_)));
          set_has_addatk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_addHit;
        break;
      }

      // optional int32 addHit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addhit_)));
          set_has_addhit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_addDex;
        break;
      }

      // optional int32 addDex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adddex_)));
          set_has_adddex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_addCrit;
        break;
      }

      // optional int32 addCrit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addcrit_)));
          set_has_addcrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_addRenew;
        break;
      }

      // optional int32 addRenew = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addRenew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addrenew_)));
          set_has_addrenew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_addDodge;
        break;
      }

      // optional int32 addDodge = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adddodge_)));
          set_has_adddodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_nextAtk;
        break;
      }

      // optional int32 nextAtk = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextatk_)));
          set_has_nextatk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_nextHp;
        break;
      }

      // optional int32 nextHp = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nexthp_)));
          set_has_nexthp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_nextDef;
        break;
      }

      // optional int32 nextDef = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextdef_)));
          set_has_nextdef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nextHit;
        break;
      }

      // optional int32 nextHit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nexthit_)));
          set_has_nexthit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nextDex;
        break;
      }

      // optional int32 nextDex = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextDex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextdex_)));
          set_has_nextdex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_nextCrit;
        break;
      }

      // optional int32 nextCrit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextcrit_)));
          set_has_nextcrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_nextRenew;
        break;
      }

      // optional int32 nextRenew = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextRenew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextrenew_)));
          set_has_nextrenew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nextDodge;
        break;
      }

      // optional int32 nextDodge = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextdodge_)));
          set_has_nextdodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_atkRange;
        break;
      }

      // optional string atkRange = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atkRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atkrange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->atkrange().data(), this->atkrange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_hpRange;
        break;
      }

      // optional string hpRange = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hpRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hprange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hprange().data(), this->hprange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_defRange;
        break;
      }

      // optional string defRange = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defrange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defrange().data(), this->defrange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_dexRange;
        break;
      }

      // optional string dexRange = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dexRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dexrange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dexrange().data(), this->dexrange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_hitRange;
        break;
      }

      // optional string hitRange = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitrange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hitrange().data(), this->hitrange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_critRange;
        break;
      }

      // optional string critRange = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_critRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_critrange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->critrange().data(), this->critrange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_renewRange;
        break;
      }

      // optional string renewRange = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_renewRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_renewrange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->renewrange().data(), this->renewrange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_dodgeRange;
        break;
      }

      // optional string dodgeRange = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dodgeRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dodgerange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dodgerange().data(), this->dodgerange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_combat;
        break;
      }

      // optional int32 combat = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Armor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 armorType = 1;
  if (has_armortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armortype(), output);
  }

  // optional int32 strenLv = 2;
  if (has_strenlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->strenlv(), output);
  }

  // optional int32 hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero(), output);
  }

  // optional int32 armor_skill = 4;
  if (has_armor_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->armor_skill(), output);
  }

  // optional int32 baseHp = 5;
  if (has_basehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->basehp(), output);
  }

  // optional int32 baseDef = 6;
  if (has_basedef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->basedef(), output);
  }

  // optional int32 baseAtk = 7;
  if (has_baseatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->baseatk(), output);
  }

  // optional int32 baseHit = 8;
  if (has_basehit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->basehit(), output);
  }

  // optional int32 baseDex = 9;
  if (has_basedex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->basedex(), output);
  }

  // optional int32 baseCrit = 10;
  if (has_basecrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->basecrit(), output);
  }

  // optional int32 baseRenew = 11;
  if (has_baserenew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->baserenew(), output);
  }

  // optional int32 baseDodge = 12;
  if (has_basedodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->basedodge(), output);
  }

  // optional int32 addHp = 13;
  if (has_addhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->addhp(), output);
  }

  // optional int32 addDef = 14;
  if (has_adddef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->adddef(), output);
  }

  // optional int32 addAtk = 15;
  if (has_addatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->addatk(), output);
  }

  // optional int32 addHit = 16;
  if (has_addhit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->addhit(), output);
  }

  // optional int32 addDex = 17;
  if (has_adddex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->adddex(), output);
  }

  // optional int32 addCrit = 18;
  if (has_addcrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->addcrit(), output);
  }

  // optional int32 addRenew = 19;
  if (has_addrenew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->addrenew(), output);
  }

  // optional int32 addDodge = 20;
  if (has_adddodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->adddodge(), output);
  }

  // optional int32 nextAtk = 21;
  if (has_nextatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->nextatk(), output);
  }

  // optional int32 nextHp = 22;
  if (has_nexthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->nexthp(), output);
  }

  // optional int32 nextDef = 23;
  if (has_nextdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nextdef(), output);
  }

  // optional int32 nextHit = 24;
  if (has_nexthit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nexthit(), output);
  }

  // optional int32 nextDex = 25;
  if (has_nextdex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->nextdex(), output);
  }

  // optional int32 nextCrit = 26;
  if (has_nextcrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->nextcrit(), output);
  }

  // optional int32 nextRenew = 27;
  if (has_nextrenew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->nextrenew(), output);
  }

  // optional int32 nextDodge = 28;
  if (has_nextdodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nextdodge(), output);
  }

  // optional string atkRange = 29;
  if (has_atkrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkrange().data(), this->atkrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->atkrange(), output);
  }

  // optional string hpRange = 30;
  if (has_hprange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hprange().data(), this->hprange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->hprange(), output);
  }

  // optional string defRange = 31;
  if (has_defrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defrange().data(), this->defrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->defrange(), output);
  }

  // optional string dexRange = 32;
  if (has_dexrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dexrange().data(), this->dexrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->dexrange(), output);
  }

  // optional string hitRange = 33;
  if (has_hitrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitrange().data(), this->hitrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->hitrange(), output);
  }

  // optional string critRange = 34;
  if (has_critrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->critrange().data(), this->critrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->critrange(), output);
  }

  // optional string renewRange = 35;
  if (has_renewrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->renewrange().data(), this->renewrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->renewrange(), output);
  }

  // optional string dodgeRange = 36;
  if (has_dodgerange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dodgerange().data(), this->dodgerange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->dodgerange(), output);
  }

  // optional int32 combat = 37;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->combat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Armor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 armorType = 1;
  if (has_armortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armortype(), target);
  }

  // optional int32 strenLv = 2;
  if (has_strenlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->strenlv(), target);
  }

  // optional int32 hero = 3;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero(), target);
  }

  // optional int32 armor_skill = 4;
  if (has_armor_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->armor_skill(), target);
  }

  // optional int32 baseHp = 5;
  if (has_basehp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->basehp(), target);
  }

  // optional int32 baseDef = 6;
  if (has_basedef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->basedef(), target);
  }

  // optional int32 baseAtk = 7;
  if (has_baseatk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->baseatk(), target);
  }

  // optional int32 baseHit = 8;
  if (has_basehit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->basehit(), target);
  }

  // optional int32 baseDex = 9;
  if (has_basedex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->basedex(), target);
  }

  // optional int32 baseCrit = 10;
  if (has_basecrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->basecrit(), target);
  }

  // optional int32 baseRenew = 11;
  if (has_baserenew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->baserenew(), target);
  }

  // optional int32 baseDodge = 12;
  if (has_basedodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->basedodge(), target);
  }

  // optional int32 addHp = 13;
  if (has_addhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->addhp(), target);
  }

  // optional int32 addDef = 14;
  if (has_adddef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->adddef(), target);
  }

  // optional int32 addAtk = 15;
  if (has_addatk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->addatk(), target);
  }

  // optional int32 addHit = 16;
  if (has_addhit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->addhit(), target);
  }

  // optional int32 addDex = 17;
  if (has_adddex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->adddex(), target);
  }

  // optional int32 addCrit = 18;
  if (has_addcrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->addcrit(), target);
  }

  // optional int32 addRenew = 19;
  if (has_addrenew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->addrenew(), target);
  }

  // optional int32 addDodge = 20;
  if (has_adddodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->adddodge(), target);
  }

  // optional int32 nextAtk = 21;
  if (has_nextatk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->nextatk(), target);
  }

  // optional int32 nextHp = 22;
  if (has_nexthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->nexthp(), target);
  }

  // optional int32 nextDef = 23;
  if (has_nextdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->nextdef(), target);
  }

  // optional int32 nextHit = 24;
  if (has_nexthit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->nexthit(), target);
  }

  // optional int32 nextDex = 25;
  if (has_nextdex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->nextdex(), target);
  }

  // optional int32 nextCrit = 26;
  if (has_nextcrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->nextcrit(), target);
  }

  // optional int32 nextRenew = 27;
  if (has_nextrenew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->nextrenew(), target);
  }

  // optional int32 nextDodge = 28;
  if (has_nextdodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nextdodge(), target);
  }

  // optional string atkRange = 29;
  if (has_atkrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atkrange().data(), this->atkrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->atkrange(), target);
  }

  // optional string hpRange = 30;
  if (has_hprange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hprange().data(), this->hprange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->hprange(), target);
  }

  // optional string defRange = 31;
  if (has_defrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defrange().data(), this->defrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->defrange(), target);
  }

  // optional string dexRange = 32;
  if (has_dexrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dexrange().data(), this->dexrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->dexrange(), target);
  }

  // optional string hitRange = 33;
  if (has_hitrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitrange().data(), this->hitrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->hitrange(), target);
  }

  // optional string critRange = 34;
  if (has_critrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->critrange().data(), this->critrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->critrange(), target);
  }

  // optional string renewRange = 35;
  if (has_renewrange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->renewrange().data(), this->renewrange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->renewrange(), target);
  }

  // optional string dodgeRange = 36;
  if (has_dodgerange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dodgerange().data(), this->dodgerange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->dodgerange(), target);
  }

  // optional int32 combat = 37;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->combat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Armor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 armorType = 1;
    if (has_armortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armortype());
    }

    // optional int32 strenLv = 2;
    if (has_strenlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strenlv());
    }

    // optional int32 hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero());
    }

    // optional int32 armor_skill = 4;
    if (has_armor_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_skill());
    }

    // optional int32 baseHp = 5;
    if (has_basehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basehp());
    }

    // optional int32 baseDef = 6;
    if (has_basedef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basedef());
    }

    // optional int32 baseAtk = 7;
    if (has_baseatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseatk());
    }

    // optional int32 baseHit = 8;
    if (has_basehit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basehit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 baseDex = 9;
    if (has_basedex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basedex());
    }

    // optional int32 baseCrit = 10;
    if (has_basecrit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basecrit());
    }

    // optional int32 baseRenew = 11;
    if (has_baserenew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baserenew());
    }

    // optional int32 baseDodge = 12;
    if (has_basedodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basedodge());
    }

    // optional int32 addHp = 13;
    if (has_addhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhp());
    }

    // optional int32 addDef = 14;
    if (has_adddef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddef());
    }

    // optional int32 addAtk = 15;
    if (has_addatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addatk());
    }

    // optional int32 addHit = 16;
    if (has_addhit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 addDex = 17;
    if (has_adddex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddex());
    }

    // optional int32 addCrit = 18;
    if (has_addcrit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addcrit());
    }

    // optional int32 addRenew = 19;
    if (has_addrenew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addrenew());
    }

    // optional int32 addDodge = 20;
    if (has_adddodge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddodge());
    }

    // optional int32 nextAtk = 21;
    if (has_nextatk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextatk());
    }

    // optional int32 nextHp = 22;
    if (has_nexthp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexthp());
    }

    // optional int32 nextDef = 23;
    if (has_nextdef()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextdef());
    }

    // optional int32 nextHit = 24;
    if (has_nexthit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexthit());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 nextDex = 25;
    if (has_nextdex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextdex());
    }

    // optional int32 nextCrit = 26;
    if (has_nextcrit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextcrit());
    }

    // optional int32 nextRenew = 27;
    if (has_nextrenew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextrenew());
    }

    // optional int32 nextDodge = 28;
    if (has_nextdodge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextdodge());
    }

    // optional string atkRange = 29;
    if (has_atkrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atkrange());
    }

    // optional string hpRange = 30;
    if (has_hprange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hprange());
    }

    // optional string defRange = 31;
    if (has_defrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defrange());
    }

    // optional string dexRange = 32;
    if (has_dexrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dexrange());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string hitRange = 33;
    if (has_hitrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitrange());
    }

    // optional string critRange = 34;
    if (has_critrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->critrange());
    }

    // optional string renewRange = 35;
    if (has_renewrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->renewrange());
    }

    // optional string dodgeRange = 36;
    if (has_dodgerange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dodgerange());
    }

    // optional int32 combat = 37;
    if (has_combat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Armor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Armor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Armor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Armor::MergeFrom(const Armor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armortype()) {
      set_armortype(from.armortype());
    }
    if (from.has_strenlv()) {
      set_strenlv(from.strenlv());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_armor_skill()) {
      set_armor_skill(from.armor_skill());
    }
    if (from.has_basehp()) {
      set_basehp(from.basehp());
    }
    if (from.has_basedef()) {
      set_basedef(from.basedef());
    }
    if (from.has_baseatk()) {
      set_baseatk(from.baseatk());
    }
    if (from.has_basehit()) {
      set_basehit(from.basehit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_basedex()) {
      set_basedex(from.basedex());
    }
    if (from.has_basecrit()) {
      set_basecrit(from.basecrit());
    }
    if (from.has_baserenew()) {
      set_baserenew(from.baserenew());
    }
    if (from.has_basedodge()) {
      set_basedodge(from.basedodge());
    }
    if (from.has_addhp()) {
      set_addhp(from.addhp());
    }
    if (from.has_adddef()) {
      set_adddef(from.adddef());
    }
    if (from.has_addatk()) {
      set_addatk(from.addatk());
    }
    if (from.has_addhit()) {
      set_addhit(from.addhit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_adddex()) {
      set_adddex(from.adddex());
    }
    if (from.has_addcrit()) {
      set_addcrit(from.addcrit());
    }
    if (from.has_addrenew()) {
      set_addrenew(from.addrenew());
    }
    if (from.has_adddodge()) {
      set_adddodge(from.adddodge());
    }
    if (from.has_nextatk()) {
      set_nextatk(from.nextatk());
    }
    if (from.has_nexthp()) {
      set_nexthp(from.nexthp());
    }
    if (from.has_nextdef()) {
      set_nextdef(from.nextdef());
    }
    if (from.has_nexthit()) {
      set_nexthit(from.nexthit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_nextdex()) {
      set_nextdex(from.nextdex());
    }
    if (from.has_nextcrit()) {
      set_nextcrit(from.nextcrit());
    }
    if (from.has_nextrenew()) {
      set_nextrenew(from.nextrenew());
    }
    if (from.has_nextdodge()) {
      set_nextdodge(from.nextdodge());
    }
    if (from.has_atkrange()) {
      set_atkrange(from.atkrange());
    }
    if (from.has_hprange()) {
      set_hprange(from.hprange());
    }
    if (from.has_defrange()) {
      set_defrange(from.defrange());
    }
    if (from.has_dexrange()) {
      set_dexrange(from.dexrange());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_hitrange()) {
      set_hitrange(from.hitrange());
    }
    if (from.has_critrange()) {
      set_critrange(from.critrange());
    }
    if (from.has_renewrange()) {
      set_renewrange(from.renewrange());
    }
    if (from.has_dodgerange()) {
      set_dodgerange(from.dodgerange());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Armor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Armor::CopyFrom(const Armor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Armor::IsInitialized() const {

  return true;
}

void Armor::Swap(Armor* other) {
  if (other != this) {
    std::swap(armortype_, other->armortype_);
    std::swap(strenlv_, other->strenlv_);
    std::swap(hero_, other->hero_);
    std::swap(armor_skill_, other->armor_skill_);
    std::swap(basehp_, other->basehp_);
    std::swap(basedef_, other->basedef_);
    std::swap(baseatk_, other->baseatk_);
    std::swap(basehit_, other->basehit_);
    std::swap(basedex_, other->basedex_);
    std::swap(basecrit_, other->basecrit_);
    std::swap(baserenew_, other->baserenew_);
    std::swap(basedodge_, other->basedodge_);
    std::swap(addhp_, other->addhp_);
    std::swap(adddef_, other->adddef_);
    std::swap(addatk_, other->addatk_);
    std::swap(addhit_, other->addhit_);
    std::swap(adddex_, other->adddex_);
    std::swap(addcrit_, other->addcrit_);
    std::swap(addrenew_, other->addrenew_);
    std::swap(adddodge_, other->adddodge_);
    std::swap(nextatk_, other->nextatk_);
    std::swap(nexthp_, other->nexthp_);
    std::swap(nextdef_, other->nextdef_);
    std::swap(nexthit_, other->nexthit_);
    std::swap(nextdex_, other->nextdex_);
    std::swap(nextcrit_, other->nextcrit_);
    std::swap(nextrenew_, other->nextrenew_);
    std::swap(nextdodge_, other->nextdodge_);
    std::swap(atkrange_, other->atkrange_);
    std::swap(hprange_, other->hprange_);
    std::swap(defrange_, other->defrange_);
    std::swap(dexrange_, other->dexrange_);
    std::swap(hitrange_, other->hitrange_);
    std::swap(critrange_, other->critrange_);
    std::swap(renewrange_, other->renewrange_);
    std::swap(dodgerange_, other->dodgerange_);
    std::swap(combat_, other->combat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Armor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Armor_descriptor_;
  metadata.reflection = Armor_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

// @@protoc_insertion_point(global_scope)
