// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/city_common.proto

#ifndef PROTOBUF_common_2fcity_5fcommon_2eproto__INCLUDED
#define PROTOBUF_common_2fcity_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "hero_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2fcity_5fcommon_2eproto();
void protobuf_AssignDesc_common_2fcity_5fcommon_2eproto();
void protobuf_ShutdownFile_common_2fcity_5fcommon_2eproto();

class City;

// ===================================================================

class City : public ::google::protobuf::Message {
 public:
  City();
  virtual ~City();

  City(const City& from);

  inline City& operator=(const City& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const City& default_instance();

  void Swap(City* other);

  // implements Message ----------------------------------------------

  City* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const City& from);
  void MergeFrom(const City& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 cityId = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 2;
  inline ::google::protobuf::int32 cityid() const;
  inline void set_cityid(::google::protobuf::int32 value);

  // optional string cityName = 3;
  inline bool has_cityname() const;
  inline void clear_cityname();
  static const int kCityNameFieldNumber = 3;
  inline const ::std::string& cityname() const;
  inline void set_cityname(const ::std::string& value);
  inline void set_cityname(const char* value);
  inline void set_cityname(const char* value, size_t size);
  inline ::std::string* mutable_cityname();
  inline ::std::string* release_cityname();
  inline void set_allocated_cityname(::std::string* cityname);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 lvFood = 5;
  inline bool has_lvfood() const;
  inline void clear_lvfood();
  static const int kLvFoodFieldNumber = 5;
  inline ::google::protobuf::int32 lvfood() const;
  inline void set_lvfood(::google::protobuf::int32 value);

  // optional int32 strenLv = 6;
  inline bool has_strenlv() const;
  inline void clear_strenlv();
  static const int kStrenLvFieldNumber = 6;
  inline ::google::protobuf::int32 strenlv() const;
  inline void set_strenlv(::google::protobuf::int32 value);

  // optional int32 basePE = 7;
  inline bool has_basepe() const;
  inline void clear_basepe();
  static const int kBasePEFieldNumber = 7;
  inline ::google::protobuf::int32 basepe() const;
  inline void set_basepe(::google::protobuf::int32 value);

  // optional int32 extPE = 8;
  inline bool has_extpe() const;
  inline void clear_extpe();
  static const int kExtPEFieldNumber = 8;
  inline ::google::protobuf::int32 extpe() const;
  inline void set_extpe(::google::protobuf::int32 value);

  // optional int32 cap = 9;
  inline bool has_cap() const;
  inline void clear_cap();
  static const int kCapFieldNumber = 9;
  inline ::google::protobuf::int32 cap() const;
  inline void set_cap(::google::protobuf::int32 value);

  // optional int32 maxCap = 10;
  inline bool has_maxcap() const;
  inline void clear_maxcap();
  static const int kMaxCapFieldNumber = 10;
  inline ::google::protobuf::int32 maxcap() const;
  inline void set_maxcap(::google::protobuf::int32 value);

  // optional int32 heroNum = 11;
  inline bool has_heronum() const;
  inline void clear_heronum();
  static const int kHeroNumFieldNumber = 11;
  inline ::google::protobuf::int32 heronum() const;
  inline void set_heronum(::google::protobuf::int32 value);

  // optional int32 hero = 15;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 15;
  inline ::google::protobuf::int32 hero() const;
  inline void set_hero(::google::protobuf::int32 value);

  // repeated .protos.common.Hero heroList = 12;
  inline int herolist_size() const;
  inline void clear_herolist();
  static const int kHeroListFieldNumber = 12;
  inline const ::protos::common::Hero& herolist(int index) const;
  inline ::protos::common::Hero* mutable_herolist(int index);
  inline ::protos::common::Hero* add_herolist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Hero >&
      herolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Hero >*
      mutable_herolist();

  // optional bool capFull = 14;
  inline bool has_capfull() const;
  inline void clear_capfull();
  static const int kCapFullFieldNumber = 14;
  inline bool capfull() const;
  inline void set_capfull(bool value);

  // optional string note = 16;
  inline bool has_note() const;
  inline void clear_note();
  static const int kNoteFieldNumber = 16;
  inline const ::std::string& note() const;
  inline void set_note(const ::std::string& value);
  inline void set_note(const char* value);
  inline void set_note(const char* value, size_t size);
  inline ::std::string* mutable_note();
  inline ::std::string* release_note();
  inline void set_allocated_note(::std::string* note);

  // optional bool isOpen = 17;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsOpenFieldNumber = 17;
  inline bool isopen() const;
  inline void set_isopen(bool value);

  // @@protoc_insertion_point(class_scope:protos.common.City)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_cityname();
  inline void clear_has_cityname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_lvfood();
  inline void clear_has_lvfood();
  inline void set_has_strenlv();
  inline void clear_has_strenlv();
  inline void set_has_basepe();
  inline void clear_has_basepe();
  inline void set_has_extpe();
  inline void clear_has_extpe();
  inline void set_has_cap();
  inline void clear_has_cap();
  inline void set_has_maxcap();
  inline void clear_has_maxcap();
  inline void set_has_heronum();
  inline void clear_has_heronum();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_capfull();
  inline void clear_has_capfull();
  inline void set_has_note();
  inline void clear_has_note();
  inline void set_has_isopen();
  inline void clear_has_isopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cityid_;
  ::std::string* cityname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 lvfood_;
  ::google::protobuf::int32 strenlv_;
  ::google::protobuf::int32 basepe_;
  ::google::protobuf::int32 extpe_;
  ::google::protobuf::int32 cap_;
  ::google::protobuf::int32 maxcap_;
  ::google::protobuf::int32 heronum_;
  ::google::protobuf::RepeatedPtrField< ::protos::common::Hero > herolist_;
  ::google::protobuf::int32 hero_;
  bool capfull_;
  bool isopen_;
  ::std::string* note_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_common_2fcity_5fcommon_2eproto();
  friend void protobuf_AssignDesc_common_2fcity_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_common_2fcity_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static City* default_instance_;
};
// ===================================================================


// ===================================================================

// City

// required int32 id = 1;
inline bool City::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void City::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void City::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void City::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 City::id() const {
  return id_;
}
inline void City::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 cityId = 2;
inline bool City::has_cityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void City::set_has_cityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void City::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void City::clear_cityid() {
  cityid_ = 0;
  clear_has_cityid();
}
inline ::google::protobuf::int32 City::cityid() const {
  return cityid_;
}
inline void City::set_cityid(::google::protobuf::int32 value) {
  set_has_cityid();
  cityid_ = value;
}

// optional string cityName = 3;
inline bool City::has_cityname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void City::set_has_cityname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void City::clear_has_cityname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void City::clear_cityname() {
  if (cityname_ != &::google::protobuf::internal::kEmptyString) {
    cityname_->clear();
  }
  clear_has_cityname();
}
inline const ::std::string& City::cityname() const {
  return *cityname_;
}
inline void City::set_cityname(const ::std::string& value) {
  set_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    cityname_ = new ::std::string;
  }
  cityname_->assign(value);
}
inline void City::set_cityname(const char* value) {
  set_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    cityname_ = new ::std::string;
  }
  cityname_->assign(value);
}
inline void City::set_cityname(const char* value, size_t size) {
  set_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    cityname_ = new ::std::string;
  }
  cityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* City::mutable_cityname() {
  set_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    cityname_ = new ::std::string;
  }
  return cityname_;
}
inline ::std::string* City::release_cityname() {
  clear_has_cityname();
  if (cityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cityname_;
    cityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void City::set_allocated_cityname(::std::string* cityname) {
  if (cityname_ != &::google::protobuf::internal::kEmptyString) {
    delete cityname_;
  }
  if (cityname) {
    set_has_cityname();
    cityname_ = cityname;
  } else {
    clear_has_cityname();
    cityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 4;
inline bool City::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void City::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void City::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void City::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 City::level() const {
  return level_;
}
inline void City::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 lvFood = 5;
inline bool City::has_lvfood() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void City::set_has_lvfood() {
  _has_bits_[0] |= 0x00000010u;
}
inline void City::clear_has_lvfood() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void City::clear_lvfood() {
  lvfood_ = 0;
  clear_has_lvfood();
}
inline ::google::protobuf::int32 City::lvfood() const {
  return lvfood_;
}
inline void City::set_lvfood(::google::protobuf::int32 value) {
  set_has_lvfood();
  lvfood_ = value;
}

// optional int32 strenLv = 6;
inline bool City::has_strenlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void City::set_has_strenlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void City::clear_has_strenlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void City::clear_strenlv() {
  strenlv_ = 0;
  clear_has_strenlv();
}
inline ::google::protobuf::int32 City::strenlv() const {
  return strenlv_;
}
inline void City::set_strenlv(::google::protobuf::int32 value) {
  set_has_strenlv();
  strenlv_ = value;
}

// optional int32 basePE = 7;
inline bool City::has_basepe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void City::set_has_basepe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void City::clear_has_basepe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void City::clear_basepe() {
  basepe_ = 0;
  clear_has_basepe();
}
inline ::google::protobuf::int32 City::basepe() const {
  return basepe_;
}
inline void City::set_basepe(::google::protobuf::int32 value) {
  set_has_basepe();
  basepe_ = value;
}

// optional int32 extPE = 8;
inline bool City::has_extpe() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void City::set_has_extpe() {
  _has_bits_[0] |= 0x00000080u;
}
inline void City::clear_has_extpe() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void City::clear_extpe() {
  extpe_ = 0;
  clear_has_extpe();
}
inline ::google::protobuf::int32 City::extpe() const {
  return extpe_;
}
inline void City::set_extpe(::google::protobuf::int32 value) {
  set_has_extpe();
  extpe_ = value;
}

// optional int32 cap = 9;
inline bool City::has_cap() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void City::set_has_cap() {
  _has_bits_[0] |= 0x00000100u;
}
inline void City::clear_has_cap() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void City::clear_cap() {
  cap_ = 0;
  clear_has_cap();
}
inline ::google::protobuf::int32 City::cap() const {
  return cap_;
}
inline void City::set_cap(::google::protobuf::int32 value) {
  set_has_cap();
  cap_ = value;
}

// optional int32 maxCap = 10;
inline bool City::has_maxcap() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void City::set_has_maxcap() {
  _has_bits_[0] |= 0x00000200u;
}
inline void City::clear_has_maxcap() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void City::clear_maxcap() {
  maxcap_ = 0;
  clear_has_maxcap();
}
inline ::google::protobuf::int32 City::maxcap() const {
  return maxcap_;
}
inline void City::set_maxcap(::google::protobuf::int32 value) {
  set_has_maxcap();
  maxcap_ = value;
}

// optional int32 heroNum = 11;
inline bool City::has_heronum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void City::set_has_heronum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void City::clear_has_heronum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void City::clear_heronum() {
  heronum_ = 0;
  clear_has_heronum();
}
inline ::google::protobuf::int32 City::heronum() const {
  return heronum_;
}
inline void City::set_heronum(::google::protobuf::int32 value) {
  set_has_heronum();
  heronum_ = value;
}

// optional int32 hero = 15;
inline bool City::has_hero() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void City::set_has_hero() {
  _has_bits_[0] |= 0x00000800u;
}
inline void City::clear_has_hero() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void City::clear_hero() {
  hero_ = 0;
  clear_has_hero();
}
inline ::google::protobuf::int32 City::hero() const {
  return hero_;
}
inline void City::set_hero(::google::protobuf::int32 value) {
  set_has_hero();
  hero_ = value;
}

// repeated .protos.common.Hero heroList = 12;
inline int City::herolist_size() const {
  return herolist_.size();
}
inline void City::clear_herolist() {
  herolist_.Clear();
}
inline const ::protos::common::Hero& City::herolist(int index) const {
  return herolist_.Get(index);
}
inline ::protos::common::Hero* City::mutable_herolist(int index) {
  return herolist_.Mutable(index);
}
inline ::protos::common::Hero* City::add_herolist() {
  return herolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Hero >&
City::herolist() const {
  return herolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Hero >*
City::mutable_herolist() {
  return &herolist_;
}

// optional bool capFull = 14;
inline bool City::has_capfull() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void City::set_has_capfull() {
  _has_bits_[0] |= 0x00002000u;
}
inline void City::clear_has_capfull() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void City::clear_capfull() {
  capfull_ = false;
  clear_has_capfull();
}
inline bool City::capfull() const {
  return capfull_;
}
inline void City::set_capfull(bool value) {
  set_has_capfull();
  capfull_ = value;
}

// optional string note = 16;
inline bool City::has_note() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void City::set_has_note() {
  _has_bits_[0] |= 0x00004000u;
}
inline void City::clear_has_note() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void City::clear_note() {
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    note_->clear();
  }
  clear_has_note();
}
inline const ::std::string& City::note() const {
  return *note_;
}
inline void City::set_note(const ::std::string& value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void City::set_note(const char* value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void City::set_note(const char* value, size_t size) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* City::mutable_note() {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  return note_;
}
inline ::std::string* City::release_note() {
  clear_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = note_;
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void City::set_allocated_note(::std::string* note) {
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (note) {
    set_has_note();
    note_ = note;
  } else {
    clear_has_note();
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isOpen = 17;
inline bool City::has_isopen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void City::set_has_isopen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void City::clear_has_isopen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void City::clear_isopen() {
  isopen_ = false;
  clear_has_isopen();
}
inline bool City::isopen() const {
  return isopen_;
}
inline void City::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fcity_5fcommon_2eproto__INCLUDED
