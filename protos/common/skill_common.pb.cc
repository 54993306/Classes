// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/skill_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skill_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Buff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Buff_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fskill_5fcommon_2eproto() {
  protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/skill_common.proto");
  GOOGLE_CHECK(file != NULL);
  Skill_descriptor_ = file->message_type(0);
  static const int Skill_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, userate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, colddown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, pro_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, pro_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, multieff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, activequality_),
  };
  Skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_descriptor_,
      Skill::default_instance_,
      Skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill));
  Effect_descriptor_ = file->message_type(1);
  static const int Effect_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, userrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, pro_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, pro_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, batter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, repel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, erange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, bufflist_),
  };
  Effect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Effect_descriptor_,
      Effect::default_instance_,
      Effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Effect));
  Buff_descriptor_ = file->message_type(2);
  static const int Buff_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, damage_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, userate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, debuf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, element_),
  };
  Buff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Buff_descriptor_,
      Buff::default_instance_,
      Buff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Buff));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fskill_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_descriptor_, &Skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Effect_descriptor_, &Effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Buff_descriptor_, &Buff::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fskill_5fcommon_2eproto() {
  delete Skill::default_instance_;
  delete Skill_reflection_;
  delete Effect::default_instance_;
  delete Effect_reflection_;
  delete Buff::default_instance_;
  delete Buff_reflection_;
}

void protobuf_AddDesc_common_2fskill_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031common/skill_common.proto\022\rprotos.comm"
    "on\"\230\002\n\005Skill\022\017\n\007skillId\030\002 \001(\005\022\014\n\004name\030\003 "
    "\001(\t\022\014\n\004type\030\004 \001(\005\022\017\n\007useRate\030\005 \001(\005\022\014\n\004co"
    "st\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\022\014\n\004move\030\010 \001(\010\022\020\n"
    "\010maxLevel\030\021 \001(\005\022\020\n\010coldDown\030\022 \001(\005\022\016\n\006tar"
    "get\030\016 \001(\005\022\020\n\010pro_type\030\017 \001(\005\022\020\n\010pro_rate\030"
    "\020 \001(\005\022\020\n\010multiEff\030\023 \001(\005\022%\n\006effect\030\024 \003(\0132"
    "\025.protos.common.Effect\022\025\n\ractiveQuality\030"
    "\025 \001(\005\"\311\002\n\006Effect\022\020\n\010effectId\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\022\020\n\010userRate\030\003 \001(\005\022\014\n\004cost\030\004 \001(\021"
    "\022\016\n\006damage\030\005 \001(\021\022\014\n\004hurt\030\006 \001(\005\022\016\n\006target"
    "\030\007 \001(\005\022\r\n\005group\030\010 \001(\005\022\013\n\003pos\030\t \001(\005\022\020\n\010pr"
    "o_type\030\n \001(\005\022\020\n\010pro_rate\030\013 \001(\005\022\016\n\006batter"
    "\030\014 \001(\005\022\r\n\005repel\030\r \001(\021\022\016\n\006erange\030\016 \001(\005\022\014\n"
    "\004mode\030\017 \001(\005\022\014\n\004type\030\020 \001(\005\022\020\n\010distance\030\021 "
    "\001(\021\022\r\n\005range\030\022 \001(\005\022%\n\010buffList\030\023 \003(\0132\023.p"
    "rotos.common.Buff\"\271\001\n\004Buff\022\016\n\006buffId\030\001 \001"
    "(\005\022\014\n\004type\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\016\n\006damage"
    "\030\004 \001(\021\022\023\n\013damage_rate\030\005 \001(\005\022\017\n\007useRate\030\006"
    " \001(\005\022\r\n\005debuf\030\007 \001(\010\022\020\n\010duration\030\010 \001(\005\022\016\n"
    "\006target\030\t \001(\005\022\r\n\005level\030\n \001(\005\022\017\n\007element\030"
    "\013 \001(\005B5\n$dass.server.gameserver.protos.c"
    "ommonB\013SkillCommonH\001", 900);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/skill_common.proto", &protobuf_RegisterTypes);
  Skill::default_instance_ = new Skill();
  Effect::default_instance_ = new Effect();
  Buff::default_instance_ = new Buff();
  Skill::default_instance_->InitAsDefaultInstance();
  Effect::default_instance_->InitAsDefaultInstance();
  Buff::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fskill_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fskill_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2fskill_5fcommon_2eproto() {
    protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2fskill_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Skill::kSkillIdFieldNumber;
const int Skill::kNameFieldNumber;
const int Skill::kTypeFieldNumber;
const int Skill::kUseRateFieldNumber;
const int Skill::kCostFieldNumber;
const int Skill::kLevelFieldNumber;
const int Skill::kMoveFieldNumber;
const int Skill::kMaxLevelFieldNumber;
const int Skill::kColdDownFieldNumber;
const int Skill::kTargetFieldNumber;
const int Skill::kProTypeFieldNumber;
const int Skill::kProRateFieldNumber;
const int Skill::kMultiEffFieldNumber;
const int Skill::kEffectFieldNumber;
const int Skill::kActiveQualityFieldNumber;
#endif  // !_MSC_VER

Skill::Skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill::InitAsDefaultInstance() {
}

Skill::Skill(const Skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  userate_ = 0;
  cost_ = 0;
  level_ = 0;
  move_ = false;
  maxlevel_ = 0;
  colddown_ = 0;
  target_ = 0;
  pro_type_ = 0;
  pro_rate_ = 0;
  multieff_ = 0;
  activequality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill::~Skill() {
  SharedDtor();
}

void Skill::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_descriptor_;
}

const Skill& Skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  return *default_instance_;
}

Skill* Skill::default_instance_ = NULL;

Skill* Skill::New() const {
  return new Skill;
}

void Skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    userate_ = 0;
    cost_ = 0;
    level_ = 0;
    move_ = false;
    maxlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    colddown_ = 0;
    target_ = 0;
    pro_type_ = 0;
    pro_rate_ = 0;
    multieff_ = 0;
    activequality_ = 0;
  }
  effect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useRate;
        break;
      }

      // optional int32 useRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userate_)));
          set_has_userate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cost;
        break;
      }

      // optional int32 cost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_move;
        break;
      }

      // optional bool move = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &move_)));
          set_has_move();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_target;
        break;
      }

      // optional int32 target = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pro_type;
        break;
      }

      // optional int32 pro_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_type_)));
          set_has_pro_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pro_rate;
        break;
      }

      // optional int32 pro_rate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_rate_)));
          set_has_pro_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_maxLevel;
        break;
      }

      // optional int32 maxLevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_coldDown;
        break;
      }

      // optional int32 coldDown = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coldDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colddown_)));
          set_has_colddown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_multiEff;
        break;
      }

      // optional int32 multiEff = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiEff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multieff_)));
          set_has_multieff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_effect;
        break;
      }

      // repeated .protos.common.Effect effect = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_effect;
        if (input->ExpectTag(168)) goto parse_activeQuality;
        break;
      }

      // optional int32 activeQuality = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activequality_)));
          set_has_activequality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 useRate = 5;
  if (has_userate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->userate(), output);
  }

  // optional int32 cost = 6;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cost(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional bool move = 8;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->move(), output);
  }

  // optional int32 target = 14;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->target(), output);
  }

  // optional int32 pro_type = 15;
  if (has_pro_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pro_type(), output);
  }

  // optional int32 pro_rate = 16;
  if (has_pro_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->pro_rate(), output);
  }

  // optional int32 maxLevel = 17;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->maxlevel(), output);
  }

  // optional int32 coldDown = 18;
  if (has_colddown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->colddown(), output);
  }

  // optional int32 multiEff = 19;
  if (has_multieff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->multieff(), output);
  }

  // repeated .protos.common.Effect effect = 20;
  for (int i = 0; i < this->effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->effect(i), output);
  }

  // optional int32 activeQuality = 21;
  if (has_activequality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->activequality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 useRate = 5;
  if (has_userate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->userate(), target);
  }

  // optional int32 cost = 6;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cost(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional bool move = 8;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->move(), target);
  }

  // optional int32 target = 14;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->target(), target);
  }

  // optional int32 pro_type = 15;
  if (has_pro_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pro_type(), target);
  }

  // optional int32 pro_rate = 16;
  if (has_pro_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->pro_rate(), target);
  }

  // optional int32 maxLevel = 17;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->maxlevel(), target);
  }

  // optional int32 coldDown = 18;
  if (has_colddown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->colddown(), target);
  }

  // optional int32 multiEff = 19;
  if (has_multieff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->multieff(), target);
  }

  // repeated .protos.common.Effect effect = 20;
  for (int i = 0; i < this->effect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->effect(i), target);
  }

  // optional int32 activeQuality = 21;
  if (has_activequality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->activequality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 useRate = 5;
    if (has_userate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userate());
    }

    // optional int32 cost = 6;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool move = 8;
    if (has_move()) {
      total_size += 1 + 1;
    }

    // optional int32 maxLevel = 17;
    if (has_maxlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 coldDown = 18;
    if (has_colddown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colddown());
    }

    // optional int32 target = 14;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 pro_type = 15;
    if (has_pro_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_type());
    }

    // optional int32 pro_rate = 16;
    if (has_pro_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_rate());
    }

    // optional int32 multiEff = 19;
    if (has_multieff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multieff());
    }

    // optional int32 activeQuality = 21;
    if (has_activequality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activequality());
    }

  }
  // repeated .protos.common.Effect effect = 20;
  total_size += 2 * this->effect_size();
  for (int i = 0; i < this->effect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill::MergeFrom(const Skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_.MergeFrom(from.effect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_userate()) {
      set_userate(from.userate());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_move()) {
      set_move(from.move());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_colddown()) {
      set_colddown(from.colddown());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_pro_type()) {
      set_pro_type(from.pro_type());
    }
    if (from.has_pro_rate()) {
      set_pro_rate(from.pro_rate());
    }
    if (from.has_multieff()) {
      set_multieff(from.multieff());
    }
    if (from.has_activequality()) {
      set_activequality(from.activequality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill::CopyFrom(const Skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {

  return true;
}

void Skill::Swap(Skill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(userate_, other->userate_);
    std::swap(cost_, other->cost_);
    std::swap(level_, other->level_);
    std::swap(move_, other->move_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(colddown_, other->colddown_);
    std::swap(target_, other->target_);
    std::swap(pro_type_, other->pro_type_);
    std::swap(pro_rate_, other->pro_rate_);
    std::swap(multieff_, other->multieff_);
    effect_.Swap(&other->effect_);
    std::swap(activequality_, other->activequality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_descriptor_;
  metadata.reflection = Skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Effect::kEffectIdFieldNumber;
const int Effect::kNameFieldNumber;
const int Effect::kUserRateFieldNumber;
const int Effect::kCostFieldNumber;
const int Effect::kDamageFieldNumber;
const int Effect::kHurtFieldNumber;
const int Effect::kTargetFieldNumber;
const int Effect::kGroupFieldNumber;
const int Effect::kPosFieldNumber;
const int Effect::kProTypeFieldNumber;
const int Effect::kProRateFieldNumber;
const int Effect::kBatterFieldNumber;
const int Effect::kRepelFieldNumber;
const int Effect::kErangeFieldNumber;
const int Effect::kModeFieldNumber;
const int Effect::kTypeFieldNumber;
const int Effect::kDistanceFieldNumber;
const int Effect::kRangeFieldNumber;
const int Effect::kBuffListFieldNumber;
#endif  // !_MSC_VER

Effect::Effect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Effect::InitAsDefaultInstance() {
}

Effect::Effect(const Effect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Effect::SharedCtor() {
  _cached_size_ = 0;
  effectid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userrate_ = 0;
  cost_ = 0;
  damage_ = 0;
  hurt_ = 0;
  target_ = 0;
  group_ = 0;
  pos_ = 0;
  pro_type_ = 0;
  pro_rate_ = 0;
  batter_ = 0;
  repel_ = 0;
  erange_ = 0;
  mode_ = 0;
  type_ = 0;
  distance_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Effect::~Effect() {
  SharedDtor();
}

void Effect::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Effect_descriptor_;
}

const Effect& Effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  return *default_instance_;
}

Effect* Effect::default_instance_ = NULL;

Effect* Effect::New() const {
  return new Effect;
}

void Effect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effectid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    userrate_ = 0;
    cost_ = 0;
    damage_ = 0;
    hurt_ = 0;
    target_ = 0;
    group_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pos_ = 0;
    pro_type_ = 0;
    pro_rate_ = 0;
    batter_ = 0;
    repel_ = 0;
    erange_ = 0;
    mode_ = 0;
    type_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    distance_ = 0;
    range_ = 0;
  }
  bufflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 effectId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userRate;
        break;
      }

      // optional int32 userRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userrate_)));
          set_has_userrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost;
        break;
      }

      // optional sint32 cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }

      // optional sint32 damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hurt;
        break;
      }

      // optional int32 hurt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_target;
        break;
      }

      // optional int32 target = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_group;
        break;
      }

      // optional int32 group = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pos;
        break;
      }

      // optional int32 pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pro_type;
        break;
      }

      // optional int32 pro_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_type_)));
          set_has_pro_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pro_rate;
        break;
      }

      // optional int32 pro_rate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_rate_)));
          set_has_pro_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_batter;
        break;
      }

      // optional int32 batter = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batter_)));
          set_has_batter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_repel;
        break;
      }

      // optional sint32 repel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &repel_)));
          set_has_repel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_erange;
        break;
      }

      // optional int32 erange = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_erange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &erange_)));
          set_has_erange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mode;
        break;
      }

      // optional int32 mode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_type;
        break;
      }

      // optional int32 type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_distance;
        break;
      }

      // optional sint32 distance = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_range;
        break;
      }

      // optional int32 range = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_buffList;
        break;
      }

      // repeated .protos.common.Buff buffList = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bufflist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_buffList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 effectId = 1;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->effectid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 userRate = 3;
  if (has_userrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userrate(), output);
  }

  // optional sint32 cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->cost(), output);
  }

  // optional sint32 damage = 5;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->damage(), output);
  }

  // optional int32 hurt = 6;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hurt(), output);
  }

  // optional int32 target = 7;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->target(), output);
  }

  // optional int32 group = 8;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->group(), output);
  }

  // optional int32 pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pos(), output);
  }

  // optional int32 pro_type = 10;
  if (has_pro_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pro_type(), output);
  }

  // optional int32 pro_rate = 11;
  if (has_pro_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pro_rate(), output);
  }

  // optional int32 batter = 12;
  if (has_batter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->batter(), output);
  }

  // optional sint32 repel = 13;
  if (has_repel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->repel(), output);
  }

  // optional int32 erange = 14;
  if (has_erange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->erange(), output);
  }

  // optional int32 mode = 15;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->mode(), output);
  }

  // optional int32 type = 16;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->type(), output);
  }

  // optional sint32 distance = 17;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->distance(), output);
  }

  // optional int32 range = 18;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->range(), output);
  }

  // repeated .protos.common.Buff buffList = 19;
  for (int i = 0; i < this->bufflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->bufflist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 effectId = 1;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->effectid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 userRate = 3;
  if (has_userrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userrate(), target);
  }

  // optional sint32 cost = 4;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->cost(), target);
  }

  // optional sint32 damage = 5;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->damage(), target);
  }

  // optional int32 hurt = 6;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hurt(), target);
  }

  // optional int32 target = 7;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->target(), target);
  }

  // optional int32 group = 8;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->group(), target);
  }

  // optional int32 pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pos(), target);
  }

  // optional int32 pro_type = 10;
  if (has_pro_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pro_type(), target);
  }

  // optional int32 pro_rate = 11;
  if (has_pro_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pro_rate(), target);
  }

  // optional int32 batter = 12;
  if (has_batter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->batter(), target);
  }

  // optional sint32 repel = 13;
  if (has_repel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->repel(), target);
  }

  // optional int32 erange = 14;
  if (has_erange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->erange(), target);
  }

  // optional int32 mode = 15;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->mode(), target);
  }

  // optional int32 type = 16;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->type(), target);
  }

  // optional sint32 distance = 17;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->distance(), target);
  }

  // optional int32 range = 18;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->range(), target);
  }

  // repeated .protos.common.Buff buffList = 19;
  for (int i = 0; i < this->bufflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->bufflist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Effect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 effectId = 1;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 userRate = 3;
    if (has_userrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userrate());
    }

    // optional sint32 cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->cost());
    }

    // optional sint32 damage = 5;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damage());
    }

    // optional int32 hurt = 6;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurt());
    }

    // optional int32 target = 7;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 group = 8;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 pro_type = 10;
    if (has_pro_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_type());
    }

    // optional int32 pro_rate = 11;
    if (has_pro_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_rate());
    }

    // optional int32 batter = 12;
    if (has_batter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batter());
    }

    // optional sint32 repel = 13;
    if (has_repel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->repel());
    }

    // optional int32 erange = 14;
    if (has_erange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->erange());
    }

    // optional int32 mode = 15;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 type = 16;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sint32 distance = 17;
    if (has_distance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->distance());
    }

    // optional int32 range = 18;
    if (has_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

  }
  // repeated .protos.common.Buff buffList = 19;
  total_size += 2 * this->bufflist_size();
  for (int i = 0; i < this->bufflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufflist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Effect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Effect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Effect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Effect::MergeFrom(const Effect& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufflist_.MergeFrom(from.bufflist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_userrate()) {
      set_userrate(from.userrate());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_pro_type()) {
      set_pro_type(from.pro_type());
    }
    if (from.has_pro_rate()) {
      set_pro_rate(from.pro_rate());
    }
    if (from.has_batter()) {
      set_batter(from.batter());
    }
    if (from.has_repel()) {
      set_repel(from.repel());
    }
    if (from.has_erange()) {
      set_erange(from.erange());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Effect::CopyFrom(const Effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Effect::IsInitialized() const {

  return true;
}

void Effect::Swap(Effect* other) {
  if (other != this) {
    std::swap(effectid_, other->effectid_);
    std::swap(name_, other->name_);
    std::swap(userrate_, other->userrate_);
    std::swap(cost_, other->cost_);
    std::swap(damage_, other->damage_);
    std::swap(hurt_, other->hurt_);
    std::swap(target_, other->target_);
    std::swap(group_, other->group_);
    std::swap(pos_, other->pos_);
    std::swap(pro_type_, other->pro_type_);
    std::swap(pro_rate_, other->pro_rate_);
    std::swap(batter_, other->batter_);
    std::swap(repel_, other->repel_);
    std::swap(erange_, other->erange_);
    std::swap(mode_, other->mode_);
    std::swap(type_, other->type_);
    std::swap(distance_, other->distance_);
    std::swap(range_, other->range_);
    bufflist_.Swap(&other->bufflist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Effect_descriptor_;
  metadata.reflection = Effect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Buff::kBuffIdFieldNumber;
const int Buff::kTypeFieldNumber;
const int Buff::kNameFieldNumber;
const int Buff::kDamageFieldNumber;
const int Buff::kDamageRateFieldNumber;
const int Buff::kUseRateFieldNumber;
const int Buff::kDebufFieldNumber;
const int Buff::kDurationFieldNumber;
const int Buff::kTargetFieldNumber;
const int Buff::kLevelFieldNumber;
const int Buff::kElementFieldNumber;
#endif  // !_MSC_VER

Buff::Buff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Buff::InitAsDefaultInstance() {
}

Buff::Buff(const Buff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Buff::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damage_ = 0;
  damage_rate_ = 0;
  userate_ = 0;
  debuf_ = false;
  duration_ = 0;
  target_ = 0;
  level_ = 0;
  element_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Buff::~Buff() {
  SharedDtor();
}

void Buff::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Buff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Buff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Buff_descriptor_;
}

const Buff& Buff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  return *default_instance_;
}

Buff* Buff::default_instance_ = NULL;

Buff* Buff::New() const {
  return new Buff;
}

void Buff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0;
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    damage_ = 0;
    damage_rate_ = 0;
    userate_ = 0;
    debuf_ = false;
    duration_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    target_ = 0;
    level_ = 0;
    element_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buffId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // optional sint32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage_rate;
        break;
      }

      // optional int32 damage_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_rate_)));
          set_has_damage_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_useRate;
        break;
      }

      // optional int32 useRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userate_)));
          set_has_userate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_debuf;
        break;
      }

      // optional bool debuf = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debuf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debuf_)));
          set_has_debuf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_duration;
        break;
      }

      // optional int32 duration = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_target;
        break;
      }

      // optional int32 target = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_level;
        break;
      }

      // optional int32 level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_element;
        break;
      }

      // optional int32 element = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &element_)));
          set_has_element();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buffId = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buffid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional sint32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->damage(), output);
  }

  // optional int32 damage_rate = 5;
  if (has_damage_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->damage_rate(), output);
  }

  // optional int32 useRate = 6;
  if (has_userate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->userate(), output);
  }

  // optional bool debuf = 7;
  if (has_debuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debuf(), output);
  }

  // optional int32 duration = 8;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->duration(), output);
  }

  // optional int32 target = 9;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->target(), output);
  }

  // optional int32 level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level(), output);
  }

  // optional int32 element = 11;
  if (has_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->element(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Buff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buffId = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buffid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional sint32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->damage(), target);
  }

  // optional int32 damage_rate = 5;
  if (has_damage_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->damage_rate(), target);
  }

  // optional int32 useRate = 6;
  if (has_userate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->userate(), target);
  }

  // optional bool debuf = 7;
  if (has_debuf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debuf(), target);
  }

  // optional int32 duration = 8;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->duration(), target);
  }

  // optional int32 target = 9;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->target(), target);
  }

  // optional int32 level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level(), target);
  }

  // optional int32 element = 11;
  if (has_element()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->element(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Buff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buffId = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sint32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damage());
    }

    // optional int32 damage_rate = 5;
    if (has_damage_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_rate());
    }

    // optional int32 useRate = 6;
    if (has_userate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userate());
    }

    // optional bool debuf = 7;
    if (has_debuf()) {
      total_size += 1 + 1;
    }

    // optional int32 duration = 8;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 target = 9;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 element = 11;
    if (has_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->element());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Buff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Buff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Buff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Buff::MergeFrom(const Buff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_damage_rate()) {
      set_damage_rate(from.damage_rate());
    }
    if (from.has_userate()) {
      set_userate(from.userate());
    }
    if (from.has_debuf()) {
      set_debuf(from.debuf());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_element()) {
      set_element(from.element());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Buff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Buff::CopyFrom(const Buff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buff::IsInitialized() const {

  return true;
}

void Buff::Swap(Buff* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(damage_, other->damage_);
    std::swap(damage_rate_, other->damage_rate_);
    std::swap(userate_, other->userate_);
    std::swap(debuf_, other->debuf_);
    std::swap(duration_, other->duration_);
    std::swap(target_, other->target_);
    std::swap(level_, other->level_);
    std::swap(element_, other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Buff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Buff_descriptor_;
  metadata.reflection = Buff_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

// @@protoc_insertion_point(global_scope)
