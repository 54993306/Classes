// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/trap_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trap_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Trap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2ftrap_5fcommon_2eproto() {
  protobuf_AddDesc_common_2ftrap_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/trap_common.proto");
  GOOGLE_CHECK(file != NULL);
  Trap_descriptor_ = file->message_type(0);
  static const int Trap_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, trapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, pro_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, pro_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, touch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, batch_),
  };
  Trap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trap_descriptor_,
      Trap::default_instance_,
      Trap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2ftrap_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trap_descriptor_, &Trap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2ftrap_5fcommon_2eproto() {
  delete Trap::default_instance_;
  delete Trap_reflection_;
}

void protobuf_AddDesc_common_2ftrap_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030common/trap_common.proto\022\rprotos.commo"
    "n\032\031common/skill_common.proto\"\336\001\n\004Trap\022\n\n"
    "\002id\030\001 \001(\005\022\016\n\006trapId\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022"
    "\014\n\004type\030\004 \001(\005\022\016\n\006damage\030\005 \001(\005\022\r\n\005round\030\006"
    " \001(\005\022\014\n\004posX\030\007 \001(\005\022\014\n\004posY\030\010 \001(\005\022\020\n\010pro_"
    "type\030\t \001(\005\022\020\n\010pro_rate\030\n \001(\021\022\r\n\005touch\030\013 "
    "\001(\005\022!\n\004buff\030\014 \001(\0132\023.protos.common.Buff\022\r"
    "\n\005batch\030\r \001(\005B5\n%anvin.server.gameserver"
    ".protos.commonB\nTrapCommonH\001", 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/trap_common.proto", &protobuf_RegisterTypes);
  Trap::default_instance_ = new Trap();
  Trap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2ftrap_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2ftrap_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2ftrap_5fcommon_2eproto() {
    protobuf_AddDesc_common_2ftrap_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2ftrap_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Trap::kIdFieldNumber;
const int Trap::kTrapIdFieldNumber;
const int Trap::kNameFieldNumber;
const int Trap::kTypeFieldNumber;
const int Trap::kDamageFieldNumber;
const int Trap::kRoundFieldNumber;
const int Trap::kPosXFieldNumber;
const int Trap::kPosYFieldNumber;
const int Trap::kProTypeFieldNumber;
const int Trap::kProRateFieldNumber;
const int Trap::kTouchFieldNumber;
const int Trap::kBuffFieldNumber;
const int Trap::kBatchFieldNumber;
#endif  // !_MSC_VER

Trap::Trap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trap::InitAsDefaultInstance() {
  buff_ = const_cast< ::protos::common::Buff*>(&::protos::common::Buff::default_instance());
}

Trap::Trap(const Trap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trap::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  trapid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  damage_ = 0;
  round_ = 0;
  posx_ = 0;
  posy_ = 0;
  pro_type_ = 0;
  pro_rate_ = 0;
  touch_ = 0;
  buff_ = NULL;
  batch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trap::~Trap() {
  SharedDtor();
}

void Trap::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete buff_;
  }
}

void Trap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trap_descriptor_;
}

const Trap& Trap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2ftrap_5fcommon_2eproto();
  return *default_instance_;
}

Trap* Trap::default_instance_ = NULL;

Trap* Trap::New() const {
  return new Trap;
}

void Trap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    trapid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    damage_ = 0;
    round_ = 0;
    posx_ = 0;
    posy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pro_type_ = 0;
    pro_rate_ = 0;
    touch_ = 0;
    if (has_buff()) {
      if (buff_ != NULL) buff_->::protos::common::Buff::Clear();
    }
    batch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trapId;
        break;
      }

      // optional int32 trapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trapid_)));
          set_has_trapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }

      // optional int32 damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_round;
        break;
      }

      // optional int32 round = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_posX;
        break;
      }

      // optional int32 posX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_posY;
        break;
      }

      // optional int32 posY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pro_type;
        break;
      }

      // optional int32 pro_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_type_)));
          set_has_pro_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pro_rate;
        break;
      }

      // optional sint32 pro_rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &pro_rate_)));
          set_has_pro_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_touch;
        break;
      }

      // optional int32 touch = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &touch_)));
          set_has_touch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_buff;
        break;
      }

      // optional .protos.common.Buff buff = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_batch;
        break;
      }

      // optional int32 batch = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_)));
          set_has_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 trapId = 2;
  if (has_trapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trapid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 damage = 5;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->damage(), output);
  }

  // optional int32 round = 6;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->round(), output);
  }

  // optional int32 posX = 7;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->posx(), output);
  }

  // optional int32 posY = 8;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->posy(), output);
  }

  // optional int32 pro_type = 9;
  if (has_pro_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pro_type(), output);
  }

  // optional sint32 pro_rate = 10;
  if (has_pro_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->pro_rate(), output);
  }

  // optional int32 touch = 11;
  if (has_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->touch(), output);
  }

  // optional .protos.common.Buff buff = 12;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->buff(), output);
  }

  // optional int32 batch = 13;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->batch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 trapId = 2;
  if (has_trapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trapid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 damage = 5;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->damage(), target);
  }

  // optional int32 round = 6;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->round(), target);
  }

  // optional int32 posX = 7;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->posx(), target);
  }

  // optional int32 posY = 8;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->posy(), target);
  }

  // optional int32 pro_type = 9;
  if (has_pro_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pro_type(), target);
  }

  // optional sint32 pro_rate = 10;
  if (has_pro_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->pro_rate(), target);
  }

  // optional int32 touch = 11;
  if (has_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->touch(), target);
  }

  // optional .protos.common.Buff buff = 12;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->buff(), target);
  }

  // optional int32 batch = 13;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->batch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 trapId = 2;
    if (has_trapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trapid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 damage = 5;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 round = 6;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional int32 posX = 7;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posY = 8;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pro_type = 9;
    if (has_pro_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_type());
    }

    // optional sint32 pro_rate = 10;
    if (has_pro_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->pro_rate());
    }

    // optional int32 touch = 11;
    if (has_touch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->touch());
    }

    // optional .protos.common.Buff buff = 12;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // optional int32 batch = 13;
    if (has_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trap::MergeFrom(const Trap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_trapid()) {
      set_trapid(from.trapid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pro_type()) {
      set_pro_type(from.pro_type());
    }
    if (from.has_pro_rate()) {
      set_pro_rate(from.pro_rate());
    }
    if (from.has_touch()) {
      set_touch(from.touch());
    }
    if (from.has_buff()) {
      mutable_buff()->::protos::common::Buff::MergeFrom(from.buff());
    }
    if (from.has_batch()) {
      set_batch(from.batch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trap::CopyFrom(const Trap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trap::IsInitialized() const {

  return true;
}

void Trap::Swap(Trap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(trapid_, other->trapid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(damage_, other->damage_);
    std::swap(round_, other->round_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(pro_type_, other->pro_type_);
    std::swap(pro_rate_, other->pro_rate_);
    std::swap(touch_, other->touch_);
    std::swap(buff_, other->buff_);
    std::swap(batch_, other->batch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trap_descriptor_;
  metadata.reflection = Trap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

// @@protoc_insertion_point(global_scope)
