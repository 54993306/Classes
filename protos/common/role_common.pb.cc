// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/role_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2frole_5fcommon_2eproto() {
  protobuf_AddDesc_common_2frole_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/role_common.proto");
  GOOGLE_CHECK(file != NULL);
  Role_descriptor_ = file->message_type(0);
  static const int Role_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolenation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, fbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, roleexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, nextexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolegold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolefood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolefcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, rolepoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, roleaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, actionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, actiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, newerstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, mobileshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, invitefriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, firstlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, goolebilling_),
  };
  Role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2frole_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_descriptor_, &Role::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2frole_5fcommon_2eproto() {
  delete Role::default_instance_;
  delete Role_reflection_;
}

void protobuf_AddDesc_common_2frole_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030common/role_common.proto\022\rprotos.commo"
    "n\"\316\003\n\004Role\022\016\n\006roleId\030\001 \002(\005\022\020\n\010roleName\030\002"
    " \001(\t\022\016\n\006roleLv\030\003 \001(\005\022\022\n\nroleNation\030\004 \001(\005"
    "\022\013\n\003vip\030\021 \001(\005\022\016\n\006combat\030\020 \001(\005\022\r\n\005thumb\030\024"
    " \001(\005\022\014\n\004fbId\030\005 \001(\t\022\017\n\007roleExp\030\n \001(\005\022\017\n\007n"
    "extExp\030\014 \001(\005\022\021\n\troleMoney\030\006 \001(\005\022\020\n\010roleC"
    "oin\030\013 \001(\005\022\020\n\010roleGold\030\016 \001(\005\022\020\n\010roleFood\030"
    "\017 \001(\005\022\021\n\troleFCoin\030\022 \001(\005\022\022\n\nrolePoints\030\026"
    " \001(\005\022\022\n\nroleAction\030\r \001(\005\022\023\n\013actionLimit\030"
    "\023 \001(\005\022\022\n\nactionTime\030\025 \001(\006\022\020\n\010interval\030\027 "
    "\001(\005\022\021\n\tnewerStep\030\030 \001(\005\022\022\n\nmobileShop\030\031 \001"
    "(\010\022\024\n\014inviteFriend\030\032 \001(\005\022\022\n\nfirstLogin\030\033"
    " \001(\010\022\024\n\014gooleBilling\030\034 \001(\010B4\n$dass.serve"
    "r.gameserver.protos.commonB\nRoleCommonH\001", 560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/role_common.proto", &protobuf_RegisterTypes);
  Role::default_instance_ = new Role();
  Role::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2frole_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2frole_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2frole_5fcommon_2eproto() {
    protobuf_AddDesc_common_2frole_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2frole_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Role::kRoleIdFieldNumber;
const int Role::kRoleNameFieldNumber;
const int Role::kRoleLvFieldNumber;
const int Role::kRoleNationFieldNumber;
const int Role::kVipFieldNumber;
const int Role::kCombatFieldNumber;
const int Role::kThumbFieldNumber;
const int Role::kFbIdFieldNumber;
const int Role::kRoleExpFieldNumber;
const int Role::kNextExpFieldNumber;
const int Role::kRoleMoneyFieldNumber;
const int Role::kRoleCoinFieldNumber;
const int Role::kRoleGoldFieldNumber;
const int Role::kRoleFoodFieldNumber;
const int Role::kRoleFCoinFieldNumber;
const int Role::kRolePointsFieldNumber;
const int Role::kRoleActionFieldNumber;
const int Role::kActionLimitFieldNumber;
const int Role::kActionTimeFieldNumber;
const int Role::kIntervalFieldNumber;
const int Role::kNewerStepFieldNumber;
const int Role::kMobileShopFieldNumber;
const int Role::kInviteFriendFieldNumber;
const int Role::kFirstLoginFieldNumber;
const int Role::kGooleBillingFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Role::InitAsDefaultInstance() {
}

Role::Role(const Role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Role::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelv_ = 0;
  rolenation_ = 0;
  vip_ = 0;
  combat_ = 0;
  thumb_ = 0;
  fbid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleexp_ = 0;
  nextexp_ = 0;
  rolemoney_ = 0;
  rolecoin_ = 0;
  rolegold_ = 0;
  rolefood_ = 0;
  rolefcoin_ = 0;
  rolepoints_ = 0;
  roleaction_ = 0;
  actionlimit_ = 0;
  actiontime_ = GOOGLE_ULONGLONG(0);
  interval_ = 0;
  newerstep_ = 0;
  mobileshop_ = false;
  invitefriend_ = 0;
  firstlogin_ = false;
  goolebilling_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  SharedDtor();
}

void Role::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (fbid_ != &::google::protobuf::internal::kEmptyString) {
    delete fbid_;
  }
  if (this != default_instance_) {
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2frole_5fcommon_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolelv_ = 0;
    rolenation_ = 0;
    vip_ = 0;
    combat_ = 0;
    thumb_ = 0;
    if (has_fbid()) {
      if (fbid_ != &::google::protobuf::internal::kEmptyString) {
        fbid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    roleexp_ = 0;
    nextexp_ = 0;
    rolemoney_ = 0;
    rolecoin_ = 0;
    rolegold_ = 0;
    rolefood_ = 0;
    rolefcoin_ = 0;
    rolepoints_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    roleaction_ = 0;
    actionlimit_ = 0;
    actiontime_ = GOOGLE_ULONGLONG(0);
    interval_ = 0;
    newerstep_ = 0;
    mobileshop_ = false;
    invitefriend_ = 0;
    firstlogin_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    goolebilling_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleLv;
        break;
      }

      // optional int32 roleLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelv_)));
          set_has_rolelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleNation;
        break;
      }

      // optional int32 roleNation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleNation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolenation_)));
          set_has_rolenation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fbId;
        break;
      }

      // optional string fbId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fbId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fbid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fbid().data(), this->fbid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleMoney;
        break;
      }

      // optional int32 roleMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolemoney_)));
          set_has_rolemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_roleExp;
        break;
      }

      // optional int32 roleExp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleexp_)));
          set_has_roleexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_roleCoin;
        break;
      }

      // optional int32 roleCoin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolecoin_)));
          set_has_rolecoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nextExp;
        break;
      }

      // optional int32 nextExp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextexp_)));
          set_has_nextexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_roleAction;
        break;
      }

      // optional int32 roleAction = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleaction_)));
          set_has_roleaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_roleGold;
        break;
      }

      // optional int32 roleGold = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolegold_)));
          set_has_rolegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_roleFood;
        break;
      }

      // optional int32 roleFood = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleFood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolefood_)));
          set_has_rolefood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_combat;
        break;
      }

      // optional int32 combat = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_vip;
        break;
      }

      // optional int32 vip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_roleFCoin;
        break;
      }

      // optional int32 roleFCoin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleFCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolefcoin_)));
          set_has_rolefcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_actionLimit;
        break;
      }

      // optional int32 actionLimit = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionlimit_)));
          set_has_actionlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_thumb;
        break;
      }

      // optional int32 thumb = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumb_)));
          set_has_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_actionTime;
        break;
      }

      // optional fixed64 actionTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_actionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actiontime_)));
          set_has_actiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_rolePoints;
        break;
      }

      // optional int32 rolePoints = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolePoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolepoints_)));
          set_has_rolepoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_interval;
        break;
      }

      // optional int32 interval = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_newerStep;
        break;
      }

      // optional int32 newerStep = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newerStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newerstep_)));
          set_has_newerstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_mobileShop;
        break;
      }

      // optional bool mobileShop = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobileShop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobileshop_)));
          set_has_mobileshop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_inviteFriend;
        break;
      }

      // optional int32 inviteFriend = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invitefriend_)));
          set_has_invitefriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_firstLogin;
        break;
      }

      // optional bool firstLogin = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstlogin_)));
          set_has_firstlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_gooleBilling;
        break;
      }

      // optional bool gooleBilling = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gooleBilling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &goolebilling_)));
          set_has_goolebilling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // optional int32 roleLv = 3;
  if (has_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rolelv(), output);
  }

  // optional int32 roleNation = 4;
  if (has_rolenation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rolenation(), output);
  }

  // optional string fbId = 5;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fbid().data(), this->fbid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fbid(), output);
  }

  // optional int32 roleMoney = 6;
  if (has_rolemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rolemoney(), output);
  }

  // optional int32 roleExp = 10;
  if (has_roleexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->roleexp(), output);
  }

  // optional int32 roleCoin = 11;
  if (has_rolecoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rolecoin(), output);
  }

  // optional int32 nextExp = 12;
  if (has_nextexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nextexp(), output);
  }

  // optional int32 roleAction = 13;
  if (has_roleaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->roleaction(), output);
  }

  // optional int32 roleGold = 14;
  if (has_rolegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rolegold(), output);
  }

  // optional int32 roleFood = 15;
  if (has_rolefood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->rolefood(), output);
  }

  // optional int32 combat = 16;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->combat(), output);
  }

  // optional int32 vip = 17;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->vip(), output);
  }

  // optional int32 roleFCoin = 18;
  if (has_rolefcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->rolefcoin(), output);
  }

  // optional int32 actionLimit = 19;
  if (has_actionlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->actionlimit(), output);
  }

  // optional int32 thumb = 20;
  if (has_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->thumb(), output);
  }

  // optional fixed64 actionTime = 21;
  if (has_actiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(21, this->actiontime(), output);
  }

  // optional int32 rolePoints = 22;
  if (has_rolepoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->rolepoints(), output);
  }

  // optional int32 interval = 23;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->interval(), output);
  }

  // optional int32 newerStep = 24;
  if (has_newerstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->newerstep(), output);
  }

  // optional bool mobileShop = 25;
  if (has_mobileshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->mobileshop(), output);
  }

  // optional int32 inviteFriend = 26;
  if (has_invitefriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->invitefriend(), output);
  }

  // optional bool firstLogin = 27;
  if (has_firstlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->firstlogin(), output);
  }

  // optional bool gooleBilling = 28;
  if (has_goolebilling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->goolebilling(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // optional int32 roleLv = 3;
  if (has_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rolelv(), target);
  }

  // optional int32 roleNation = 4;
  if (has_rolenation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rolenation(), target);
  }

  // optional string fbId = 5;
  if (has_fbid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fbid().data(), this->fbid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fbid(), target);
  }

  // optional int32 roleMoney = 6;
  if (has_rolemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rolemoney(), target);
  }

  // optional int32 roleExp = 10;
  if (has_roleexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->roleexp(), target);
  }

  // optional int32 roleCoin = 11;
  if (has_rolecoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rolecoin(), target);
  }

  // optional int32 nextExp = 12;
  if (has_nextexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nextexp(), target);
  }

  // optional int32 roleAction = 13;
  if (has_roleaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->roleaction(), target);
  }

  // optional int32 roleGold = 14;
  if (has_rolegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rolegold(), target);
  }

  // optional int32 roleFood = 15;
  if (has_rolefood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->rolefood(), target);
  }

  // optional int32 combat = 16;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->combat(), target);
  }

  // optional int32 vip = 17;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->vip(), target);
  }

  // optional int32 roleFCoin = 18;
  if (has_rolefcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->rolefcoin(), target);
  }

  // optional int32 actionLimit = 19;
  if (has_actionlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->actionlimit(), target);
  }

  // optional int32 thumb = 20;
  if (has_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->thumb(), target);
  }

  // optional fixed64 actionTime = 21;
  if (has_actiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(21, this->actiontime(), target);
  }

  // optional int32 rolePoints = 22;
  if (has_rolepoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->rolepoints(), target);
  }

  // optional int32 interval = 23;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->interval(), target);
  }

  // optional int32 newerStep = 24;
  if (has_newerstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->newerstep(), target);
  }

  // optional bool mobileShop = 25;
  if (has_mobileshop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->mobileshop(), target);
  }

  // optional int32 inviteFriend = 26;
  if (has_invitefriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->invitefriend(), target);
  }

  // optional bool firstLogin = 27;
  if (has_firstlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->firstlogin(), target);
  }

  // optional bool gooleBilling = 28;
  if (has_goolebilling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->goolebilling(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 roleLv = 3;
    if (has_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelv());
    }

    // optional int32 roleNation = 4;
    if (has_rolenation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolenation());
    }

    // optional int32 vip = 17;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 combat = 16;
    if (has_combat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

    // optional int32 thumb = 20;
    if (has_thumb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thumb());
    }

    // optional string fbId = 5;
    if (has_fbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fbid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 roleExp = 10;
    if (has_roleexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleexp());
    }

    // optional int32 nextExp = 12;
    if (has_nextexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextexp());
    }

    // optional int32 roleMoney = 6;
    if (has_rolemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolemoney());
    }

    // optional int32 roleCoin = 11;
    if (has_rolecoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolecoin());
    }

    // optional int32 roleGold = 14;
    if (has_rolegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolegold());
    }

    // optional int32 roleFood = 15;
    if (has_rolefood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolefood());
    }

    // optional int32 roleFCoin = 18;
    if (has_rolefcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolefcoin());
    }

    // optional int32 rolePoints = 22;
    if (has_rolepoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolepoints());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 roleAction = 13;
    if (has_roleaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleaction());
    }

    // optional int32 actionLimit = 19;
    if (has_actionlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionlimit());
    }

    // optional fixed64 actionTime = 21;
    if (has_actiontime()) {
      total_size += 2 + 8;
    }

    // optional int32 interval = 23;
    if (has_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // optional int32 newerStep = 24;
    if (has_newerstep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newerstep());
    }

    // optional bool mobileShop = 25;
    if (has_mobileshop()) {
      total_size += 2 + 1;
    }

    // optional int32 inviteFriend = 26;
    if (has_invitefriend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invitefriend());
    }

    // optional bool firstLogin = 27;
    if (has_firstlogin()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool gooleBilling = 28;
    if (has_goolebilling()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolelv()) {
      set_rolelv(from.rolelv());
    }
    if (from.has_rolenation()) {
      set_rolenation(from.rolenation());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
    if (from.has_thumb()) {
      set_thumb(from.thumb());
    }
    if (from.has_fbid()) {
      set_fbid(from.fbid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roleexp()) {
      set_roleexp(from.roleexp());
    }
    if (from.has_nextexp()) {
      set_nextexp(from.nextexp());
    }
    if (from.has_rolemoney()) {
      set_rolemoney(from.rolemoney());
    }
    if (from.has_rolecoin()) {
      set_rolecoin(from.rolecoin());
    }
    if (from.has_rolegold()) {
      set_rolegold(from.rolegold());
    }
    if (from.has_rolefood()) {
      set_rolefood(from.rolefood());
    }
    if (from.has_rolefcoin()) {
      set_rolefcoin(from.rolefcoin());
    }
    if (from.has_rolepoints()) {
      set_rolepoints(from.rolepoints());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_roleaction()) {
      set_roleaction(from.roleaction());
    }
    if (from.has_actionlimit()) {
      set_actionlimit(from.actionlimit());
    }
    if (from.has_actiontime()) {
      set_actiontime(from.actiontime());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_newerstep()) {
      set_newerstep(from.newerstep());
    }
    if (from.has_mobileshop()) {
      set_mobileshop(from.mobileshop());
    }
    if (from.has_invitefriend()) {
      set_invitefriend(from.invitefriend());
    }
    if (from.has_firstlogin()) {
      set_firstlogin(from.firstlogin());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_goolebilling()) {
      set_goolebilling(from.goolebilling());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolelv_, other->rolelv_);
    std::swap(rolenation_, other->rolenation_);
    std::swap(vip_, other->vip_);
    std::swap(combat_, other->combat_);
    std::swap(thumb_, other->thumb_);
    std::swap(fbid_, other->fbid_);
    std::swap(roleexp_, other->roleexp_);
    std::swap(nextexp_, other->nextexp_);
    std::swap(rolemoney_, other->rolemoney_);
    std::swap(rolecoin_, other->rolecoin_);
    std::swap(rolegold_, other->rolegold_);
    std::swap(rolefood_, other->rolefood_);
    std::swap(rolefcoin_, other->rolefcoin_);
    std::swap(rolepoints_, other->rolepoints_);
    std::swap(roleaction_, other->roleaction_);
    std::swap(actionlimit_, other->actionlimit_);
    std::swap(actiontime_, other->actiontime_);
    std::swap(interval_, other->interval_);
    std::swap(newerstep_, other->newerstep_);
    std::swap(mobileshop_, other->mobileshop_);
    std::swap(invitefriend_, other->invitefriend_);
    std::swap(firstlogin_, other->firstlogin_);
    std::swap(goolebilling_, other->goolebilling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

// @@protoc_insertion_point(global_scope)
