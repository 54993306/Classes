// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/task_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2ftask_5fcommon_2eproto() {
  protobuf_AddDesc_common_2ftask_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/task_common.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, tindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, gettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, end_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2ftask_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2ftask_5fcommon_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
}

void protobuf_AddDesc_common_2ftask_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030common/task_common.proto\022\rprotos.commo"
    "n\032\031common/prize_common.proto\"\233\002\n\004Task\022\016\n"
    "\006taskId\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001"
    "(\005\022\017\n\007process\030\004 \001(\005\022\016\n\006target\030\005 \001(\005\022\013\n\003e"
    "xp\030\006 \001(\005\022\014\n\004coin\030\007 \001(\005\022\014\n\004food\030\010 \001(\005\022\014\n\004"
    "note\030\t \001(\t\022\r\n\005isNew\030\n \001(\010\022\016\n\006finish\030\013 \001("
    "\010\022#\n\005prize\030\014 \003(\0132\024.protos.common.Prize\022\016"
    "\n\006tindex\030\r \001(\005\022\016\n\006action\030\016 \001(\005\022\014\n\004gold\030\017"
    " \001(\005\022\017\n\007getTime\030\020 \001(\006\022\013\n\003end\030\021 \001(\010B4\n$da"
    "ss.server.gameserver.protos.commonB\nTask"
    "CommonH\001", 408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/task_common.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  Task::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2ftask_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2ftask_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2ftask_5fcommon_2eproto() {
    protobuf_AddDesc_common_2ftask_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2ftask_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Task::kTaskIdFieldNumber;
const int Task::kNameFieldNumber;
const int Task::kLevelFieldNumber;
const int Task::kProcessFieldNumber;
const int Task::kTargetFieldNumber;
const int Task::kExpFieldNumber;
const int Task::kCoinFieldNumber;
const int Task::kFoodFieldNumber;
const int Task::kNoteFieldNumber;
const int Task::kIsNewFieldNumber;
const int Task::kFinishFieldNumber;
const int Task::kPrizeFieldNumber;
const int Task::kTindexFieldNumber;
const int Task::kActionFieldNumber;
const int Task::kGoldFieldNumber;
const int Task::kGetTimeFieldNumber;
const int Task::kEndFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  process_ = 0;
  target_ = 0;
  exp_ = 0;
  coin_ = 0;
  food_ = 0;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isnew_ = false;
  finish_ = false;
  tindex_ = 0;
  action_ = 0;
  gold_ = 0;
  gettime_ = GOOGLE_ULONGLONG(0);
  end_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2ftask_5fcommon_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    process_ = 0;
    target_ = 0;
    exp_ = 0;
    coin_ = 0;
    food_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::kEmptyString) {
        note_->clear();
      }
    }
    isnew_ = false;
    finish_ = false;
    tindex_ = 0;
    action_ = 0;
    gold_ = 0;
    gettime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    end_ = false;
  }
  prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_process;
        break;
      }

      // optional int32 process = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_target;
        break;
      }

      // optional int32 target = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_coin;
        break;
      }

      // optional int32 coin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_food;
        break;
      }

      // optional int32 food = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_note;
        break;
      }

      // optional string note = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isNew;
        break;
      }

      // optional bool isNew = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_finish;
        break;
      }

      // optional bool finish = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_prize;
        break;
      }

      // repeated .protos.common.Prize prize = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_prize;
        if (input->ExpectTag(104)) goto parse_tindex;
        break;
      }

      // optional int32 tindex = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tindex_)));
          set_has_tindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_action;
        break;
      }

      // optional int32 action = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_gold;
        break;
      }

      // optional int32 gold = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_getTime;
        break;
      }

      // optional fixed64 getTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_getTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gettime_)));
          set_has_gettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_end;
        break;
      }

      // optional bool end = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 process = 4;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->process(), output);
  }

  // optional int32 target = 5;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->target(), output);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }

  // optional int32 coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->coin(), output);
  }

  // optional int32 food = 8;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->food(), output);
  }

  // optional string note = 9;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->note(), output);
  }

  // optional bool isNew = 10;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isnew(), output);
  }

  // optional bool finish = 11;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->finish(), output);
  }

  // repeated .protos.common.Prize prize = 12;
  for (int i = 0; i < this->prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->prize(i), output);
  }

  // optional int32 tindex = 13;
  if (has_tindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tindex(), output);
  }

  // optional int32 action = 14;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->action(), output);
  }

  // optional int32 gold = 15;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gold(), output);
  }

  // optional fixed64 getTime = 16;
  if (has_gettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(16, this->gettime(), output);
  }

  // optional bool end = 17;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 process = 4;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->process(), target);
  }

  // optional int32 target = 5;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->target(), target);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }

  // optional int32 coin = 7;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->coin(), target);
  }

  // optional int32 food = 8;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->food(), target);
  }

  // optional string note = 9;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->note(), target);
  }

  // optional bool isNew = 10;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isnew(), target);
  }

  // optional bool finish = 11;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->finish(), target);
  }

  // repeated .protos.common.Prize prize = 12;
  for (int i = 0; i < this->prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->prize(i), target);
  }

  // optional int32 tindex = 13;
  if (has_tindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tindex(), target);
  }

  // optional int32 action = 14;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->action(), target);
  }

  // optional int32 gold = 15;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gold(), target);
  }

  // optional fixed64 getTime = 16;
  if (has_gettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(16, this->gettime(), target);
  }

  // optional bool end = 17;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 process = 4;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process());
    }

    // optional int32 target = 5;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 food = 8;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->food());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string note = 9;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

    // optional bool isNew = 10;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // optional bool finish = 11;
    if (has_finish()) {
      total_size += 1 + 1;
    }

    // optional int32 tindex = 13;
    if (has_tindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tindex());
    }

    // optional int32 action = 14;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // optional int32 gold = 15;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional fixed64 getTime = 16;
    if (has_gettime()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool end = 17;
    if (has_end()) {
      total_size += 2 + 1;
    }

  }
  // repeated .protos.common.Prize prize = 12;
  total_size += 1 * this->prize_size();
  for (int i = 0; i < this->prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_.MergeFrom(from.prize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_note()) {
      set_note(from.note());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_tindex()) {
      set_tindex(from.tindex());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_gettime()) {
      set_gettime(from.gettime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {

  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(process_, other->process_);
    std::swap(target_, other->target_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(food_, other->food_);
    std::swap(note_, other->note_);
    std::swap(isnew_, other->isnew_);
    std::swap(finish_, other->finish_);
    prize_.Swap(&other->prize_);
    std::swap(tindex_, other->tindex_);
    std::swap(action_, other->action_);
    std::swap(gold_, other->gold_);
    std::swap(gettime_, other->gettime_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

// @@protoc_insertion_point(global_scope)
