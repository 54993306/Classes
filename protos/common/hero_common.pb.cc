// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/hero_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hero_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hero_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fhero_5fcommon_2eproto() {
  protobuf_AddDesc_common_2fhero_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/hero_common.proto");
  GOOGLE_CHECK(file != NULL);
  Hero_descriptor_ = file->message_type(0);
  static const int Hero_offsets_[61] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, colddown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, atkinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, renew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, dex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, addhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, addatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, adddef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, addhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, addcrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, adddodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, addrenew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, adddex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, initcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, usecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, addcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, movecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, maxcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, nextexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, herotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, maxquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, itemnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, itemnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, own_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, alertrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, skill1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, skill2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, skill3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, skill4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, skill5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, armor1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, armor2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, armor3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, armor4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, armor5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, prate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, evol_),
  };
  Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hero_descriptor_,
      Hero::default_instance_,
      Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hero));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fhero_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hero_descriptor_, &Hero::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fhero_5fcommon_2eproto() {
  delete Hero::default_instance_;
  delete Hero_reflection_;
}

void protobuf_AddDesc_common_2fhero_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  ::protos::common::protobuf_AddDesc_common_2fitem_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030common/hero_common.proto\022\rprotos.commo"
    "n\032\031common/skill_common.proto\032\030common/ite"
    "m_common.proto\"\245\t\n\004Hero\022\n\n\002id\030\001 \001(\005\022\016\n\006h"
    "eroId\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\r\n\005level\030\004 \001(\005"
    "\022\020\n\010maxLevel\030\005 \001(\005\022\020\n\010coldDown\030\006 \001(\005\022\023\n\013"
    "atkInterval\030\007 \001(\002\022\n\n\002hp\030\010 \001(\005\022\013\n\003atk\030\t \001"
    "(\005\022\013\n\003def\030\n \001(\005\022\014\n\004crit\030\013 \001(\005\022\013\n\003hit\030\014 \001"
    "(\005\022\r\n\005dodge\030\r \001(\005\022\r\n\005renew\030\016 \001(\005\022\013\n\003dex\030"
    "> \001(\005\022\r\n\005addHp\030\017 \001(\005\022\016\n\006addAtk\030\020 \001(\005\022\016\n\006"
    "addDef\030\021 \001(\005\022\016\n\006addHit\030\022 \001(\005\022\017\n\007addCrit\030"
    "\023 \001(\005\022\020\n\010addDodge\030\024 \001(\005\022\020\n\010addRenew\030\025 \001("
    "\005\022\016\n\006addDex\030\? \001(\005\022\020\n\010initCost\030\026 \001(\005\022\017\n\007u"
    "seCost\030\027 \001(\005\022\017\n\007addCost\030\030 \001(\002\022\020\n\010moveCos"
    "t\030\031 \001(\005\022\017\n\007maxCost\030\032 \001(\005\022\013\n\003exp\030\033 \001(\005\022\017\n"
    "\007nextExp\030\034 \001(\005\022\020\n\010heroType\030\035 \001(\005\022\r\n\005thum"
    "b\030\036 \001(\005\022\014\n\004zoom\030\037 \001(\005\022\017\n\007quality\030  \001(\005\022\022"
    "\n\nmaxQuality\030! \001(\005\022\016\n\006itemId\030% \001(\005\022\020\n\010it"
    "emNum1\030\" \001(\005\022\020\n\010itemNum2\030# \001(\005\022\013\n\003own\030$ "
    "\001(\010\022\r\n\005alert\030& \001(\005\022\022\n\nalertRange\030\' \001(\005\022\014"
    "\n\004posX\030( \001(\005\022\014\n\004posY\030) \001(\005\022\021\n\tmoveSpeed\030"
    "@ \001(\002\022$\n\006skill1\030* \001(\0132\024.protos.common.Sk"
    "ill\022$\n\006skill2\030+ \001(\0132\024.protos.common.Skil"
    "l\022$\n\006skill3\030, \001(\0132\024.protos.common.Skill\022"
    "$\n\006skill4\030- \001(\0132\024.protos.common.Skill\022$\n"
    "\006skill5\030A \001(\0132\024.protos.common.Skill\022\016\n\006c"
    "ombat\030. \001(\005\022\014\n\004coin\0301 \001(\005\022#\n\006armor1\0303 \001("
    "\0132\023.protos.common.Item\022#\n\006armor2\0304 \001(\0132\023"
    ".protos.common.Item\022#\n\006armor3\0300 \001(\0132\023.pr"
    "otos.common.Item\022#\n\006armor4\0302 \001(\0132\023.proto"
    "s.common.Item\022#\n\006armor5\0305 \001(\0132\023.protos.c"
    "ommon.Item\022\r\n\005prate\0306 \001(\005\022\016\n\006battle\0307 \001("
    "\010\022\016\n\006remove\0308 \001(\010\022\r\n\005color\030/ \001(\005\022\014\n\004evol"
    "\0309 \001(\010B4\n$dass.server.gameserver.protos."
    "commonB\nHeroCommonH\001", 1340);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/hero_common.proto", &protobuf_RegisterTypes);
  Hero::default_instance_ = new Hero();
  Hero::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fhero_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fhero_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2fhero_5fcommon_2eproto() {
    protobuf_AddDesc_common_2fhero_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2fhero_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Hero::kIdFieldNumber;
const int Hero::kHeroIdFieldNumber;
const int Hero::kNameFieldNumber;
const int Hero::kLevelFieldNumber;
const int Hero::kMaxLevelFieldNumber;
const int Hero::kColdDownFieldNumber;
const int Hero::kAtkIntervalFieldNumber;
const int Hero::kHpFieldNumber;
const int Hero::kAtkFieldNumber;
const int Hero::kDefFieldNumber;
const int Hero::kCritFieldNumber;
const int Hero::kHitFieldNumber;
const int Hero::kDodgeFieldNumber;
const int Hero::kRenewFieldNumber;
const int Hero::kDexFieldNumber;
const int Hero::kAddHpFieldNumber;
const int Hero::kAddAtkFieldNumber;
const int Hero::kAddDefFieldNumber;
const int Hero::kAddHitFieldNumber;
const int Hero::kAddCritFieldNumber;
const int Hero::kAddDodgeFieldNumber;
const int Hero::kAddRenewFieldNumber;
const int Hero::kAddDexFieldNumber;
const int Hero::kInitCostFieldNumber;
const int Hero::kUseCostFieldNumber;
const int Hero::kAddCostFieldNumber;
const int Hero::kMoveCostFieldNumber;
const int Hero::kMaxCostFieldNumber;
const int Hero::kExpFieldNumber;
const int Hero::kNextExpFieldNumber;
const int Hero::kHeroTypeFieldNumber;
const int Hero::kThumbFieldNumber;
const int Hero::kZoomFieldNumber;
const int Hero::kQualityFieldNumber;
const int Hero::kMaxQualityFieldNumber;
const int Hero::kItemIdFieldNumber;
const int Hero::kItemNum1FieldNumber;
const int Hero::kItemNum2FieldNumber;
const int Hero::kOwnFieldNumber;
const int Hero::kAlertFieldNumber;
const int Hero::kAlertRangeFieldNumber;
const int Hero::kPosXFieldNumber;
const int Hero::kPosYFieldNumber;
const int Hero::kMoveSpeedFieldNumber;
const int Hero::kSkill1FieldNumber;
const int Hero::kSkill2FieldNumber;
const int Hero::kSkill3FieldNumber;
const int Hero::kSkill4FieldNumber;
const int Hero::kSkill5FieldNumber;
const int Hero::kCombatFieldNumber;
const int Hero::kCoinFieldNumber;
const int Hero::kArmor1FieldNumber;
const int Hero::kArmor2FieldNumber;
const int Hero::kArmor3FieldNumber;
const int Hero::kArmor4FieldNumber;
const int Hero::kArmor5FieldNumber;
const int Hero::kPrateFieldNumber;
const int Hero::kBattleFieldNumber;
const int Hero::kRemoveFieldNumber;
const int Hero::kColorFieldNumber;
const int Hero::kEvolFieldNumber;
#endif  // !_MSC_VER

Hero::Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hero::InitAsDefaultInstance() {
  skill1_ = const_cast< ::protos::common::Skill*>(&::protos::common::Skill::default_instance());
  skill2_ = const_cast< ::protos::common::Skill*>(&::protos::common::Skill::default_instance());
  skill3_ = const_cast< ::protos::common::Skill*>(&::protos::common::Skill::default_instance());
  skill4_ = const_cast< ::protos::common::Skill*>(&::protos::common::Skill::default_instance());
  skill5_ = const_cast< ::protos::common::Skill*>(&::protos::common::Skill::default_instance());
  armor1_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
  armor2_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
  armor3_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
  armor4_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
  armor5_ = const_cast< ::protos::common::Item*>(&::protos::common::Item::default_instance());
}

Hero::Hero(const Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hero::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  heroid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  maxlevel_ = 0;
  colddown_ = 0;
  atkinterval_ = 0;
  hp_ = 0;
  atk_ = 0;
  def_ = 0;
  crit_ = 0;
  hit_ = 0;
  dodge_ = 0;
  renew_ = 0;
  dex_ = 0;
  addhp_ = 0;
  addatk_ = 0;
  adddef_ = 0;
  addhit_ = 0;
  addcrit_ = 0;
  adddodge_ = 0;
  addrenew_ = 0;
  adddex_ = 0;
  initcost_ = 0;
  usecost_ = 0;
  addcost_ = 0;
  movecost_ = 0;
  maxcost_ = 0;
  exp_ = 0;
  nextexp_ = 0;
  herotype_ = 0;
  thumb_ = 0;
  zoom_ = 0;
  quality_ = 0;
  maxquality_ = 0;
  itemid_ = 0;
  itemnum1_ = 0;
  itemnum2_ = 0;
  own_ = false;
  alert_ = 0;
  alertrange_ = 0;
  posx_ = 0;
  posy_ = 0;
  movespeed_ = 0;
  skill1_ = NULL;
  skill2_ = NULL;
  skill3_ = NULL;
  skill4_ = NULL;
  skill5_ = NULL;
  combat_ = 0;
  coin_ = 0;
  armor1_ = NULL;
  armor2_ = NULL;
  armor3_ = NULL;
  armor4_ = NULL;
  armor5_ = NULL;
  prate_ = 0;
  battle_ = false;
  remove_ = false;
  color_ = 0;
  evol_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hero::~Hero() {
  SharedDtor();
}

void Hero::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete skill1_;
    delete skill2_;
    delete skill3_;
    delete skill4_;
    delete skill5_;
    delete armor1_;
    delete armor2_;
    delete armor3_;
    delete armor4_;
    delete armor5_;
  }
}

void Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hero_descriptor_;
}

const Hero& Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fhero_5fcommon_2eproto();
  return *default_instance_;
}

Hero* Hero::default_instance_ = NULL;

Hero* Hero::New() const {
  return new Hero;
}

void Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    heroid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    maxlevel_ = 0;
    colddown_ = 0;
    atkinterval_ = 0;
    hp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    atk_ = 0;
    def_ = 0;
    crit_ = 0;
    hit_ = 0;
    dodge_ = 0;
    renew_ = 0;
    dex_ = 0;
    addhp_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    addatk_ = 0;
    adddef_ = 0;
    addhit_ = 0;
    addcrit_ = 0;
    adddodge_ = 0;
    addrenew_ = 0;
    adddex_ = 0;
    initcost_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    usecost_ = 0;
    addcost_ = 0;
    movecost_ = 0;
    maxcost_ = 0;
    exp_ = 0;
    nextexp_ = 0;
    herotype_ = 0;
    thumb_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    zoom_ = 0;
    quality_ = 0;
    maxquality_ = 0;
    itemid_ = 0;
    itemnum1_ = 0;
    itemnum2_ = 0;
    own_ = false;
    alert_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    alertrange_ = 0;
    posx_ = 0;
    posy_ = 0;
    movespeed_ = 0;
    if (has_skill1()) {
      if (skill1_ != NULL) skill1_->::protos::common::Skill::Clear();
    }
    if (has_skill2()) {
      if (skill2_ != NULL) skill2_->::protos::common::Skill::Clear();
    }
    if (has_skill3()) {
      if (skill3_ != NULL) skill3_->::protos::common::Skill::Clear();
    }
    if (has_skill4()) {
      if (skill4_ != NULL) skill4_->::protos::common::Skill::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_skill5()) {
      if (skill5_ != NULL) skill5_->::protos::common::Skill::Clear();
    }
    combat_ = 0;
    coin_ = 0;
    if (has_armor1()) {
      if (armor1_ != NULL) armor1_->::protos::common::Item::Clear();
    }
    if (has_armor2()) {
      if (armor2_ != NULL) armor2_->::protos::common::Item::Clear();
    }
    if (has_armor3()) {
      if (armor3_ != NULL) armor3_->::protos::common::Item::Clear();
    }
    if (has_armor4()) {
      if (armor4_ != NULL) armor4_->::protos::common::Item::Clear();
    }
    if (has_armor5()) {
      if (armor5_ != NULL) armor5_->::protos::common::Item::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    prate_ = 0;
    battle_ = false;
    remove_ = false;
    color_ = 0;
    evol_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroId;
        break;
      }

      // optional int32 heroId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxLevel;
        break;
      }

      // optional int32 maxLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_coldDown;
        break;
      }

      // optional int32 coldDown = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coldDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colddown_)));
          set_has_colddown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_atkInterval;
        break;
      }

      // optional float atkInterval = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_atkInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &atkinterval_)));
          set_has_atkinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hp;
        break;
      }

      // optional int32 hp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_atk;
        break;
      }

      // optional int32 atk = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_def;
        break;
      }

      // optional int32 def = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_crit;
        break;
      }

      // optional int32 crit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hit;
        break;
      }

      // optional int32 hit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dodge;
        break;
      }

      // optional int32 dodge = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_renew;
        break;
      }

      // optional int32 renew = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renew_)));
          set_has_renew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_addHp;
        break;
      }

      // optional int32 addHp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addhp_)));
          set_has_addhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_addAtk;
        break;
      }

      // optional int32 addAtk = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addatk_)));
          set_has_addatk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_addDef;
        break;
      }

      // optional int32 addDef = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adddef_)));
          set_has_adddef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_addHit;
        break;
      }

      // optional int32 addHit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addhit_)));
          set_has_addhit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_addCrit;
        break;
      }

      // optional int32 addCrit = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addcrit_)));
          set_has_addcrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_addDodge;
        break;
      }

      // optional int32 addDodge = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adddodge_)));
          set_has_adddodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_addRenew;
        break;
      }

      // optional int32 addRenew = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addRenew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addrenew_)));
          set_has_addrenew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_initCost;
        break;
      }

      // optional int32 initCost = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initcost_)));
          set_has_initcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_useCost;
        break;
      }

      // optional int32 useCost = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecost_)));
          set_has_usecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_addCost;
        break;
      }

      // optional float addCost = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_addCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &addcost_)));
          set_has_addcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_moveCost;
        break;
      }

      // optional int32 moveCost = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movecost_)));
          set_has_movecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_maxCost;
        break;
      }

      // optional int32 maxCost = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcost_)));
          set_has_maxcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_exp;
        break;
      }

      // optional int32 exp = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nextExp;
        break;
      }

      // optional int32 nextExp = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextexp_)));
          set_has_nextexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_heroType;
        break;
      }

      // optional int32 heroType = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herotype_)));
          set_has_herotype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_thumb;
        break;
      }

      // optional int32 thumb = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumb_)));
          set_has_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_zoom;
        break;
      }

      // optional int32 zoom = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoom_)));
          set_has_zoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_quality;
        break;
      }

      // optional int32 quality = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_maxQuality;
        break;
      }

      // optional int32 maxQuality = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxquality_)));
          set_has_maxquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_itemNum1;
        break;
      }

      // optional int32 itemNum1 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum1_)));
          set_has_itemnum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_itemNum2;
        break;
      }

      // optional int32 itemNum2 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum2_)));
          set_has_itemnum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_own;
        break;
      }

      // optional bool own = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &own_)));
          set_has_own();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_alert;
        break;
      }

      // optional int32 alert = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alert_)));
          set_has_alert();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_alertRange;
        break;
      }

      // optional int32 alertRange = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alertRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alertrange_)));
          set_has_alertrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_posX;
        break;
      }

      // optional int32 posX = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_posY;
        break;
      }

      // optional int32 posY = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_skill1;
        break;
      }

      // optional .protos.common.Skill skill1 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_skill2;
        break;
      }

      // optional .protos.common.Skill skill2 = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_skill3;
        break;
      }

      // optional .protos.common.Skill skill3 = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_skill4;
        break;
      }

      // optional .protos.common.Skill skill4 = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_combat;
        break;
      }

      // optional int32 combat = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_color;
        break;
      }

      // optional int32 color = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_armor3;
        break;
      }

      // optional .protos.common.Item armor3 = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_coin;
        break;
      }

      // optional int32 coin = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_armor4;
        break;
      }

      // optional .protos.common.Item armor4 = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_armor1;
        break;
      }

      // optional .protos.common.Item armor1 = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_armor2;
        break;
      }

      // optional .protos.common.Item armor2 = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_armor5;
        break;
      }

      // optional .protos.common.Item armor5 = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_prate;
        break;
      }

      // optional int32 prate = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prate_)));
          set_has_prate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_battle;
        break;
      }

      // optional bool battle = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_remove;
        break;
      }

      // optional bool remove = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_)));
          set_has_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_evol;
        break;
      }

      // optional bool evol = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &evol_)));
          set_has_evol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_dex;
        break;
      }

      // optional int32 dex = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dex_)));
          set_has_dex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_addDex;
        break;
      }

      // optional int32 addDex = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adddex_)));
          set_has_adddex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(517)) goto parse_moveSpeed;
        break;
      }

      // optional float moveSpeed = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_skill5;
        break;
      }

      // optional .protos.common.Skill skill5 = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 heroId = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heroid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 maxLevel = 5;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxlevel(), output);
  }

  // optional int32 coldDown = 6;
  if (has_colddown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->colddown(), output);
  }

  // optional float atkInterval = 7;
  if (has_atkinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->atkinterval(), output);
  }

  // optional int32 hp = 8;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hp(), output);
  }

  // optional int32 atk = 9;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->atk(), output);
  }

  // optional int32 def = 10;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->def(), output);
  }

  // optional int32 crit = 11;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->crit(), output);
  }

  // optional int32 hit = 12;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hit(), output);
  }

  // optional int32 dodge = 13;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dodge(), output);
  }

  // optional int32 renew = 14;
  if (has_renew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->renew(), output);
  }

  // optional int32 addHp = 15;
  if (has_addhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->addhp(), output);
  }

  // optional int32 addAtk = 16;
  if (has_addatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->addatk(), output);
  }

  // optional int32 addDef = 17;
  if (has_adddef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->adddef(), output);
  }

  // optional int32 addHit = 18;
  if (has_addhit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->addhit(), output);
  }

  // optional int32 addCrit = 19;
  if (has_addcrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->addcrit(), output);
  }

  // optional int32 addDodge = 20;
  if (has_adddodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->adddodge(), output);
  }

  // optional int32 addRenew = 21;
  if (has_addrenew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->addrenew(), output);
  }

  // optional int32 initCost = 22;
  if (has_initcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->initcost(), output);
  }

  // optional int32 useCost = 23;
  if (has_usecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->usecost(), output);
  }

  // optional float addCost = 24;
  if (has_addcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->addcost(), output);
  }

  // optional int32 moveCost = 25;
  if (has_movecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->movecost(), output);
  }

  // optional int32 maxCost = 26;
  if (has_maxcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->maxcost(), output);
  }

  // optional int32 exp = 27;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->exp(), output);
  }

  // optional int32 nextExp = 28;
  if (has_nextexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nextexp(), output);
  }

  // optional int32 heroType = 29;
  if (has_herotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->herotype(), output);
  }

  // optional int32 thumb = 30;
  if (has_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->thumb(), output);
  }

  // optional int32 zoom = 31;
  if (has_zoom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->zoom(), output);
  }

  // optional int32 quality = 32;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->quality(), output);
  }

  // optional int32 maxQuality = 33;
  if (has_maxquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->maxquality(), output);
  }

  // optional int32 itemNum1 = 34;
  if (has_itemnum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->itemnum1(), output);
  }

  // optional int32 itemNum2 = 35;
  if (has_itemnum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->itemnum2(), output);
  }

  // optional bool own = 36;
  if (has_own()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->own(), output);
  }

  // optional int32 itemId = 37;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->itemid(), output);
  }

  // optional int32 alert = 38;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->alert(), output);
  }

  // optional int32 alertRange = 39;
  if (has_alertrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->alertrange(), output);
  }

  // optional int32 posX = 40;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->posx(), output);
  }

  // optional int32 posY = 41;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->posy(), output);
  }

  // optional .protos.common.Skill skill1 = 42;
  if (has_skill1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->skill1(), output);
  }

  // optional .protos.common.Skill skill2 = 43;
  if (has_skill2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->skill2(), output);
  }

  // optional .protos.common.Skill skill3 = 44;
  if (has_skill3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->skill3(), output);
  }

  // optional .protos.common.Skill skill4 = 45;
  if (has_skill4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->skill4(), output);
  }

  // optional int32 combat = 46;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->combat(), output);
  }

  // optional int32 color = 47;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->color(), output);
  }

  // optional .protos.common.Item armor3 = 48;
  if (has_armor3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->armor3(), output);
  }

  // optional int32 coin = 49;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->coin(), output);
  }

  // optional .protos.common.Item armor4 = 50;
  if (has_armor4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->armor4(), output);
  }

  // optional .protos.common.Item armor1 = 51;
  if (has_armor1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->armor1(), output);
  }

  // optional .protos.common.Item armor2 = 52;
  if (has_armor2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->armor2(), output);
  }

  // optional .protos.common.Item armor5 = 53;
  if (has_armor5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->armor5(), output);
  }

  // optional int32 prate = 54;
  if (has_prate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->prate(), output);
  }

  // optional bool battle = 55;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->battle(), output);
  }

  // optional bool remove = 56;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->remove(), output);
  }

  // optional bool evol = 57;
  if (has_evol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->evol(), output);
  }

  // optional int32 dex = 62;
  if (has_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->dex(), output);
  }

  // optional int32 addDex = 63;
  if (has_adddex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->adddex(), output);
  }

  // optional float moveSpeed = 64;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->movespeed(), output);
  }

  // optional .protos.common.Skill skill5 = 65;
  if (has_skill5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->skill5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 heroId = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heroid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 maxLevel = 5;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxlevel(), target);
  }

  // optional int32 coldDown = 6;
  if (has_colddown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->colddown(), target);
  }

  // optional float atkInterval = 7;
  if (has_atkinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->atkinterval(), target);
  }

  // optional int32 hp = 8;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hp(), target);
  }

  // optional int32 atk = 9;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->atk(), target);
  }

  // optional int32 def = 10;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->def(), target);
  }

  // optional int32 crit = 11;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->crit(), target);
  }

  // optional int32 hit = 12;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hit(), target);
  }

  // optional int32 dodge = 13;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dodge(), target);
  }

  // optional int32 renew = 14;
  if (has_renew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->renew(), target);
  }

  // optional int32 addHp = 15;
  if (has_addhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->addhp(), target);
  }

  // optional int32 addAtk = 16;
  if (has_addatk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->addatk(), target);
  }

  // optional int32 addDef = 17;
  if (has_adddef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->adddef(), target);
  }

  // optional int32 addHit = 18;
  if (has_addhit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->addhit(), target);
  }

  // optional int32 addCrit = 19;
  if (has_addcrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->addcrit(), target);
  }

  // optional int32 addDodge = 20;
  if (has_adddodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->adddodge(), target);
  }

  // optional int32 addRenew = 21;
  if (has_addrenew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->addrenew(), target);
  }

  // optional int32 initCost = 22;
  if (has_initcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->initcost(), target);
  }

  // optional int32 useCost = 23;
  if (has_usecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->usecost(), target);
  }

  // optional float addCost = 24;
  if (has_addcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->addcost(), target);
  }

  // optional int32 moveCost = 25;
  if (has_movecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->movecost(), target);
  }

  // optional int32 maxCost = 26;
  if (has_maxcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->maxcost(), target);
  }

  // optional int32 exp = 27;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->exp(), target);
  }

  // optional int32 nextExp = 28;
  if (has_nextexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nextexp(), target);
  }

  // optional int32 heroType = 29;
  if (has_herotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->herotype(), target);
  }

  // optional int32 thumb = 30;
  if (has_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->thumb(), target);
  }

  // optional int32 zoom = 31;
  if (has_zoom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->zoom(), target);
  }

  // optional int32 quality = 32;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->quality(), target);
  }

  // optional int32 maxQuality = 33;
  if (has_maxquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->maxquality(), target);
  }

  // optional int32 itemNum1 = 34;
  if (has_itemnum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->itemnum1(), target);
  }

  // optional int32 itemNum2 = 35;
  if (has_itemnum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->itemnum2(), target);
  }

  // optional bool own = 36;
  if (has_own()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->own(), target);
  }

  // optional int32 itemId = 37;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->itemid(), target);
  }

  // optional int32 alert = 38;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->alert(), target);
  }

  // optional int32 alertRange = 39;
  if (has_alertrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->alertrange(), target);
  }

  // optional int32 posX = 40;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->posx(), target);
  }

  // optional int32 posY = 41;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->posy(), target);
  }

  // optional .protos.common.Skill skill1 = 42;
  if (has_skill1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->skill1(), target);
  }

  // optional .protos.common.Skill skill2 = 43;
  if (has_skill2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->skill2(), target);
  }

  // optional .protos.common.Skill skill3 = 44;
  if (has_skill3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->skill3(), target);
  }

  // optional .protos.common.Skill skill4 = 45;
  if (has_skill4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->skill4(), target);
  }

  // optional int32 combat = 46;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->combat(), target);
  }

  // optional int32 color = 47;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->color(), target);
  }

  // optional .protos.common.Item armor3 = 48;
  if (has_armor3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->armor3(), target);
  }

  // optional int32 coin = 49;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->coin(), target);
  }

  // optional .protos.common.Item armor4 = 50;
  if (has_armor4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->armor4(), target);
  }

  // optional .protos.common.Item armor1 = 51;
  if (has_armor1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->armor1(), target);
  }

  // optional .protos.common.Item armor2 = 52;
  if (has_armor2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->armor2(), target);
  }

  // optional .protos.common.Item armor5 = 53;
  if (has_armor5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->armor5(), target);
  }

  // optional int32 prate = 54;
  if (has_prate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->prate(), target);
  }

  // optional bool battle = 55;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->battle(), target);
  }

  // optional bool remove = 56;
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->remove(), target);
  }

  // optional bool evol = 57;
  if (has_evol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->evol(), target);
  }

  // optional int32 dex = 62;
  if (has_dex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->dex(), target);
  }

  // optional int32 addDex = 63;
  if (has_adddex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->adddex(), target);
  }

  // optional float moveSpeed = 64;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(64, this->movespeed(), target);
  }

  // optional .protos.common.Skill skill5 = 65;
  if (has_skill5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->skill5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 heroId = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 maxLevel = 5;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlevel());
    }

    // optional int32 coldDown = 6;
    if (has_colddown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colddown());
    }

    // optional float atkInterval = 7;
    if (has_atkinterval()) {
      total_size += 1 + 4;
    }

    // optional int32 hp = 8;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 atk = 9;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }

    // optional int32 def = 10;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }

    // optional int32 crit = 11;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

    // optional int32 hit = 12;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

    // optional int32 dodge = 13;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodge());
    }

    // optional int32 renew = 14;
    if (has_renew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renew());
    }

    // optional int32 dex = 62;
    if (has_dex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dex());
    }

    // optional int32 addHp = 15;
    if (has_addhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 addAtk = 16;
    if (has_addatk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addatk());
    }

    // optional int32 addDef = 17;
    if (has_adddef()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddef());
    }

    // optional int32 addHit = 18;
    if (has_addhit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhit());
    }

    // optional int32 addCrit = 19;
    if (has_addcrit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addcrit());
    }

    // optional int32 addDodge = 20;
    if (has_adddodge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddodge());
    }

    // optional int32 addRenew = 21;
    if (has_addrenew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addrenew());
    }

    // optional int32 addDex = 63;
    if (has_adddex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adddex());
    }

    // optional int32 initCost = 22;
    if (has_initcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initcost());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 useCost = 23;
    if (has_usecost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecost());
    }

    // optional float addCost = 24;
    if (has_addcost()) {
      total_size += 2 + 4;
    }

    // optional int32 moveCost = 25;
    if (has_movecost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movecost());
    }

    // optional int32 maxCost = 26;
    if (has_maxcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcost());
    }

    // optional int32 exp = 27;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 nextExp = 28;
    if (has_nextexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextexp());
    }

    // optional int32 heroType = 29;
    if (has_herotype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herotype());
    }

    // optional int32 thumb = 30;
    if (has_thumb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thumb());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 zoom = 31;
    if (has_zoom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoom());
    }

    // optional int32 quality = 32;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 maxQuality = 33;
    if (has_maxquality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxquality());
    }

    // optional int32 itemId = 37;
    if (has_itemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemNum1 = 34;
    if (has_itemnum1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum1());
    }

    // optional int32 itemNum2 = 35;
    if (has_itemnum2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum2());
    }

    // optional bool own = 36;
    if (has_own()) {
      total_size += 2 + 1;
    }

    // optional int32 alert = 38;
    if (has_alert()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alert());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 alertRange = 39;
    if (has_alertrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alertrange());
    }

    // optional int32 posX = 40;
    if (has_posx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posY = 41;
    if (has_posy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional float moveSpeed = 64;
    if (has_movespeed()) {
      total_size += 2 + 4;
    }

    // optional .protos.common.Skill skill1 = 42;
    if (has_skill1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill1());
    }

    // optional .protos.common.Skill skill2 = 43;
    if (has_skill2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill2());
    }

    // optional .protos.common.Skill skill3 = 44;
    if (has_skill3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill3());
    }

    // optional .protos.common.Skill skill4 = 45;
    if (has_skill4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill4());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .protos.common.Skill skill5 = 65;
    if (has_skill5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill5());
    }

    // optional int32 combat = 46;
    if (has_combat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

    // optional int32 coin = 49;
    if (has_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional .protos.common.Item armor1 = 51;
    if (has_armor1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor1());
    }

    // optional .protos.common.Item armor2 = 52;
    if (has_armor2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor2());
    }

    // optional .protos.common.Item armor3 = 48;
    if (has_armor3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor3());
    }

    // optional .protos.common.Item armor4 = 50;
    if (has_armor4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor4());
    }

    // optional .protos.common.Item armor5 = 53;
    if (has_armor5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor5());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 prate = 54;
    if (has_prate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prate());
    }

    // optional bool battle = 55;
    if (has_battle()) {
      total_size += 2 + 1;
    }

    // optional bool remove = 56;
    if (has_remove()) {
      total_size += 2 + 1;
    }

    // optional int32 color = 47;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional bool evol = 57;
    if (has_evol()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hero::MergeFrom(const Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_colddown()) {
      set_colddown(from.colddown());
    }
    if (from.has_atkinterval()) {
      set_atkinterval(from.atkinterval());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_renew()) {
      set_renew(from.renew());
    }
    if (from.has_dex()) {
      set_dex(from.dex());
    }
    if (from.has_addhp()) {
      set_addhp(from.addhp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_addatk()) {
      set_addatk(from.addatk());
    }
    if (from.has_adddef()) {
      set_adddef(from.adddef());
    }
    if (from.has_addhit()) {
      set_addhit(from.addhit());
    }
    if (from.has_addcrit()) {
      set_addcrit(from.addcrit());
    }
    if (from.has_adddodge()) {
      set_adddodge(from.adddodge());
    }
    if (from.has_addrenew()) {
      set_addrenew(from.addrenew());
    }
    if (from.has_adddex()) {
      set_adddex(from.adddex());
    }
    if (from.has_initcost()) {
      set_initcost(from.initcost());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_usecost()) {
      set_usecost(from.usecost());
    }
    if (from.has_addcost()) {
      set_addcost(from.addcost());
    }
    if (from.has_movecost()) {
      set_movecost(from.movecost());
    }
    if (from.has_maxcost()) {
      set_maxcost(from.maxcost());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_nextexp()) {
      set_nextexp(from.nextexp());
    }
    if (from.has_herotype()) {
      set_herotype(from.herotype());
    }
    if (from.has_thumb()) {
      set_thumb(from.thumb());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_zoom()) {
      set_zoom(from.zoom());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_maxquality()) {
      set_maxquality(from.maxquality());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum1()) {
      set_itemnum1(from.itemnum1());
    }
    if (from.has_itemnum2()) {
      set_itemnum2(from.itemnum2());
    }
    if (from.has_own()) {
      set_own(from.own());
    }
    if (from.has_alert()) {
      set_alert(from.alert());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_alertrange()) {
      set_alertrange(from.alertrange());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_skill1()) {
      mutable_skill1()->::protos::common::Skill::MergeFrom(from.skill1());
    }
    if (from.has_skill2()) {
      mutable_skill2()->::protos::common::Skill::MergeFrom(from.skill2());
    }
    if (from.has_skill3()) {
      mutable_skill3()->::protos::common::Skill::MergeFrom(from.skill3());
    }
    if (from.has_skill4()) {
      mutable_skill4()->::protos::common::Skill::MergeFrom(from.skill4());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_skill5()) {
      mutable_skill5()->::protos::common::Skill::MergeFrom(from.skill5());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_armor1()) {
      mutable_armor1()->::protos::common::Item::MergeFrom(from.armor1());
    }
    if (from.has_armor2()) {
      mutable_armor2()->::protos::common::Item::MergeFrom(from.armor2());
    }
    if (from.has_armor3()) {
      mutable_armor3()->::protos::common::Item::MergeFrom(from.armor3());
    }
    if (from.has_armor4()) {
      mutable_armor4()->::protos::common::Item::MergeFrom(from.armor4());
    }
    if (from.has_armor5()) {
      mutable_armor5()->::protos::common::Item::MergeFrom(from.armor5());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_prate()) {
      set_prate(from.prate());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
    if (from.has_remove()) {
      set_remove(from.remove());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_evol()) {
      set_evol(from.evol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hero::CopyFrom(const Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hero::IsInitialized() const {

  if (has_armor1()) {
    if (!this->armor1().IsInitialized()) return false;
  }
  if (has_armor2()) {
    if (!this->armor2().IsInitialized()) return false;
  }
  if (has_armor3()) {
    if (!this->armor3().IsInitialized()) return false;
  }
  if (has_armor4()) {
    if (!this->armor4().IsInitialized()) return false;
  }
  if (has_armor5()) {
    if (!this->armor5().IsInitialized()) return false;
  }
  return true;
}

void Hero::Swap(Hero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(heroid_, other->heroid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(colddown_, other->colddown_);
    std::swap(atkinterval_, other->atkinterval_);
    std::swap(hp_, other->hp_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(crit_, other->crit_);
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(renew_, other->renew_);
    std::swap(dex_, other->dex_);
    std::swap(addhp_, other->addhp_);
    std::swap(addatk_, other->addatk_);
    std::swap(adddef_, other->adddef_);
    std::swap(addhit_, other->addhit_);
    std::swap(addcrit_, other->addcrit_);
    std::swap(adddodge_, other->adddodge_);
    std::swap(addrenew_, other->addrenew_);
    std::swap(adddex_, other->adddex_);
    std::swap(initcost_, other->initcost_);
    std::swap(usecost_, other->usecost_);
    std::swap(addcost_, other->addcost_);
    std::swap(movecost_, other->movecost_);
    std::swap(maxcost_, other->maxcost_);
    std::swap(exp_, other->exp_);
    std::swap(nextexp_, other->nextexp_);
    std::swap(herotype_, other->herotype_);
    std::swap(thumb_, other->thumb_);
    std::swap(zoom_, other->zoom_);
    std::swap(quality_, other->quality_);
    std::swap(maxquality_, other->maxquality_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum1_, other->itemnum1_);
    std::swap(itemnum2_, other->itemnum2_);
    std::swap(own_, other->own_);
    std::swap(alert_, other->alert_);
    std::swap(alertrange_, other->alertrange_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(skill1_, other->skill1_);
    std::swap(skill2_, other->skill2_);
    std::swap(skill3_, other->skill3_);
    std::swap(skill4_, other->skill4_);
    std::swap(skill5_, other->skill5_);
    std::swap(combat_, other->combat_);
    std::swap(coin_, other->coin_);
    std::swap(armor1_, other->armor1_);
    std::swap(armor2_, other->armor2_);
    std::swap(armor3_, other->armor3_);
    std::swap(armor4_, other->armor4_);
    std::swap(armor5_, other->armor5_);
    std::swap(prate_, other->prate_);
    std::swap(battle_, other->battle_);
    std::swap(remove_, other->remove_);
    std::swap(color_, other->color_);
    std::swap(evol_, other->evol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hero_descriptor_;
  metadata.reflection = Hero_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

// @@protoc_insertion_point(global_scope)
