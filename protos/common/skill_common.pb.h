// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/skill_common.proto

#ifndef PROTOBUF_common_2fskill_5fcommon_2eproto__INCLUDED
#define PROTOBUF_common_2fskill_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
void protobuf_AssignDesc_common_2fskill_5fcommon_2eproto();
void protobuf_ShutdownFile_common_2fskill_5fcommon_2eproto();

class Skill;
class Effect;
class Buff;

// ===================================================================

class Skill : public ::google::protobuf::Message {
 public:
  Skill();
  virtual ~Skill();

  Skill(const Skill& from);

  inline Skill& operator=(const Skill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Skill& default_instance();

  void Swap(Skill* other);

  // implements Message ----------------------------------------------

  Skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Skill& from);
  void MergeFrom(const Skill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skillId = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 useRate = 5;
  inline bool has_userate() const;
  inline void clear_userate();
  static const int kUseRateFieldNumber = 5;
  inline ::google::protobuf::int32 userate() const;
  inline void set_userate(::google::protobuf::int32 value);

  // optional int32 cost = 6;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 6;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bool move = 8;
  inline bool has_move() const;
  inline void clear_move();
  static const int kMoveFieldNumber = 8;
  inline bool move() const;
  inline void set_move(bool value);

  // optional int32 maxLevel = 17;
  inline bool has_maxlevel() const;
  inline void clear_maxlevel();
  static const int kMaxLevelFieldNumber = 17;
  inline ::google::protobuf::int32 maxlevel() const;
  inline void set_maxlevel(::google::protobuf::int32 value);

  // optional int32 coldDown = 18;
  inline bool has_colddown() const;
  inline void clear_colddown();
  static const int kColdDownFieldNumber = 18;
  inline ::google::protobuf::int32 colddown() const;
  inline void set_colddown(::google::protobuf::int32 value);

  // optional int32 target = 14;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 14;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // optional int32 pro_type = 15;
  inline bool has_pro_type() const;
  inline void clear_pro_type();
  static const int kProTypeFieldNumber = 15;
  inline ::google::protobuf::int32 pro_type() const;
  inline void set_pro_type(::google::protobuf::int32 value);

  // optional int32 pro_rate = 16;
  inline bool has_pro_rate() const;
  inline void clear_pro_rate();
  static const int kProRateFieldNumber = 16;
  inline ::google::protobuf::int32 pro_rate() const;
  inline void set_pro_rate(::google::protobuf::int32 value);

  // optional int32 multiEff = 19;
  inline bool has_multieff() const;
  inline void clear_multieff();
  static const int kMultiEffFieldNumber = 19;
  inline ::google::protobuf::int32 multieff() const;
  inline void set_multieff(::google::protobuf::int32 value);

  // repeated .protos.common.Effect effect = 20;
  inline int effect_size() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 20;
  inline const ::protos::common::Effect& effect(int index) const;
  inline ::protos::common::Effect* mutable_effect(int index);
  inline ::protos::common::Effect* add_effect();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Effect >&
      effect() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Effect >*
      mutable_effect();

  // optional int32 activeQuality = 21;
  inline bool has_activequality() const;
  inline void clear_activequality();
  static const int kActiveQualityFieldNumber = 21;
  inline ::google::protobuf::int32 activequality() const;
  inline void set_activequality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.common.Skill)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_userate();
  inline void clear_has_userate();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_move();
  inline void clear_has_move();
  inline void set_has_maxlevel();
  inline void clear_has_maxlevel();
  inline void set_has_colddown();
  inline void clear_has_colddown();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_pro_type();
  inline void clear_has_pro_type();
  inline void set_has_pro_rate();
  inline void clear_has_pro_rate();
  inline void set_has_multieff();
  inline void clear_has_multieff();
  inline void set_has_activequality();
  inline void clear_has_activequality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 userate_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 level_;
  bool move_;
  ::google::protobuf::int32 maxlevel_;
  ::google::protobuf::int32 colddown_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 pro_type_;
  ::google::protobuf::int32 pro_rate_;
  ::google::protobuf::int32 multieff_;
  ::google::protobuf::RepeatedPtrField< ::protos::common::Effect > effect_;
  ::google::protobuf::int32 activequality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  friend void protobuf_AssignDesc_common_2fskill_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_common_2fskill_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Skill* default_instance_;
};
// -------------------------------------------------------------------

class Effect : public ::google::protobuf::Message {
 public:
  Effect();
  virtual ~Effect();

  Effect(const Effect& from);

  inline Effect& operator=(const Effect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Effect& default_instance();

  void Swap(Effect* other);

  // implements Message ----------------------------------------------

  Effect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Effect& from);
  void MergeFrom(const Effect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 effectId = 1;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIdFieldNumber = 1;
  inline ::google::protobuf::int32 effectid() const;
  inline void set_effectid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 userRate = 3;
  inline bool has_userrate() const;
  inline void clear_userrate();
  static const int kUserRateFieldNumber = 3;
  inline ::google::protobuf::int32 userrate() const;
  inline void set_userrate(::google::protobuf::int32 value);

  // optional sint32 cost = 4;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 4;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // optional sint32 damage = 5;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 5;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // optional int32 hurt = 6;
  inline bool has_hurt() const;
  inline void clear_hurt();
  static const int kHurtFieldNumber = 6;
  inline ::google::protobuf::int32 hurt() const;
  inline void set_hurt(::google::protobuf::int32 value);

  // optional int32 target = 7;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 7;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // optional int32 group = 8;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 8;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int32 pos = 9;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 9;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // optional int32 pro_type = 10;
  inline bool has_pro_type() const;
  inline void clear_pro_type();
  static const int kProTypeFieldNumber = 10;
  inline ::google::protobuf::int32 pro_type() const;
  inline void set_pro_type(::google::protobuf::int32 value);

  // optional int32 pro_rate = 11;
  inline bool has_pro_rate() const;
  inline void clear_pro_rate();
  static const int kProRateFieldNumber = 11;
  inline ::google::protobuf::int32 pro_rate() const;
  inline void set_pro_rate(::google::protobuf::int32 value);

  // optional int32 batter = 12;
  inline bool has_batter() const;
  inline void clear_batter();
  static const int kBatterFieldNumber = 12;
  inline ::google::protobuf::int32 batter() const;
  inline void set_batter(::google::protobuf::int32 value);

  // optional sint32 repel = 13;
  inline bool has_repel() const;
  inline void clear_repel();
  static const int kRepelFieldNumber = 13;
  inline ::google::protobuf::int32 repel() const;
  inline void set_repel(::google::protobuf::int32 value);

  // optional int32 erange = 14;
  inline bool has_erange() const;
  inline void clear_erange();
  static const int kErangeFieldNumber = 14;
  inline ::google::protobuf::int32 erange() const;
  inline void set_erange(::google::protobuf::int32 value);

  // optional int32 mode = 15;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 15;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional int32 type = 16;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 16;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional sint32 distance = 17;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 17;
  inline ::google::protobuf::int32 distance() const;
  inline void set_distance(::google::protobuf::int32 value);

  // optional int32 range = 18;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 18;
  inline ::google::protobuf::int32 range() const;
  inline void set_range(::google::protobuf::int32 value);

  // repeated .protos.common.Buff buffList = 19;
  inline int bufflist_size() const;
  inline void clear_bufflist();
  static const int kBuffListFieldNumber = 19;
  inline const ::protos::common::Buff& bufflist(int index) const;
  inline ::protos::common::Buff* mutable_bufflist(int index);
  inline ::protos::common::Buff* add_bufflist();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Buff >&
      bufflist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Buff >*
      mutable_bufflist();

  // @@protoc_insertion_point(class_scope:protos.common.Effect)
 private:
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_userrate();
  inline void clear_has_userrate();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_hurt();
  inline void clear_has_hurt();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_pro_type();
  inline void clear_has_pro_type();
  inline void set_has_pro_rate();
  inline void clear_has_pro_rate();
  inline void set_has_batter();
  inline void clear_has_batter();
  inline void set_has_repel();
  inline void clear_has_repel();
  inline void set_has_erange();
  inline void clear_has_erange();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 effectid_;
  ::google::protobuf::int32 userrate_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 hurt_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 pro_type_;
  ::google::protobuf::int32 pro_rate_;
  ::google::protobuf::int32 batter_;
  ::google::protobuf::int32 repel_;
  ::google::protobuf::int32 erange_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 distance_;
  ::google::protobuf::RepeatedPtrField< ::protos::common::Buff > bufflist_;
  ::google::protobuf::int32 range_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  friend void protobuf_AssignDesc_common_2fskill_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_common_2fskill_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Effect* default_instance_;
};
// -------------------------------------------------------------------

class Buff : public ::google::protobuf::Message {
 public:
  Buff();
  virtual ~Buff();

  Buff(const Buff& from);

  inline Buff& operator=(const Buff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Buff& default_instance();

  void Swap(Buff* other);

  // implements Message ----------------------------------------------

  Buff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Buff& from);
  void MergeFrom(const Buff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 buffId = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 1;
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional sint32 damage = 4;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 4;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // optional int32 damage_rate = 5;
  inline bool has_damage_rate() const;
  inline void clear_damage_rate();
  static const int kDamageRateFieldNumber = 5;
  inline ::google::protobuf::int32 damage_rate() const;
  inline void set_damage_rate(::google::protobuf::int32 value);

  // optional int32 useRate = 6;
  inline bool has_userate() const;
  inline void clear_userate();
  static const int kUseRateFieldNumber = 6;
  inline ::google::protobuf::int32 userate() const;
  inline void set_userate(::google::protobuf::int32 value);

  // optional bool debuf = 7;
  inline bool has_debuf() const;
  inline void clear_debuf();
  static const int kDebufFieldNumber = 7;
  inline bool debuf() const;
  inline void set_debuf(bool value);

  // optional int32 duration = 8;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 8;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // optional int32 target = 9;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 9;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // optional int32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 element = 11;
  inline bool has_element() const;
  inline void clear_element();
  static const int kElementFieldNumber = 11;
  inline ::google::protobuf::int32 element() const;
  inline void set_element(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.common.Buff)
 private:
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_damage_rate();
  inline void clear_has_damage_rate();
  inline void set_has_userate();
  inline void clear_has_userate();
  inline void set_has_debuf();
  inline void clear_has_debuf();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_element();
  inline void clear_has_element();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 damage_rate_;
  ::google::protobuf::int32 userate_;
  bool debuf_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 element_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  friend void protobuf_AssignDesc_common_2fskill_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_common_2fskill_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Buff* default_instance_;
};
// ===================================================================


// ===================================================================

// Skill

// optional int32 skillId = 2;
inline bool Skill::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Skill::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Skill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Skill::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 Skill::skillid() const {
  return skillid_;
}
inline void Skill::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional string name = 3;
inline bool Skill::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Skill::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Skill::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Skill::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Skill::name() const {
  return *name_;
}
inline void Skill::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Skill::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Skill::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Skill::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Skill::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Skill::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 4;
inline bool Skill::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Skill::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Skill::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Skill::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Skill::type() const {
  return type_;
}
inline void Skill::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 useRate = 5;
inline bool Skill::has_userate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Skill::set_has_userate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Skill::clear_has_userate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Skill::clear_userate() {
  userate_ = 0;
  clear_has_userate();
}
inline ::google::protobuf::int32 Skill::userate() const {
  return userate_;
}
inline void Skill::set_userate(::google::protobuf::int32 value) {
  set_has_userate();
  userate_ = value;
}

// optional int32 cost = 6;
inline bool Skill::has_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Skill::set_has_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Skill::clear_has_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Skill::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 Skill::cost() const {
  return cost_;
}
inline void Skill::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional int32 level = 7;
inline bool Skill::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Skill::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Skill::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Skill::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Skill::level() const {
  return level_;
}
inline void Skill::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bool move = 8;
inline bool Skill::has_move() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Skill::set_has_move() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Skill::clear_has_move() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Skill::clear_move() {
  move_ = false;
  clear_has_move();
}
inline bool Skill::move() const {
  return move_;
}
inline void Skill::set_move(bool value) {
  set_has_move();
  move_ = value;
}

// optional int32 maxLevel = 17;
inline bool Skill::has_maxlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Skill::set_has_maxlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Skill::clear_has_maxlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Skill::clear_maxlevel() {
  maxlevel_ = 0;
  clear_has_maxlevel();
}
inline ::google::protobuf::int32 Skill::maxlevel() const {
  return maxlevel_;
}
inline void Skill::set_maxlevel(::google::protobuf::int32 value) {
  set_has_maxlevel();
  maxlevel_ = value;
}

// optional int32 coldDown = 18;
inline bool Skill::has_colddown() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Skill::set_has_colddown() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Skill::clear_has_colddown() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Skill::clear_colddown() {
  colddown_ = 0;
  clear_has_colddown();
}
inline ::google::protobuf::int32 Skill::colddown() const {
  return colddown_;
}
inline void Skill::set_colddown(::google::protobuf::int32 value) {
  set_has_colddown();
  colddown_ = value;
}

// optional int32 target = 14;
inline bool Skill::has_target() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Skill::set_has_target() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Skill::clear_has_target() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Skill::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 Skill::target() const {
  return target_;
}
inline void Skill::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// optional int32 pro_type = 15;
inline bool Skill::has_pro_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Skill::set_has_pro_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Skill::clear_has_pro_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Skill::clear_pro_type() {
  pro_type_ = 0;
  clear_has_pro_type();
}
inline ::google::protobuf::int32 Skill::pro_type() const {
  return pro_type_;
}
inline void Skill::set_pro_type(::google::protobuf::int32 value) {
  set_has_pro_type();
  pro_type_ = value;
}

// optional int32 pro_rate = 16;
inline bool Skill::has_pro_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Skill::set_has_pro_rate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Skill::clear_has_pro_rate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Skill::clear_pro_rate() {
  pro_rate_ = 0;
  clear_has_pro_rate();
}
inline ::google::protobuf::int32 Skill::pro_rate() const {
  return pro_rate_;
}
inline void Skill::set_pro_rate(::google::protobuf::int32 value) {
  set_has_pro_rate();
  pro_rate_ = value;
}

// optional int32 multiEff = 19;
inline bool Skill::has_multieff() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Skill::set_has_multieff() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Skill::clear_has_multieff() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Skill::clear_multieff() {
  multieff_ = 0;
  clear_has_multieff();
}
inline ::google::protobuf::int32 Skill::multieff() const {
  return multieff_;
}
inline void Skill::set_multieff(::google::protobuf::int32 value) {
  set_has_multieff();
  multieff_ = value;
}

// repeated .protos.common.Effect effect = 20;
inline int Skill::effect_size() const {
  return effect_.size();
}
inline void Skill::clear_effect() {
  effect_.Clear();
}
inline const ::protos::common::Effect& Skill::effect(int index) const {
  return effect_.Get(index);
}
inline ::protos::common::Effect* Skill::mutable_effect(int index) {
  return effect_.Mutable(index);
}
inline ::protos::common::Effect* Skill::add_effect() {
  return effect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Effect >&
Skill::effect() const {
  return effect_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Effect >*
Skill::mutable_effect() {
  return &effect_;
}

// optional int32 activeQuality = 21;
inline bool Skill::has_activequality() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Skill::set_has_activequality() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Skill::clear_has_activequality() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Skill::clear_activequality() {
  activequality_ = 0;
  clear_has_activequality();
}
inline ::google::protobuf::int32 Skill::activequality() const {
  return activequality_;
}
inline void Skill::set_activequality(::google::protobuf::int32 value) {
  set_has_activequality();
  activequality_ = value;
}

// -------------------------------------------------------------------

// Effect

// optional int32 effectId = 1;
inline bool Effect::has_effectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Effect::set_has_effectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Effect::clear_has_effectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Effect::clear_effectid() {
  effectid_ = 0;
  clear_has_effectid();
}
inline ::google::protobuf::int32 Effect::effectid() const {
  return effectid_;
}
inline void Effect::set_effectid(::google::protobuf::int32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional string name = 2;
inline bool Effect::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Effect::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Effect::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Effect::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Effect::name() const {
  return *name_;
}
inline void Effect::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Effect::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Effect::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Effect::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Effect::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Effect::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 userRate = 3;
inline bool Effect::has_userrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Effect::set_has_userrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Effect::clear_has_userrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Effect::clear_userrate() {
  userrate_ = 0;
  clear_has_userrate();
}
inline ::google::protobuf::int32 Effect::userrate() const {
  return userrate_;
}
inline void Effect::set_userrate(::google::protobuf::int32 value) {
  set_has_userrate();
  userrate_ = value;
}

// optional sint32 cost = 4;
inline bool Effect::has_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Effect::set_has_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Effect::clear_has_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Effect::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 Effect::cost() const {
  return cost_;
}
inline void Effect::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
}

// optional sint32 damage = 5;
inline bool Effect::has_damage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Effect::set_has_damage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Effect::clear_has_damage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Effect::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 Effect::damage() const {
  return damage_;
}
inline void Effect::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// optional int32 hurt = 6;
inline bool Effect::has_hurt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Effect::set_has_hurt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Effect::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Effect::clear_hurt() {
  hurt_ = 0;
  clear_has_hurt();
}
inline ::google::protobuf::int32 Effect::hurt() const {
  return hurt_;
}
inline void Effect::set_hurt(::google::protobuf::int32 value) {
  set_has_hurt();
  hurt_ = value;
}

// optional int32 target = 7;
inline bool Effect::has_target() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Effect::set_has_target() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Effect::clear_has_target() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Effect::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 Effect::target() const {
  return target_;
}
inline void Effect::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// optional int32 group = 8;
inline bool Effect::has_group() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Effect::set_has_group() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Effect::clear_has_group() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Effect::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 Effect::group() const {
  return group_;
}
inline void Effect::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 pos = 9;
inline bool Effect::has_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Effect::set_has_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Effect::clear_has_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Effect::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Effect::pos() const {
  return pos_;
}
inline void Effect::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 pro_type = 10;
inline bool Effect::has_pro_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Effect::set_has_pro_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Effect::clear_has_pro_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Effect::clear_pro_type() {
  pro_type_ = 0;
  clear_has_pro_type();
}
inline ::google::protobuf::int32 Effect::pro_type() const {
  return pro_type_;
}
inline void Effect::set_pro_type(::google::protobuf::int32 value) {
  set_has_pro_type();
  pro_type_ = value;
}

// optional int32 pro_rate = 11;
inline bool Effect::has_pro_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Effect::set_has_pro_rate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Effect::clear_has_pro_rate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Effect::clear_pro_rate() {
  pro_rate_ = 0;
  clear_has_pro_rate();
}
inline ::google::protobuf::int32 Effect::pro_rate() const {
  return pro_rate_;
}
inline void Effect::set_pro_rate(::google::protobuf::int32 value) {
  set_has_pro_rate();
  pro_rate_ = value;
}

// optional int32 batter = 12;
inline bool Effect::has_batter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Effect::set_has_batter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Effect::clear_has_batter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Effect::clear_batter() {
  batter_ = 0;
  clear_has_batter();
}
inline ::google::protobuf::int32 Effect::batter() const {
  return batter_;
}
inline void Effect::set_batter(::google::protobuf::int32 value) {
  set_has_batter();
  batter_ = value;
}

// optional sint32 repel = 13;
inline bool Effect::has_repel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Effect::set_has_repel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Effect::clear_has_repel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Effect::clear_repel() {
  repel_ = 0;
  clear_has_repel();
}
inline ::google::protobuf::int32 Effect::repel() const {
  return repel_;
}
inline void Effect::set_repel(::google::protobuf::int32 value) {
  set_has_repel();
  repel_ = value;
}

// optional int32 erange = 14;
inline bool Effect::has_erange() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Effect::set_has_erange() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Effect::clear_has_erange() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Effect::clear_erange() {
  erange_ = 0;
  clear_has_erange();
}
inline ::google::protobuf::int32 Effect::erange() const {
  return erange_;
}
inline void Effect::set_erange(::google::protobuf::int32 value) {
  set_has_erange();
  erange_ = value;
}

// optional int32 mode = 15;
inline bool Effect::has_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Effect::set_has_mode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Effect::clear_has_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Effect::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 Effect::mode() const {
  return mode_;
}
inline void Effect::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional int32 type = 16;
inline bool Effect::has_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Effect::set_has_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Effect::clear_has_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Effect::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Effect::type() const {
  return type_;
}
inline void Effect::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional sint32 distance = 17;
inline bool Effect::has_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Effect::set_has_distance() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Effect::clear_has_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Effect::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 Effect::distance() const {
  return distance_;
}
inline void Effect::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
}

// optional int32 range = 18;
inline bool Effect::has_range() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Effect::set_has_range() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Effect::clear_has_range() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Effect::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline ::google::protobuf::int32 Effect::range() const {
  return range_;
}
inline void Effect::set_range(::google::protobuf::int32 value) {
  set_has_range();
  range_ = value;
}

// repeated .protos.common.Buff buffList = 19;
inline int Effect::bufflist_size() const {
  return bufflist_.size();
}
inline void Effect::clear_bufflist() {
  bufflist_.Clear();
}
inline const ::protos::common::Buff& Effect::bufflist(int index) const {
  return bufflist_.Get(index);
}
inline ::protos::common::Buff* Effect::mutable_bufflist(int index) {
  return bufflist_.Mutable(index);
}
inline ::protos::common::Buff* Effect::add_bufflist() {
  return bufflist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Buff >&
Effect::bufflist() const {
  return bufflist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Buff >*
Effect::mutable_bufflist() {
  return &bufflist_;
}

// -------------------------------------------------------------------

// Buff

// optional int32 buffId = 1;
inline bool Buff::has_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Buff::set_has_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Buff::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Buff::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 Buff::buffid() const {
  return buffid_;
}
inline void Buff::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
}

// optional int32 type = 2;
inline bool Buff::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Buff::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Buff::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Buff::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Buff::type() const {
  return type_;
}
inline void Buff::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string name = 3;
inline bool Buff::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Buff::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Buff::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Buff::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Buff::name() const {
  return *name_;
}
inline void Buff::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Buff::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Buff::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Buff::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Buff::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Buff::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 damage = 4;
inline bool Buff::has_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Buff::set_has_damage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Buff::clear_has_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Buff::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 Buff::damage() const {
  return damage_;
}
inline void Buff::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// optional int32 damage_rate = 5;
inline bool Buff::has_damage_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Buff::set_has_damage_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Buff::clear_has_damage_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Buff::clear_damage_rate() {
  damage_rate_ = 0;
  clear_has_damage_rate();
}
inline ::google::protobuf::int32 Buff::damage_rate() const {
  return damage_rate_;
}
inline void Buff::set_damage_rate(::google::protobuf::int32 value) {
  set_has_damage_rate();
  damage_rate_ = value;
}

// optional int32 useRate = 6;
inline bool Buff::has_userate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Buff::set_has_userate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Buff::clear_has_userate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Buff::clear_userate() {
  userate_ = 0;
  clear_has_userate();
}
inline ::google::protobuf::int32 Buff::userate() const {
  return userate_;
}
inline void Buff::set_userate(::google::protobuf::int32 value) {
  set_has_userate();
  userate_ = value;
}

// optional bool debuf = 7;
inline bool Buff::has_debuf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Buff::set_has_debuf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Buff::clear_has_debuf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Buff::clear_debuf() {
  debuf_ = false;
  clear_has_debuf();
}
inline bool Buff::debuf() const {
  return debuf_;
}
inline void Buff::set_debuf(bool value) {
  set_has_debuf();
  debuf_ = value;
}

// optional int32 duration = 8;
inline bool Buff::has_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Buff::set_has_duration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Buff::clear_has_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Buff::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 Buff::duration() const {
  return duration_;
}
inline void Buff::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
}

// optional int32 target = 9;
inline bool Buff::has_target() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Buff::set_has_target() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Buff::clear_has_target() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Buff::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 Buff::target() const {
  return target_;
}
inline void Buff::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// optional int32 level = 10;
inline bool Buff::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Buff::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Buff::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Buff::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Buff::level() const {
  return level_;
}
inline void Buff::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 element = 11;
inline bool Buff::has_element() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Buff::set_has_element() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Buff::clear_has_element() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Buff::clear_element() {
  element_ = 0;
  clear_has_element();
}
inline ::google::protobuf::int32 Buff::element() const {
  return element_;
}
inline void Buff::set_element(::google::protobuf::int32 value) {
  set_has_element();
  element_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fskill_5fcommon_2eproto__INCLUDED
