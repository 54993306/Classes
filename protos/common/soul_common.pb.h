// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/soul_common.proto

#ifndef PROTOBUF_common_2fsoul_5fcommon_2eproto__INCLUDED
#define PROTOBUF_common_2fsoul_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "skill_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2fsoul_5fcommon_2eproto();
void protobuf_AssignDesc_common_2fsoul_5fcommon_2eproto();
void protobuf_ShutdownFile_common_2fsoul_5fcommon_2eproto();

class Soul;

// ===================================================================

class Soul : public ::google::protobuf::Message {
 public:
  Soul();
  virtual ~Soul();

  Soul(const Soul& from);

  inline Soul& operator=(const Soul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Soul& default_instance();

  void Swap(Soul* other);

  // implements Message ----------------------------------------------

  Soul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Soul& from);
  void MergeFrom(const Soul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 refId = 1;
  inline bool has_refid() const;
  inline void clear_refid();
  static const int kRefIdFieldNumber = 1;
  inline ::google::protobuf::int32 refid() const;
  inline void set_refid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 atk = 4;
  inline bool has_atk() const;
  inline void clear_atk();
  static const int kAtkFieldNumber = 4;
  inline ::google::protobuf::int32 atk() const;
  inline void set_atk(::google::protobuf::int32 value);

  // optional int32 def = 5;
  inline bool has_def() const;
  inline void clear_def();
  static const int kDefFieldNumber = 5;
  inline ::google::protobuf::int32 def() const;
  inline void set_def(::google::protobuf::int32 value);

  // optional int32 crit = 6;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 6;
  inline ::google::protobuf::int32 crit() const;
  inline void set_crit(::google::protobuf::int32 value);

  // optional int32 dex = 7;
  inline bool has_dex() const;
  inline void clear_dex();
  static const int kDexFieldNumber = 7;
  inline ::google::protobuf::int32 dex() const;
  inline void set_dex(::google::protobuf::int32 value);

  // optional int32 addHp = 8;
  inline bool has_addhp() const;
  inline void clear_addhp();
  static const int kAddHpFieldNumber = 8;
  inline ::google::protobuf::int32 addhp() const;
  inline void set_addhp(::google::protobuf::int32 value);

  // optional int32 addAtk = 9;
  inline bool has_addatk() const;
  inline void clear_addatk();
  static const int kAddAtkFieldNumber = 9;
  inline ::google::protobuf::int32 addatk() const;
  inline void set_addatk(::google::protobuf::int32 value);

  // optional int32 addDef = 10;
  inline bool has_adddef() const;
  inline void clear_adddef();
  static const int kAddDefFieldNumber = 10;
  inline ::google::protobuf::int32 adddef() const;
  inline void set_adddef(::google::protobuf::int32 value);

  // optional int32 hit = 11;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 11;
  inline ::google::protobuf::int32 hit() const;
  inline void set_hit(::google::protobuf::int32 value);

  // optional int32 soulType = 12;
  inline bool has_soultype() const;
  inline void clear_soultype();
  static const int kSoulTypeFieldNumber = 12;
  inline ::google::protobuf::int32 soultype() const;
  inline void set_soultype(::google::protobuf::int32 value);

  // optional int32 thumb = 13;
  inline bool has_thumb() const;
  inline void clear_thumb();
  static const int kThumbFieldNumber = 13;
  inline ::google::protobuf::int32 thumb() const;
  inline void set_thumb(::google::protobuf::int32 value);

  // optional int32 quality = 14;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 14;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 move1 = 15;
  inline bool has_move1() const;
  inline void clear_move1();
  static const int kMove1FieldNumber = 15;
  inline ::google::protobuf::int32 move1() const;
  inline void set_move1(::google::protobuf::int32 value);

  // optional int32 move2 = 16;
  inline bool has_move2() const;
  inline void clear_move2();
  static const int kMove2FieldNumber = 16;
  inline ::google::protobuf::int32 move2() const;
  inline void set_move2(::google::protobuf::int32 value);

  // optional int32 move3 = 17;
  inline bool has_move3() const;
  inline void clear_move3();
  static const int kMove3FieldNumber = 17;
  inline ::google::protobuf::int32 move3() const;
  inline void set_move3(::google::protobuf::int32 value);

  // optional int32 move4 = 18;
  inline bool has_move4() const;
  inline void clear_move4();
  static const int kMove4FieldNumber = 18;
  inline ::google::protobuf::int32 move4() const;
  inline void set_move4(::google::protobuf::int32 value);

  // optional int32 move5 = 19;
  inline bool has_move5() const;
  inline void clear_move5();
  static const int kMove5FieldNumber = 19;
  inline ::google::protobuf::int32 move5() const;
  inline void set_move5(::google::protobuf::int32 value);

  // optional .protos.common.Skill skill1 = 20;
  inline bool has_skill1() const;
  inline void clear_skill1();
  static const int kSkill1FieldNumber = 20;
  inline const ::protos::common::Skill& skill1() const;
  inline ::protos::common::Skill* mutable_skill1();
  inline ::protos::common::Skill* release_skill1();
  inline void set_allocated_skill1(::protos::common::Skill* skill1);

  // optional .protos.common.Skill skill2 = 21;
  inline bool has_skill2() const;
  inline void clear_skill2();
  static const int kSkill2FieldNumber = 21;
  inline const ::protos::common::Skill& skill2() const;
  inline ::protos::common::Skill* mutable_skill2();
  inline ::protos::common::Skill* release_skill2();
  inline void set_allocated_skill2(::protos::common::Skill* skill2);

  // optional .protos.common.Skill skill3 = 22;
  inline bool has_skill3() const;
  inline void clear_skill3();
  static const int kSkill3FieldNumber = 22;
  inline const ::protos::common::Skill& skill3() const;
  inline ::protos::common::Skill* mutable_skill3();
  inline ::protos::common::Skill* release_skill3();
  inline void set_allocated_skill3(::protos::common::Skill* skill3);

  // optional .protos.common.Skill skill4 = 23;
  inline bool has_skill4() const;
  inline void clear_skill4();
  static const int kSkill4FieldNumber = 23;
  inline const ::protos::common::Skill& skill4() const;
  inline ::protos::common::Skill* mutable_skill4();
  inline ::protos::common::Skill* release_skill4();
  inline void set_allocated_skill4(::protos::common::Skill* skill4);

  // optional .protos.common.Skill skill5 = 24;
  inline bool has_skill5() const;
  inline void clear_skill5();
  static const int kSkill5FieldNumber = 24;
  inline const ::protos::common::Skill& skill5() const;
  inline ::protos::common::Skill* mutable_skill5();
  inline ::protos::common::Skill* release_skill5();
  inline void set_allocated_skill5(::protos::common::Skill* skill5);

  // optional .protos.common.Skill skill6 = 25;
  inline bool has_skill6() const;
  inline void clear_skill6();
  static const int kSkill6FieldNumber = 25;
  inline const ::protos::common::Skill& skill6() const;
  inline ::protos::common::Skill* mutable_skill6();
  inline ::protos::common::Skill* release_skill6();
  inline void set_allocated_skill6(::protos::common::Skill* skill6);

  // optional .protos.common.Skill skill7 = 26;
  inline bool has_skill7() const;
  inline void clear_skill7();
  static const int kSkill7FieldNumber = 26;
  inline const ::protos::common::Skill& skill7() const;
  inline ::protos::common::Skill* mutable_skill7();
  inline ::protos::common::Skill* release_skill7();
  inline void set_allocated_skill7(::protos::common::Skill* skill7);

  // @@protoc_insertion_point(class_scope:protos.common.Soul)
 private:
  inline void set_has_refid();
  inline void clear_has_refid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_atk();
  inline void clear_has_atk();
  inline void set_has_def();
  inline void clear_has_def();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_dex();
  inline void clear_has_dex();
  inline void set_has_addhp();
  inline void clear_has_addhp();
  inline void set_has_addatk();
  inline void clear_has_addatk();
  inline void set_has_adddef();
  inline void clear_has_adddef();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_soultype();
  inline void clear_has_soultype();
  inline void set_has_thumb();
  inline void clear_has_thumb();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_move1();
  inline void clear_has_move1();
  inline void set_has_move2();
  inline void clear_has_move2();
  inline void set_has_move3();
  inline void clear_has_move3();
  inline void set_has_move4();
  inline void clear_has_move4();
  inline void set_has_move5();
  inline void clear_has_move5();
  inline void set_has_skill1();
  inline void clear_has_skill1();
  inline void set_has_skill2();
  inline void clear_has_skill2();
  inline void set_has_skill3();
  inline void clear_has_skill3();
  inline void set_has_skill4();
  inline void clear_has_skill4();
  inline void set_has_skill5();
  inline void clear_has_skill5();
  inline void set_has_skill6();
  inline void clear_has_skill6();
  inline void set_has_skill7();
  inline void clear_has_skill7();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 refid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 atk_;
  ::google::protobuf::int32 def_;
  ::google::protobuf::int32 crit_;
  ::google::protobuf::int32 dex_;
  ::google::protobuf::int32 addhp_;
  ::google::protobuf::int32 addatk_;
  ::google::protobuf::int32 adddef_;
  ::google::protobuf::int32 hit_;
  ::google::protobuf::int32 soultype_;
  ::google::protobuf::int32 thumb_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 move1_;
  ::google::protobuf::int32 move2_;
  ::google::protobuf::int32 move3_;
  ::google::protobuf::int32 move4_;
  ::google::protobuf::int32 move5_;
  ::protos::common::Skill* skill1_;
  ::protos::common::Skill* skill2_;
  ::protos::common::Skill* skill3_;
  ::protos::common::Skill* skill4_;
  ::protos::common::Skill* skill5_;
  ::protos::common::Skill* skill6_;
  ::protos::common::Skill* skill7_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_common_2fsoul_5fcommon_2eproto();
  friend void protobuf_AssignDesc_common_2fsoul_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_common_2fsoul_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Soul* default_instance_;
};
// ===================================================================


// ===================================================================

// Soul

// optional int32 refId = 1;
inline bool Soul::has_refid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Soul::set_has_refid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Soul::clear_has_refid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Soul::clear_refid() {
  refid_ = 0;
  clear_has_refid();
}
inline ::google::protobuf::int32 Soul::refid() const {
  return refid_;
}
inline void Soul::set_refid(::google::protobuf::int32 value) {
  set_has_refid();
  refid_ = value;
}

// optional string name = 2;
inline bool Soul::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Soul::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Soul::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Soul::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Soul::name() const {
  return *name_;
}
inline void Soul::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Soul::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Soul::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Soul::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Soul::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Soul::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 hp = 3;
inline bool Soul::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Soul::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Soul::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Soul::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 Soul::hp() const {
  return hp_;
}
inline void Soul::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 atk = 4;
inline bool Soul::has_atk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Soul::set_has_atk() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Soul::clear_has_atk() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Soul::clear_atk() {
  atk_ = 0;
  clear_has_atk();
}
inline ::google::protobuf::int32 Soul::atk() const {
  return atk_;
}
inline void Soul::set_atk(::google::protobuf::int32 value) {
  set_has_atk();
  atk_ = value;
}

// optional int32 def = 5;
inline bool Soul::has_def() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Soul::set_has_def() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Soul::clear_has_def() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Soul::clear_def() {
  def_ = 0;
  clear_has_def();
}
inline ::google::protobuf::int32 Soul::def() const {
  return def_;
}
inline void Soul::set_def(::google::protobuf::int32 value) {
  set_has_def();
  def_ = value;
}

// optional int32 crit = 6;
inline bool Soul::has_crit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Soul::set_has_crit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Soul::clear_has_crit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Soul::clear_crit() {
  crit_ = 0;
  clear_has_crit();
}
inline ::google::protobuf::int32 Soul::crit() const {
  return crit_;
}
inline void Soul::set_crit(::google::protobuf::int32 value) {
  set_has_crit();
  crit_ = value;
}

// optional int32 dex = 7;
inline bool Soul::has_dex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Soul::set_has_dex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Soul::clear_has_dex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Soul::clear_dex() {
  dex_ = 0;
  clear_has_dex();
}
inline ::google::protobuf::int32 Soul::dex() const {
  return dex_;
}
inline void Soul::set_dex(::google::protobuf::int32 value) {
  set_has_dex();
  dex_ = value;
}

// optional int32 addHp = 8;
inline bool Soul::has_addhp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Soul::set_has_addhp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Soul::clear_has_addhp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Soul::clear_addhp() {
  addhp_ = 0;
  clear_has_addhp();
}
inline ::google::protobuf::int32 Soul::addhp() const {
  return addhp_;
}
inline void Soul::set_addhp(::google::protobuf::int32 value) {
  set_has_addhp();
  addhp_ = value;
}

// optional int32 addAtk = 9;
inline bool Soul::has_addatk() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Soul::set_has_addatk() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Soul::clear_has_addatk() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Soul::clear_addatk() {
  addatk_ = 0;
  clear_has_addatk();
}
inline ::google::protobuf::int32 Soul::addatk() const {
  return addatk_;
}
inline void Soul::set_addatk(::google::protobuf::int32 value) {
  set_has_addatk();
  addatk_ = value;
}

// optional int32 addDef = 10;
inline bool Soul::has_adddef() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Soul::set_has_adddef() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Soul::clear_has_adddef() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Soul::clear_adddef() {
  adddef_ = 0;
  clear_has_adddef();
}
inline ::google::protobuf::int32 Soul::adddef() const {
  return adddef_;
}
inline void Soul::set_adddef(::google::protobuf::int32 value) {
  set_has_adddef();
  adddef_ = value;
}

// optional int32 hit = 11;
inline bool Soul::has_hit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Soul::set_has_hit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Soul::clear_has_hit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Soul::clear_hit() {
  hit_ = 0;
  clear_has_hit();
}
inline ::google::protobuf::int32 Soul::hit() const {
  return hit_;
}
inline void Soul::set_hit(::google::protobuf::int32 value) {
  set_has_hit();
  hit_ = value;
}

// optional int32 soulType = 12;
inline bool Soul::has_soultype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Soul::set_has_soultype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Soul::clear_has_soultype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Soul::clear_soultype() {
  soultype_ = 0;
  clear_has_soultype();
}
inline ::google::protobuf::int32 Soul::soultype() const {
  return soultype_;
}
inline void Soul::set_soultype(::google::protobuf::int32 value) {
  set_has_soultype();
  soultype_ = value;
}

// optional int32 thumb = 13;
inline bool Soul::has_thumb() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Soul::set_has_thumb() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Soul::clear_has_thumb() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Soul::clear_thumb() {
  thumb_ = 0;
  clear_has_thumb();
}
inline ::google::protobuf::int32 Soul::thumb() const {
  return thumb_;
}
inline void Soul::set_thumb(::google::protobuf::int32 value) {
  set_has_thumb();
  thumb_ = value;
}

// optional int32 quality = 14;
inline bool Soul::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Soul::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Soul::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Soul::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 Soul::quality() const {
  return quality_;
}
inline void Soul::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 move1 = 15;
inline bool Soul::has_move1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Soul::set_has_move1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Soul::clear_has_move1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Soul::clear_move1() {
  move1_ = 0;
  clear_has_move1();
}
inline ::google::protobuf::int32 Soul::move1() const {
  return move1_;
}
inline void Soul::set_move1(::google::protobuf::int32 value) {
  set_has_move1();
  move1_ = value;
}

// optional int32 move2 = 16;
inline bool Soul::has_move2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Soul::set_has_move2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Soul::clear_has_move2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Soul::clear_move2() {
  move2_ = 0;
  clear_has_move2();
}
inline ::google::protobuf::int32 Soul::move2() const {
  return move2_;
}
inline void Soul::set_move2(::google::protobuf::int32 value) {
  set_has_move2();
  move2_ = value;
}

// optional int32 move3 = 17;
inline bool Soul::has_move3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Soul::set_has_move3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Soul::clear_has_move3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Soul::clear_move3() {
  move3_ = 0;
  clear_has_move3();
}
inline ::google::protobuf::int32 Soul::move3() const {
  return move3_;
}
inline void Soul::set_move3(::google::protobuf::int32 value) {
  set_has_move3();
  move3_ = value;
}

// optional int32 move4 = 18;
inline bool Soul::has_move4() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Soul::set_has_move4() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Soul::clear_has_move4() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Soul::clear_move4() {
  move4_ = 0;
  clear_has_move4();
}
inline ::google::protobuf::int32 Soul::move4() const {
  return move4_;
}
inline void Soul::set_move4(::google::protobuf::int32 value) {
  set_has_move4();
  move4_ = value;
}

// optional int32 move5 = 19;
inline bool Soul::has_move5() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Soul::set_has_move5() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Soul::clear_has_move5() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Soul::clear_move5() {
  move5_ = 0;
  clear_has_move5();
}
inline ::google::protobuf::int32 Soul::move5() const {
  return move5_;
}
inline void Soul::set_move5(::google::protobuf::int32 value) {
  set_has_move5();
  move5_ = value;
}

// optional .protos.common.Skill skill1 = 20;
inline bool Soul::has_skill1() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Soul::set_has_skill1() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Soul::clear_has_skill1() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Soul::clear_skill1() {
  if (skill1_ != NULL) skill1_->::protos::common::Skill::Clear();
  clear_has_skill1();
}
inline const ::protos::common::Skill& Soul::skill1() const {
  return skill1_ != NULL ? *skill1_ : *default_instance_->skill1_;
}
inline ::protos::common::Skill* Soul::mutable_skill1() {
  set_has_skill1();
  if (skill1_ == NULL) skill1_ = new ::protos::common::Skill;
  return skill1_;
}
inline ::protos::common::Skill* Soul::release_skill1() {
  clear_has_skill1();
  ::protos::common::Skill* temp = skill1_;
  skill1_ = NULL;
  return temp;
}
inline void Soul::set_allocated_skill1(::protos::common::Skill* skill1) {
  delete skill1_;
  skill1_ = skill1;
  if (skill1) {
    set_has_skill1();
  } else {
    clear_has_skill1();
  }
}

// optional .protos.common.Skill skill2 = 21;
inline bool Soul::has_skill2() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Soul::set_has_skill2() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Soul::clear_has_skill2() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Soul::clear_skill2() {
  if (skill2_ != NULL) skill2_->::protos::common::Skill::Clear();
  clear_has_skill2();
}
inline const ::protos::common::Skill& Soul::skill2() const {
  return skill2_ != NULL ? *skill2_ : *default_instance_->skill2_;
}
inline ::protos::common::Skill* Soul::mutable_skill2() {
  set_has_skill2();
  if (skill2_ == NULL) skill2_ = new ::protos::common::Skill;
  return skill2_;
}
inline ::protos::common::Skill* Soul::release_skill2() {
  clear_has_skill2();
  ::protos::common::Skill* temp = skill2_;
  skill2_ = NULL;
  return temp;
}
inline void Soul::set_allocated_skill2(::protos::common::Skill* skill2) {
  delete skill2_;
  skill2_ = skill2;
  if (skill2) {
    set_has_skill2();
  } else {
    clear_has_skill2();
  }
}

// optional .protos.common.Skill skill3 = 22;
inline bool Soul::has_skill3() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Soul::set_has_skill3() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Soul::clear_has_skill3() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Soul::clear_skill3() {
  if (skill3_ != NULL) skill3_->::protos::common::Skill::Clear();
  clear_has_skill3();
}
inline const ::protos::common::Skill& Soul::skill3() const {
  return skill3_ != NULL ? *skill3_ : *default_instance_->skill3_;
}
inline ::protos::common::Skill* Soul::mutable_skill3() {
  set_has_skill3();
  if (skill3_ == NULL) skill3_ = new ::protos::common::Skill;
  return skill3_;
}
inline ::protos::common::Skill* Soul::release_skill3() {
  clear_has_skill3();
  ::protos::common::Skill* temp = skill3_;
  skill3_ = NULL;
  return temp;
}
inline void Soul::set_allocated_skill3(::protos::common::Skill* skill3) {
  delete skill3_;
  skill3_ = skill3;
  if (skill3) {
    set_has_skill3();
  } else {
    clear_has_skill3();
  }
}

// optional .protos.common.Skill skill4 = 23;
inline bool Soul::has_skill4() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Soul::set_has_skill4() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Soul::clear_has_skill4() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Soul::clear_skill4() {
  if (skill4_ != NULL) skill4_->::protos::common::Skill::Clear();
  clear_has_skill4();
}
inline const ::protos::common::Skill& Soul::skill4() const {
  return skill4_ != NULL ? *skill4_ : *default_instance_->skill4_;
}
inline ::protos::common::Skill* Soul::mutable_skill4() {
  set_has_skill4();
  if (skill4_ == NULL) skill4_ = new ::protos::common::Skill;
  return skill4_;
}
inline ::protos::common::Skill* Soul::release_skill4() {
  clear_has_skill4();
  ::protos::common::Skill* temp = skill4_;
  skill4_ = NULL;
  return temp;
}
inline void Soul::set_allocated_skill4(::protos::common::Skill* skill4) {
  delete skill4_;
  skill4_ = skill4;
  if (skill4) {
    set_has_skill4();
  } else {
    clear_has_skill4();
  }
}

// optional .protos.common.Skill skill5 = 24;
inline bool Soul::has_skill5() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Soul::set_has_skill5() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Soul::clear_has_skill5() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Soul::clear_skill5() {
  if (skill5_ != NULL) skill5_->::protos::common::Skill::Clear();
  clear_has_skill5();
}
inline const ::protos::common::Skill& Soul::skill5() const {
  return skill5_ != NULL ? *skill5_ : *default_instance_->skill5_;
}
inline ::protos::common::Skill* Soul::mutable_skill5() {
  set_has_skill5();
  if (skill5_ == NULL) skill5_ = new ::protos::common::Skill;
  return skill5_;
}
inline ::protos::common::Skill* Soul::release_skill5() {
  clear_has_skill5();
  ::protos::common::Skill* temp = skill5_;
  skill5_ = NULL;
  return temp;
}
inline void Soul::set_allocated_skill5(::protos::common::Skill* skill5) {
  delete skill5_;
  skill5_ = skill5;
  if (skill5) {
    set_has_skill5();
  } else {
    clear_has_skill5();
  }
}

// optional .protos.common.Skill skill6 = 25;
inline bool Soul::has_skill6() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Soul::set_has_skill6() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Soul::clear_has_skill6() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Soul::clear_skill6() {
  if (skill6_ != NULL) skill6_->::protos::common::Skill::Clear();
  clear_has_skill6();
}
inline const ::protos::common::Skill& Soul::skill6() const {
  return skill6_ != NULL ? *skill6_ : *default_instance_->skill6_;
}
inline ::protos::common::Skill* Soul::mutable_skill6() {
  set_has_skill6();
  if (skill6_ == NULL) skill6_ = new ::protos::common::Skill;
  return skill6_;
}
inline ::protos::common::Skill* Soul::release_skill6() {
  clear_has_skill6();
  ::protos::common::Skill* temp = skill6_;
  skill6_ = NULL;
  return temp;
}
inline void Soul::set_allocated_skill6(::protos::common::Skill* skill6) {
  delete skill6_;
  skill6_ = skill6;
  if (skill6) {
    set_has_skill6();
  } else {
    clear_has_skill6();
  }
}

// optional .protos.common.Skill skill7 = 26;
inline bool Soul::has_skill7() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Soul::set_has_skill7() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Soul::clear_has_skill7() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Soul::clear_skill7() {
  if (skill7_ != NULL) skill7_->::protos::common::Skill::Clear();
  clear_has_skill7();
}
inline const ::protos::common::Skill& Soul::skill7() const {
  return skill7_ != NULL ? *skill7_ : *default_instance_->skill7_;
}
inline ::protos::common::Skill* Soul::mutable_skill7() {
  set_has_skill7();
  if (skill7_ == NULL) skill7_ = new ::protos::common::Skill;
  return skill7_;
}
inline ::protos::common::Skill* Soul::release_skill7() {
  clear_has_skill7();
  ::protos::common::Skill* temp = skill7_;
  skill7_ = NULL;
  return temp;
}
inline void Soul::set_allocated_skill7(::protos::common::Skill* skill7) {
  delete skill7_;
  skill7_ = skill7;
  if (skill7) {
    set_has_skill7();
  } else {
    clear_has_skill7();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fsoul_5fcommon_2eproto__INCLUDED
