// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/task_common.proto

#ifndef PROTOBUF_common_2ftask_5fcommon_2eproto__INCLUDED
#define PROTOBUF_common_2ftask_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "prize_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2ftask_5fcommon_2eproto();
void protobuf_AssignDesc_common_2ftask_5fcommon_2eproto();
void protobuf_ShutdownFile_common_2ftask_5fcommon_2eproto();

class Task;

// ===================================================================

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 taskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 process = 4;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 4;
  inline ::google::protobuf::int32 process() const;
  inline void set_process(::google::protobuf::int32 value);

  // optional int32 target = 5;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 5;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // optional int32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 coin = 7;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 7;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // optional int32 food = 8;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 8;
  inline ::google::protobuf::int32 food() const;
  inline void set_food(::google::protobuf::int32 value);

  // optional string note = 9;
  inline bool has_note() const;
  inline void clear_note();
  static const int kNoteFieldNumber = 9;
  inline const ::std::string& note() const;
  inline void set_note(const ::std::string& value);
  inline void set_note(const char* value);
  inline void set_note(const char* value, size_t size);
  inline ::std::string* mutable_note();
  inline ::std::string* release_note();
  inline void set_allocated_note(::std::string* note);

  // optional bool isNew = 10;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsNewFieldNumber = 10;
  inline bool isnew() const;
  inline void set_isnew(bool value);

  // optional bool finish = 11;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 11;
  inline bool finish() const;
  inline void set_finish(bool value);

  // repeated .protos.common.Prize prize = 12;
  inline int prize_size() const;
  inline void clear_prize();
  static const int kPrizeFieldNumber = 12;
  inline const ::protos::common::Prize& prize(int index) const;
  inline ::protos::common::Prize* mutable_prize(int index);
  inline ::protos::common::Prize* add_prize();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
      prize() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
      mutable_prize();

  // optional int32 tindex = 13;
  inline bool has_tindex() const;
  inline void clear_tindex();
  static const int kTindexFieldNumber = 13;
  inline ::google::protobuf::int32 tindex() const;
  inline void set_tindex(::google::protobuf::int32 value);

  // optional int32 action = 14;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 14;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // optional int32 gold = 15;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 15;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional fixed64 getTime = 16;
  inline bool has_gettime() const;
  inline void clear_gettime();
  static const int kGetTimeFieldNumber = 16;
  inline ::google::protobuf::uint64 gettime() const;
  inline void set_gettime(::google::protobuf::uint64 value);

  // optional bool end = 17;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 17;
  inline bool end() const;
  inline void set_end(bool value);

  // @@protoc_insertion_point(class_scope:protos.common.Task)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_note();
  inline void clear_has_note();
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_finish();
  inline void clear_has_finish();
  inline void set_has_tindex();
  inline void clear_has_tindex();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_gettime();
  inline void clear_has_gettime();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 process_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 coin_;
  ::std::string* note_;
  ::google::protobuf::int32 food_;
  bool isnew_;
  bool finish_;
  bool end_;
  ::google::protobuf::RepeatedPtrField< ::protos::common::Prize > prize_;
  ::google::protobuf::int32 tindex_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::uint64 gettime_;
  ::google::protobuf::int32 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_common_2ftask_5fcommon_2eproto();
  friend void protobuf_AssignDesc_common_2ftask_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_common_2ftask_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// optional int32 taskId = 1;
inline bool Task::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 Task::taskid() const {
  return taskid_;
}
inline void Task::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional string name = 2;
inline bool Task::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Task::name() const {
  return *name_;
}
inline void Task::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Task::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Task::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Task::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool Task::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Task::level() const {
  return level_;
}
inline void Task::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 process = 4;
inline bool Task::has_process() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_process() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_process() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_process() {
  process_ = 0;
  clear_has_process();
}
inline ::google::protobuf::int32 Task::process() const {
  return process_;
}
inline void Task::set_process(::google::protobuf::int32 value) {
  set_has_process();
  process_ = value;
}

// optional int32 target = 5;
inline bool Task::has_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 Task::target() const {
  return target_;
}
inline void Task::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// optional int32 exp = 6;
inline bool Task::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 Task::exp() const {
  return exp_;
}
inline void Task::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 coin = 7;
inline bool Task::has_coin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_coin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_coin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 Task::coin() const {
  return coin_;
}
inline void Task::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// optional int32 food = 8;
inline bool Task::has_food() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Task::set_has_food() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Task::clear_has_food() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Task::clear_food() {
  food_ = 0;
  clear_has_food();
}
inline ::google::protobuf::int32 Task::food() const {
  return food_;
}
inline void Task::set_food(::google::protobuf::int32 value) {
  set_has_food();
  food_ = value;
}

// optional string note = 9;
inline bool Task::has_note() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Task::set_has_note() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Task::clear_has_note() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Task::clear_note() {
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    note_->clear();
  }
  clear_has_note();
}
inline const ::std::string& Task::note() const {
  return *note_;
}
inline void Task::set_note(const ::std::string& value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void Task::set_note(const char* value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(value);
}
inline void Task::set_note(const char* value, size_t size) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  note_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_note() {
  set_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    note_ = new ::std::string;
  }
  return note_;
}
inline ::std::string* Task::release_note() {
  clear_has_note();
  if (note_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = note_;
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_note(::std::string* note) {
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (note) {
    set_has_note();
    note_ = note;
  } else {
    clear_has_note();
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isNew = 10;
inline bool Task::has_isnew() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Task::set_has_isnew() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Task::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Task::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool Task::isnew() const {
  return isnew_;
}
inline void Task::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
}

// optional bool finish = 11;
inline bool Task::has_finish() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Task::set_has_finish() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Task::clear_has_finish() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Task::clear_finish() {
  finish_ = false;
  clear_has_finish();
}
inline bool Task::finish() const {
  return finish_;
}
inline void Task::set_finish(bool value) {
  set_has_finish();
  finish_ = value;
}

// repeated .protos.common.Prize prize = 12;
inline int Task::prize_size() const {
  return prize_.size();
}
inline void Task::clear_prize() {
  prize_.Clear();
}
inline const ::protos::common::Prize& Task::prize(int index) const {
  return prize_.Get(index);
}
inline ::protos::common::Prize* Task::mutable_prize(int index) {
  return prize_.Mutable(index);
}
inline ::protos::common::Prize* Task::add_prize() {
  return prize_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
Task::prize() const {
  return prize_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
Task::mutable_prize() {
  return &prize_;
}

// optional int32 tindex = 13;
inline bool Task::has_tindex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Task::set_has_tindex() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Task::clear_has_tindex() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Task::clear_tindex() {
  tindex_ = 0;
  clear_has_tindex();
}
inline ::google::protobuf::int32 Task::tindex() const {
  return tindex_;
}
inline void Task::set_tindex(::google::protobuf::int32 value) {
  set_has_tindex();
  tindex_ = value;
}

// optional int32 action = 14;
inline bool Task::has_action() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Task::set_has_action() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Task::clear_has_action() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Task::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 Task::action() const {
  return action_;
}
inline void Task::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// optional int32 gold = 15;
inline bool Task::has_gold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Task::set_has_gold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Task::clear_has_gold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Task::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 Task::gold() const {
  return gold_;
}
inline void Task::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional fixed64 getTime = 16;
inline bool Task::has_gettime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Task::set_has_gettime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Task::clear_has_gettime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Task::clear_gettime() {
  gettime_ = GOOGLE_ULONGLONG(0);
  clear_has_gettime();
}
inline ::google::protobuf::uint64 Task::gettime() const {
  return gettime_;
}
inline void Task::set_gettime(::google::protobuf::uint64 value) {
  set_has_gettime();
  gettime_ = value;
}

// optional bool end = 17;
inline bool Task::has_end() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Task::set_has_end() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Task::clear_has_end() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Task::clear_end() {
  end_ = false;
  clear_has_end();
}
inline bool Task::end() const {
  return end_;
}
inline void Task::set_end(bool value) {
  set_has_end();
  end_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2ftask_5fcommon_2eproto__INCLUDED
