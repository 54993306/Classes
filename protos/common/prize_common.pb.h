// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/prize_common.proto

#ifndef PROTOBUF_common_2fprize_5fcommon_2eproto__INCLUDED
#define PROTOBUF_common_2fprize_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
void protobuf_AssignDesc_common_2fprize_5fcommon_2eproto();
void protobuf_ShutdownFile_common_2fprize_5fcommon_2eproto();

class Prize;

// ===================================================================

class Prize : public ::google::protobuf::Message {
 public:
  Prize();
  virtual ~Prize();

  Prize(const Prize& from);

  inline Prize& operator=(const Prize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Prize& default_instance();

  void Swap(Prize* other);

  // implements Message ----------------------------------------------

  Prize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Prize& from);
  void MergeFrom(const Prize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int32 thumb = 5;
  inline bool has_thumb() const;
  inline void clear_thumb();
  static const int kThumbFieldNumber = 5;
  inline ::google::protobuf::int32 thumb() const;
  inline void set_thumb(::google::protobuf::int32 value);

  // optional int32 color = 6;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 6;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // optional int32 param = 7;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 7;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.common.Prize)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_thumb();
  inline void clear_has_thumb();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 thumb_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_common_2fprize_5fcommon_2eproto();
  friend void protobuf_AssignDesc_common_2fprize_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_common_2fprize_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Prize* default_instance_;
};
// ===================================================================


// ===================================================================

// Prize

// optional int32 type = 1;
inline bool Prize::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Prize::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Prize::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Prize::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Prize::type() const {
  return type_;
}
inline void Prize::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool Prize::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Prize::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Prize::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Prize::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Prize::id() const {
  return id_;
}
inline void Prize::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 3;
inline bool Prize::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Prize::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Prize::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Prize::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Prize::num() const {
  return num_;
}
inline void Prize::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 quality = 4;
inline bool Prize::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Prize::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Prize::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Prize::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 Prize::quality() const {
  return quality_;
}
inline void Prize::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 thumb = 5;
inline bool Prize::has_thumb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Prize::set_has_thumb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Prize::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Prize::clear_thumb() {
  thumb_ = 0;
  clear_has_thumb();
}
inline ::google::protobuf::int32 Prize::thumb() const {
  return thumb_;
}
inline void Prize::set_thumb(::google::protobuf::int32 value) {
  set_has_thumb();
  thumb_ = value;
}

// optional int32 color = 6;
inline bool Prize::has_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Prize::set_has_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Prize::clear_has_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Prize::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Prize::color() const {
  return color_;
}
inline void Prize::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 param = 7;
inline bool Prize::has_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Prize::set_has_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Prize::clear_has_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Prize::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 Prize::param() const {
  return param_;
}
inline void Prize::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fprize_5fcommon_2eproto__INCLUDED
