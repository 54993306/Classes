// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/city_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "city_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

namespace {

const ::google::protobuf::Descriptor* City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  City_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fcity_5fcommon_2eproto() {
  protobuf_AddDesc_common_2fcity_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/city_common.proto");
  GOOGLE_CHECK(file != NULL);
  City_descriptor_ = file->message_type(0);
  static const int City_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, cityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, lvfood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, strenlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, basepe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, extpe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, cap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, maxcap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, heronum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, capfull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, isopen_),
  };
  City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      City_descriptor_,
      City::default_instance_,
      City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(City));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fcity_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    City_descriptor_, &City::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fcity_5fcommon_2eproto() {
  delete City::default_instance_;
  delete City_reflection_;
}

void protobuf_AddDesc_common_2fcity_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fhero_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030common/city_common.proto\022\rprotos.commo"
    "n\032\030common/hero_common.proto\"\225\002\n\004City\022\n\n\002"
    "id\030\001 \002(\005\022\016\n\006cityId\030\002 \002(\005\022\020\n\010cityName\030\003 \001"
    "(\t\022\r\n\005level\030\004 \001(\005\022\016\n\006lvFood\030\005 \001(\005\022\017\n\007str"
    "enLv\030\006 \001(\005\022\016\n\006basePE\030\007 \001(\005\022\r\n\005extPE\030\010 \001("
    "\005\022\013\n\003cap\030\t \001(\005\022\016\n\006maxCap\030\n \001(\005\022\017\n\007heroNu"
    "m\030\013 \001(\005\022\014\n\004hero\030\017 \001(\005\022%\n\010heroList\030\014 \003(\0132"
    "\023.protos.common.Hero\022\017\n\007capFull\030\016 \001(\010\022\014\n"
    "\004note\030\020 \001(\t\022\016\n\006isOpen\030\021 \001(\010B5\n%anvin.ser"
    "ver.gameserver.protos.commonB\nCityCommon"
    "H\001", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/city_common.proto", &protobuf_RegisterTypes);
  City::default_instance_ = new City();
  City::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fcity_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fcity_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2fcity_5fcommon_2eproto() {
    protobuf_AddDesc_common_2fcity_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2fcity_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int City::kIdFieldNumber;
const int City::kCityIdFieldNumber;
const int City::kCityNameFieldNumber;
const int City::kLevelFieldNumber;
const int City::kLvFoodFieldNumber;
const int City::kStrenLvFieldNumber;
const int City::kBasePEFieldNumber;
const int City::kExtPEFieldNumber;
const int City::kCapFieldNumber;
const int City::kMaxCapFieldNumber;
const int City::kHeroNumFieldNumber;
const int City::kHeroFieldNumber;
const int City::kHeroListFieldNumber;
const int City::kCapFullFieldNumber;
const int City::kNoteFieldNumber;
const int City::kIsOpenFieldNumber;
#endif  // !_MSC_VER

City::City()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void City::InitAsDefaultInstance() {
}

City::City(const City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void City::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cityid_ = 0;
  cityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  lvfood_ = 0;
  strenlv_ = 0;
  basepe_ = 0;
  extpe_ = 0;
  cap_ = 0;
  maxcap_ = 0;
  heronum_ = 0;
  hero_ = 0;
  capfull_ = false;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

City::~City() {
  SharedDtor();
}

void City::SharedDtor() {
  if (cityname_ != &::google::protobuf::internal::kEmptyString) {
    delete cityname_;
  }
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return City_descriptor_;
}

const City& City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fcity_5fcommon_2eproto();
  return *default_instance_;
}

City* City::default_instance_ = NULL;

City* City::New() const {
  return new City;
}

void City::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cityid_ = 0;
    if (has_cityname()) {
      if (cityname_ != &::google::protobuf::internal::kEmptyString) {
        cityname_->clear();
      }
    }
    level_ = 0;
    lvfood_ = 0;
    strenlv_ = 0;
    basepe_ = 0;
    extpe_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cap_ = 0;
    maxcap_ = 0;
    heronum_ = 0;
    hero_ = 0;
    capfull_ = false;
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::kEmptyString) {
        note_->clear();
      }
    }
    isopen_ = false;
  }
  herolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cityId;
        break;
      }

      // required int32 cityId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cityName;
        break;
      }

      // optional string cityName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cityName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cityname().data(), this->cityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lvFood;
        break;
      }

      // optional int32 lvFood = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvFood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvfood_)));
          set_has_lvfood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strenLv;
        break;
      }

      // optional int32 strenLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strenLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strenlv_)));
          set_has_strenlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_basePE;
        break;
      }

      // optional int32 basePE = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basePE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basepe_)));
          set_has_basepe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_extPE;
        break;
      }

      // optional int32 extPE = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extPE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extpe_)));
          set_has_extpe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cap;
        break;
      }

      // optional int32 cap = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cap_)));
          set_has_cap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxCap;
        break;
      }

      // optional int32 maxCap = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcap_)));
          set_has_maxcap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_heroNum;
        break;
      }

      // optional int32 heroNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heronum_)));
          set_has_heronum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_heroList;
        break;
      }

      // repeated .protos.common.Hero heroList = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_heroList;
        if (input->ExpectTag(112)) goto parse_capFull;
        break;
      }

      // optional bool capFull = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capFull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &capfull_)));
          set_has_capfull();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hero;
        break;
      }

      // optional int32 hero = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_note;
        break;
      }

      // optional string note = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_isOpen;
        break;
      }

      // optional bool isOpen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 cityId = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cityid(), output);
  }

  // optional string cityName = 3;
  if (has_cityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cityname().data(), this->cityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cityname(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 lvFood = 5;
  if (has_lvfood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lvfood(), output);
  }

  // optional int32 strenLv = 6;
  if (has_strenlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->strenlv(), output);
  }

  // optional int32 basePE = 7;
  if (has_basepe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->basepe(), output);
  }

  // optional int32 extPE = 8;
  if (has_extpe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->extpe(), output);
  }

  // optional int32 cap = 9;
  if (has_cap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cap(), output);
  }

  // optional int32 maxCap = 10;
  if (has_maxcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxcap(), output);
  }

  // optional int32 heroNum = 11;
  if (has_heronum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->heronum(), output);
  }

  // repeated .protos.common.Hero heroList = 12;
  for (int i = 0; i < this->herolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->herolist(i), output);
  }

  // optional bool capFull = 14;
  if (has_capfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->capfull(), output);
  }

  // optional int32 hero = 15;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hero(), output);
  }

  // optional string note = 16;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->note(), output);
  }

  // optional bool isOpen = 17;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 cityId = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cityid(), target);
  }

  // optional string cityName = 3;
  if (has_cityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cityname().data(), this->cityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cityname(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 lvFood = 5;
  if (has_lvfood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lvfood(), target);
  }

  // optional int32 strenLv = 6;
  if (has_strenlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->strenlv(), target);
  }

  // optional int32 basePE = 7;
  if (has_basepe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->basepe(), target);
  }

  // optional int32 extPE = 8;
  if (has_extpe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->extpe(), target);
  }

  // optional int32 cap = 9;
  if (has_cap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cap(), target);
  }

  // optional int32 maxCap = 10;
  if (has_maxcap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxcap(), target);
  }

  // optional int32 heroNum = 11;
  if (has_heronum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->heronum(), target);
  }

  // repeated .protos.common.Hero heroList = 12;
  for (int i = 0; i < this->herolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->herolist(i), target);
  }

  // optional bool capFull = 14;
  if (has_capfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->capfull(), target);
  }

  // optional int32 hero = 15;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hero(), target);
  }

  // optional string note = 16;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->note(), target);
  }

  // optional bool isOpen = 17;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 cityId = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

    // optional string cityName = 3;
    if (has_cityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cityname());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 lvFood = 5;
    if (has_lvfood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvfood());
    }

    // optional int32 strenLv = 6;
    if (has_strenlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strenlv());
    }

    // optional int32 basePE = 7;
    if (has_basepe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basepe());
    }

    // optional int32 extPE = 8;
    if (has_extpe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extpe());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cap = 9;
    if (has_cap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cap());
    }

    // optional int32 maxCap = 10;
    if (has_maxcap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcap());
    }

    // optional int32 heroNum = 11;
    if (has_heronum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heronum());
    }

    // optional int32 hero = 15;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero());
    }

    // optional bool capFull = 14;
    if (has_capfull()) {
      total_size += 1 + 1;
    }

    // optional string note = 16;
    if (has_note()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

    // optional bool isOpen = 17;
    if (has_isopen()) {
      total_size += 2 + 1;
    }

  }
  // repeated .protos.common.Hero heroList = 12;
  total_size += 1 * this->herolist_size();
  for (int i = 0; i < this->herolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void City::MergeFrom(const City& from) {
  GOOGLE_CHECK_NE(&from, this);
  herolist_.MergeFrom(from.herolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_cityname()) {
      set_cityname(from.cityname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_lvfood()) {
      set_lvfood(from.lvfood());
    }
    if (from.has_strenlv()) {
      set_strenlv(from.strenlv());
    }
    if (from.has_basepe()) {
      set_basepe(from.basepe());
    }
    if (from.has_extpe()) {
      set_extpe(from.extpe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cap()) {
      set_cap(from.cap());
    }
    if (from.has_maxcap()) {
      set_maxcap(from.maxcap());
    }
    if (from.has_heronum()) {
      set_heronum(from.heronum());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_capfull()) {
      set_capfull(from.capfull());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void City::CopyFrom(const City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void City::Swap(City* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cityid_, other->cityid_);
    std::swap(cityname_, other->cityname_);
    std::swap(level_, other->level_);
    std::swap(lvfood_, other->lvfood_);
    std::swap(strenlv_, other->strenlv_);
    std::swap(basepe_, other->basepe_);
    std::swap(extpe_, other->extpe_);
    std::swap(cap_, other->cap_);
    std::swap(maxcap_, other->maxcap_);
    std::swap(heronum_, other->heronum_);
    std::swap(hero_, other->hero_);
    herolist_.Swap(&other->herolist_);
    std::swap(capfull_, other->capfull_);
    std::swap(note_, other->note_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = City_descriptor_;
  metadata.reflection = City_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

// @@protoc_insertion_point(global_scope)
