// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/monster_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monster_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2fmonster_5fcommon_2eproto() {
  protobuf_AddDesc_common_2fmonster_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common/monster_common.proto");
  GOOGLE_CHECK(file != NULL);
  Monster_descriptor_ = file->message_type(0);
  static const int Monster_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, atkinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, renew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, minround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, maxround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, addhurtrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, cuthurtrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, poslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, zoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, move1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, move2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, move3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, move4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, move5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, skill1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, skill2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, skill3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, foe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, hasitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, monstertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, isboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, iscall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, initcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, addcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, movecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, maxcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, maxhp_),
  };
  Monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Monster_descriptor_,
      Monster::default_instance_,
      Monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Monster));
  Pos_descriptor_ = file->message_type(1);
  static const int Pos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, y_),
  };
  Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pos_descriptor_,
      Pos::default_instance_,
      Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pos));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2fmonster_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Monster_descriptor_, &Monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pos_descriptor_, &Pos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2fmonster_5fcommon_2eproto() {
  delete Monster::default_instance_;
  delete Monster_reflection_;
  delete Pos::default_instance_;
  delete Pos_reflection_;
}

void protobuf_AddDesc_common_2fmonster_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protos::common::protobuf_AddDesc_common_2fskill_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033common/monster_common.proto\022\rprotos.co"
    "mmon\032\031common/skill_common.proto\"\232\006\n\007Mons"
    "ter\022\n\n\002id\030\001 \001(\005\022\021\n\tmonsterId\030\002 \001(\005\022\014\n\004na"
    "me\030\003 \001(\t\022\013\n\003atk\030\004 \001(\005\022\013\n\003def\030\005 \001(\005\022\023\n\013at"
    "kInterval\030\006 \001(\002\022\n\n\002hp\030\007 \001(\005\022\014\n\004crit\030\010 \001("
    "\005\022\013\n\003hit\030\t \001(\005\022\r\n\005dodge\030\n \001(\005\022\r\n\005renew\030\013"
    " \001(\005\022\020\n\010minRound\030\014 \001(\005\022\020\n\010maxRound\030\r \001(\005"
    "\022\023\n\013addHurtRate\030\016 \001(\005\022\023\n\013cutHurtRate\030\017 \001"
    "(\005\022\r\n\005thumb\030\020 \001(\005\022#\n\007posList\030\021 \003(\0132\022.pro"
    "tos.common.Pos\022\014\n\004zoom\030\022 \001(\005\022\r\n\005move1\030\023 "
    "\001(\005\022\r\n\005move2\030\024 \001(\005\022\r\n\005move3\030\025 \001(\005\022\r\n\005mov"
    "e4\030\026 \001(\005\022\r\n\005move5\030\027 \001(\005\022$\n\006skill1\030\030 \001(\0132"
    "\024.protos.common.Skill\022$\n\006skill2\030\031 \001(\0132\024."
    "protos.common.Skill\022$\n\006skill3\030\032 \001(\0132\024.pr"
    "otos.common.Skill\022\013\n\003foe\030\034 \001(\005\022\017\n\007hasIte"
    "m\030\035 \001(\005\022\023\n\013monsterType\030\036 \001(\005\022\021\n\tmoveSpee"
    "d\030\037 \001(\002\022\r\n\005level\030  \001(\005\022\017\n\007quality\030! \001(\005\022"
    "\016\n\006isBoss\030\" \001(\010\022\014\n\004buff\030( \001(\005\022\016\n\006isCall\030"
    "# \001(\010\022\020\n\010initCost\030$ \001(\005\022\017\n\007addCost\030% \001(\005"
    "\022\020\n\010moveCost\030& \001(\005\022\017\n\007maxCost\030\' \001(\005\022\r\n\005d"
    "elay\030) \001(\005\022\r\n\005batch\030* \001(\005\022\014\n\004posX\030+ \001(\005\022"
    "\014\n\004posY\030, \001(\005\022\r\n\005maxHp\030- \001(\005\"\033\n\003Pos\022\t\n\001x"
    "\030\001 \002(\005\022\t\n\001y\030\002 \002(\005B8\n%anvin.server.gamese"
    "rver.protos.commonB\rMonsterCommonH\001", 955);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/monster_common.proto", &protobuf_RegisterTypes);
  Monster::default_instance_ = new Monster();
  Pos::default_instance_ = new Pos();
  Monster::default_instance_->InitAsDefaultInstance();
  Pos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2fmonster_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2fmonster_5fcommon_2eproto {
  StaticDescriptorInitializer_common_2fmonster_5fcommon_2eproto() {
    protobuf_AddDesc_common_2fmonster_5fcommon_2eproto();
  }
} static_descriptor_initializer_common_2fmonster_5fcommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Monster::kIdFieldNumber;
const int Monster::kMonsterIdFieldNumber;
const int Monster::kNameFieldNumber;
const int Monster::kAtkFieldNumber;
const int Monster::kDefFieldNumber;
const int Monster::kAtkIntervalFieldNumber;
const int Monster::kHpFieldNumber;
const int Monster::kCritFieldNumber;
const int Monster::kHitFieldNumber;
const int Monster::kDodgeFieldNumber;
const int Monster::kRenewFieldNumber;
const int Monster::kMinRoundFieldNumber;
const int Monster::kMaxRoundFieldNumber;
const int Monster::kAddHurtRateFieldNumber;
const int Monster::kCutHurtRateFieldNumber;
const int Monster::kThumbFieldNumber;
const int Monster::kPosListFieldNumber;
const int Monster::kZoomFieldNumber;
const int Monster::kMove1FieldNumber;
const int Monster::kMove2FieldNumber;
const int Monster::kMove3FieldNumber;
const int Monster::kMove4FieldNumber;
const int Monster::kMove5FieldNumber;
const int Monster::kSkill1FieldNumber;
const int Monster::kSkill2FieldNumber;
const int Monster::kSkill3FieldNumber;
const int Monster::kFoeFieldNumber;
const int Monster::kHasItemFieldNumber;
const int Monster::kMonsterTypeFieldNumber;
const int Monster::kMoveSpeedFieldNumber;
const int Monster::kLevelFieldNumber;
const int Monster::kQualityFieldNumber;
const int Monster::kIsBossFieldNumber;
const int Monster::kBuffFieldNumber;
const int Monster::kIsCallFieldNumber;
const int Monster::kInitCostFieldNumber;
const int Monster::kAddCostFieldNumber;
const int Monster::kMoveCostFieldNumber;
const int Monster::kMaxCostFieldNumber;
const int Monster::kDelayFieldNumber;
const int Monster::kBatchFieldNumber;
const int Monster::kPosXFieldNumber;
const int Monster::kPosYFieldNumber;
const int Monster::kMaxHpFieldNumber;
#endif  // !_MSC_VER

Monster::Monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Monster::InitAsDefaultInstance() {
  skill1_ = const_cast< ::protos::common::Skill*>(&::protos::common::Skill::default_instance());
  skill2_ = const_cast< ::protos::common::Skill*>(&::protos::common::Skill::default_instance());
  skill3_ = const_cast< ::protos::common::Skill*>(&::protos::common::Skill::default_instance());
}

Monster::Monster(const Monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Monster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  monsterid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atk_ = 0;
  def_ = 0;
  atkinterval_ = 0;
  hp_ = 0;
  crit_ = 0;
  hit_ = 0;
  dodge_ = 0;
  renew_ = 0;
  minround_ = 0;
  maxround_ = 0;
  addhurtrate_ = 0;
  cuthurtrate_ = 0;
  thumb_ = 0;
  zoom_ = 0;
  move1_ = 0;
  move2_ = 0;
  move3_ = 0;
  move4_ = 0;
  move5_ = 0;
  skill1_ = NULL;
  skill2_ = NULL;
  skill3_ = NULL;
  foe_ = 0;
  hasitem_ = 0;
  monstertype_ = 0;
  movespeed_ = 0;
  level_ = 0;
  quality_ = 0;
  isboss_ = false;
  buff_ = 0;
  iscall_ = false;
  initcost_ = 0;
  addcost_ = 0;
  movecost_ = 0;
  maxcost_ = 0;
  delay_ = 0;
  batch_ = 0;
  posx_ = 0;
  posy_ = 0;
  maxhp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Monster::~Monster() {
  SharedDtor();
}

void Monster::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete skill1_;
    delete skill2_;
    delete skill3_;
  }
}

void Monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monster_descriptor_;
}

const Monster& Monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fmonster_5fcommon_2eproto();
  return *default_instance_;
}

Monster* Monster::default_instance_ = NULL;

Monster* Monster::New() const {
  return new Monster;
}

void Monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    monsterid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    atk_ = 0;
    def_ = 0;
    atkinterval_ = 0;
    hp_ = 0;
    crit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hit_ = 0;
    dodge_ = 0;
    renew_ = 0;
    minround_ = 0;
    maxround_ = 0;
    addhurtrate_ = 0;
    cuthurtrate_ = 0;
    thumb_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    zoom_ = 0;
    move1_ = 0;
    move2_ = 0;
    move3_ = 0;
    move4_ = 0;
    move5_ = 0;
    if (has_skill1()) {
      if (skill1_ != NULL) skill1_->::protos::common::Skill::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_skill2()) {
      if (skill2_ != NULL) skill2_->::protos::common::Skill::Clear();
    }
    if (has_skill3()) {
      if (skill3_ != NULL) skill3_->::protos::common::Skill::Clear();
    }
    foe_ = 0;
    hasitem_ = 0;
    monstertype_ = 0;
    movespeed_ = 0;
    level_ = 0;
    quality_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    isboss_ = false;
    buff_ = 0;
    iscall_ = false;
    initcost_ = 0;
    addcost_ = 0;
    movecost_ = 0;
    maxcost_ = 0;
    delay_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    batch_ = 0;
    posx_ = 0;
    posy_ = 0;
    maxhp_ = 0;
  }
  poslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterId;
        break;
      }

      // optional int32 monsterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_atk;
        break;
      }

      // optional int32 atk = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_def;
        break;
      }

      // optional int32 def = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_atkInterval;
        break;
      }

      // optional float atkInterval = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_atkInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &atkinterval_)));
          set_has_atkinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }

      // optional int32 hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_crit;
        break;
      }

      // optional int32 crit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hit;
        break;
      }

      // optional int32 hit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dodge;
        break;
      }

      // optional int32 dodge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_renew;
        break;
      }

      // optional int32 renew = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renew_)));
          set_has_renew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_minRound;
        break;
      }

      // optional int32 minRound = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minround_)));
          set_has_minround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maxRound;
        break;
      }

      // optional int32 maxRound = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxround_)));
          set_has_maxround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_addHurtRate;
        break;
      }

      // optional int32 addHurtRate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addHurtRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addhurtrate_)));
          set_has_addhurtrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cutHurtRate;
        break;
      }

      // optional int32 cutHurtRate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cutHurtRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cuthurtrate_)));
          set_has_cuthurtrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_thumb;
        break;
      }

      // optional int32 thumb = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thumb_)));
          set_has_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_posList;
        break;
      }

      // repeated .protos.common.Pos posList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_posList;
        if (input->ExpectTag(144)) goto parse_zoom;
        break;
      }

      // optional int32 zoom = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoom_)));
          set_has_zoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_move1;
        break;
      }

      // optional int32 move1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move1_)));
          set_has_move1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_move2;
        break;
      }

      // optional int32 move2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move2_)));
          set_has_move2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_move3;
        break;
      }

      // optional int32 move3 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move3_)));
          set_has_move3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_move4;
        break;
      }

      // optional int32 move4 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move4_)));
          set_has_move4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_move5;
        break;
      }

      // optional int32 move5 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move5_)));
          set_has_move5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_skill1;
        break;
      }

      // optional .protos.common.Skill skill1 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_skill2;
        break;
      }

      // optional .protos.common.Skill skill2 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_skill3;
        break;
      }

      // optional .protos.common.Skill skill3 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_foe;
        break;
      }

      // optional int32 foe = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_foe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foe_)));
          set_has_foe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_hasItem;
        break;
      }

      // optional int32 hasItem = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasitem_)));
          set_has_hasitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_monsterType;
        break;
      }

      // optional int32 monsterType = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monstertype_)));
          set_has_monstertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_moveSpeed;
        break;
      }

      // optional float moveSpeed = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_level;
        break;
      }

      // optional int32 level = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_quality;
        break;
      }

      // optional int32 quality = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_isBoss;
        break;
      }

      // optional bool isBoss = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isboss_)));
          set_has_isboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_isCall;
        break;
      }

      // optional bool isCall = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscall_)));
          set_has_iscall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_initCost;
        break;
      }

      // optional int32 initCost = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initcost_)));
          set_has_initcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_addCost;
        break;
      }

      // optional int32 addCost = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addcost_)));
          set_has_addcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_moveCost;
        break;
      }

      // optional int32 moveCost = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movecost_)));
          set_has_movecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_maxCost;
        break;
      }

      // optional int32 maxCost = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcost_)));
          set_has_maxcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_buff;
        break;
      }

      // optional int32 buff = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_)));
          set_has_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_delay;
        break;
      }

      // optional int32 delay = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_batch;
        break;
      }

      // optional int32 batch = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_)));
          set_has_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_posX;
        break;
      }

      // optional int32 posX = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_posY;
        break;
      }

      // optional int32 posY = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_maxHp;
        break;
      }

      // optional int32 maxHp = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 monsterId = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monsterid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 atk = 4;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->atk(), output);
  }

  // optional int32 def = 5;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->def(), output);
  }

  // optional float atkInterval = 6;
  if (has_atkinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->atkinterval(), output);
  }

  // optional int32 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp(), output);
  }

  // optional int32 crit = 8;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->crit(), output);
  }

  // optional int32 hit = 9;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hit(), output);
  }

  // optional int32 dodge = 10;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dodge(), output);
  }

  // optional int32 renew = 11;
  if (has_renew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->renew(), output);
  }

  // optional int32 minRound = 12;
  if (has_minround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->minround(), output);
  }

  // optional int32 maxRound = 13;
  if (has_maxround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxround(), output);
  }

  // optional int32 addHurtRate = 14;
  if (has_addhurtrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->addhurtrate(), output);
  }

  // optional int32 cutHurtRate = 15;
  if (has_cuthurtrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cuthurtrate(), output);
  }

  // optional int32 thumb = 16;
  if (has_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->thumb(), output);
  }

  // repeated .protos.common.Pos posList = 17;
  for (int i = 0; i < this->poslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->poslist(i), output);
  }

  // optional int32 zoom = 18;
  if (has_zoom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->zoom(), output);
  }

  // optional int32 move1 = 19;
  if (has_move1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->move1(), output);
  }

  // optional int32 move2 = 20;
  if (has_move2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->move2(), output);
  }

  // optional int32 move3 = 21;
  if (has_move3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->move3(), output);
  }

  // optional int32 move4 = 22;
  if (has_move4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->move4(), output);
  }

  // optional int32 move5 = 23;
  if (has_move5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->move5(), output);
  }

  // optional .protos.common.Skill skill1 = 24;
  if (has_skill1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->skill1(), output);
  }

  // optional .protos.common.Skill skill2 = 25;
  if (has_skill2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->skill2(), output);
  }

  // optional .protos.common.Skill skill3 = 26;
  if (has_skill3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->skill3(), output);
  }

  // optional int32 foe = 28;
  if (has_foe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->foe(), output);
  }

  // optional int32 hasItem = 29;
  if (has_hasitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->hasitem(), output);
  }

  // optional int32 monsterType = 30;
  if (has_monstertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->monstertype(), output);
  }

  // optional float moveSpeed = 31;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->movespeed(), output);
  }

  // optional int32 level = 32;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->level(), output);
  }

  // optional int32 quality = 33;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->quality(), output);
  }

  // optional bool isBoss = 34;
  if (has_isboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->isboss(), output);
  }

  // optional bool isCall = 35;
  if (has_iscall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->iscall(), output);
  }

  // optional int32 initCost = 36;
  if (has_initcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->initcost(), output);
  }

  // optional int32 addCost = 37;
  if (has_addcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->addcost(), output);
  }

  // optional int32 moveCost = 38;
  if (has_movecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->movecost(), output);
  }

  // optional int32 maxCost = 39;
  if (has_maxcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->maxcost(), output);
  }

  // optional int32 buff = 40;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->buff(), output);
  }

  // optional int32 delay = 41;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->delay(), output);
  }

  // optional int32 batch = 42;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->batch(), output);
  }

  // optional int32 posX = 43;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->posx(), output);
  }

  // optional int32 posY = 44;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->posy(), output);
  }

  // optional int32 maxHp = 45;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 monsterId = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monsterid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 atk = 4;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->atk(), target);
  }

  // optional int32 def = 5;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->def(), target);
  }

  // optional float atkInterval = 6;
  if (has_atkinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->atkinterval(), target);
  }

  // optional int32 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp(), target);
  }

  // optional int32 crit = 8;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->crit(), target);
  }

  // optional int32 hit = 9;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hit(), target);
  }

  // optional int32 dodge = 10;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dodge(), target);
  }

  // optional int32 renew = 11;
  if (has_renew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->renew(), target);
  }

  // optional int32 minRound = 12;
  if (has_minround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->minround(), target);
  }

  // optional int32 maxRound = 13;
  if (has_maxround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxround(), target);
  }

  // optional int32 addHurtRate = 14;
  if (has_addhurtrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->addhurtrate(), target);
  }

  // optional int32 cutHurtRate = 15;
  if (has_cuthurtrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cuthurtrate(), target);
  }

  // optional int32 thumb = 16;
  if (has_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->thumb(), target);
  }

  // repeated .protos.common.Pos posList = 17;
  for (int i = 0; i < this->poslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->poslist(i), target);
  }

  // optional int32 zoom = 18;
  if (has_zoom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->zoom(), target);
  }

  // optional int32 move1 = 19;
  if (has_move1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->move1(), target);
  }

  // optional int32 move2 = 20;
  if (has_move2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->move2(), target);
  }

  // optional int32 move3 = 21;
  if (has_move3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->move3(), target);
  }

  // optional int32 move4 = 22;
  if (has_move4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->move4(), target);
  }

  // optional int32 move5 = 23;
  if (has_move5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->move5(), target);
  }

  // optional .protos.common.Skill skill1 = 24;
  if (has_skill1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->skill1(), target);
  }

  // optional .protos.common.Skill skill2 = 25;
  if (has_skill2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->skill2(), target);
  }

  // optional .protos.common.Skill skill3 = 26;
  if (has_skill3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->skill3(), target);
  }

  // optional int32 foe = 28;
  if (has_foe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->foe(), target);
  }

  // optional int32 hasItem = 29;
  if (has_hasitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->hasitem(), target);
  }

  // optional int32 monsterType = 30;
  if (has_monstertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->monstertype(), target);
  }

  // optional float moveSpeed = 31;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->movespeed(), target);
  }

  // optional int32 level = 32;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->level(), target);
  }

  // optional int32 quality = 33;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->quality(), target);
  }

  // optional bool isBoss = 34;
  if (has_isboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->isboss(), target);
  }

  // optional bool isCall = 35;
  if (has_iscall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->iscall(), target);
  }

  // optional int32 initCost = 36;
  if (has_initcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->initcost(), target);
  }

  // optional int32 addCost = 37;
  if (has_addcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->addcost(), target);
  }

  // optional int32 moveCost = 38;
  if (has_movecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->movecost(), target);
  }

  // optional int32 maxCost = 39;
  if (has_maxcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->maxcost(), target);
  }

  // optional int32 buff = 40;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->buff(), target);
  }

  // optional int32 delay = 41;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->delay(), target);
  }

  // optional int32 batch = 42;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->batch(), target);
  }

  // optional int32 posX = 43;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->posx(), target);
  }

  // optional int32 posY = 44;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->posy(), target);
  }

  // optional int32 maxHp = 45;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 monsterId = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 atk = 4;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }

    // optional int32 def = 5;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }

    // optional float atkInterval = 6;
    if (has_atkinterval()) {
      total_size += 1 + 4;
    }

    // optional int32 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 crit = 8;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hit = 9;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit());
    }

    // optional int32 dodge = 10;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodge());
    }

    // optional int32 renew = 11;
    if (has_renew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renew());
    }

    // optional int32 minRound = 12;
    if (has_minround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minround());
    }

    // optional int32 maxRound = 13;
    if (has_maxround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxround());
    }

    // optional int32 addHurtRate = 14;
    if (has_addhurtrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addhurtrate());
    }

    // optional int32 cutHurtRate = 15;
    if (has_cuthurtrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cuthurtrate());
    }

    // optional int32 thumb = 16;
    if (has_thumb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thumb());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 zoom = 18;
    if (has_zoom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoom());
    }

    // optional int32 move1 = 19;
    if (has_move1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move1());
    }

    // optional int32 move2 = 20;
    if (has_move2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move2());
    }

    // optional int32 move3 = 21;
    if (has_move3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move3());
    }

    // optional int32 move4 = 22;
    if (has_move4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move4());
    }

    // optional int32 move5 = 23;
    if (has_move5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move5());
    }

    // optional .protos.common.Skill skill1 = 24;
    if (has_skill1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill1());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .protos.common.Skill skill2 = 25;
    if (has_skill2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill2());
    }

    // optional .protos.common.Skill skill3 = 26;
    if (has_skill3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill3());
    }

    // optional int32 foe = 28;
    if (has_foe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->foe());
    }

    // optional int32 hasItem = 29;
    if (has_hasitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasitem());
    }

    // optional int32 monsterType = 30;
    if (has_monstertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monstertype());
    }

    // optional float moveSpeed = 31;
    if (has_movespeed()) {
      total_size += 2 + 4;
    }

    // optional int32 level = 32;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 quality = 33;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool isBoss = 34;
    if (has_isboss()) {
      total_size += 2 + 1;
    }

    // optional int32 buff = 40;
    if (has_buff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff());
    }

    // optional bool isCall = 35;
    if (has_iscall()) {
      total_size += 2 + 1;
    }

    // optional int32 initCost = 36;
    if (has_initcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initcost());
    }

    // optional int32 addCost = 37;
    if (has_addcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addcost());
    }

    // optional int32 moveCost = 38;
    if (has_movecost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movecost());
    }

    // optional int32 maxCost = 39;
    if (has_maxcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcost());
    }

    // optional int32 delay = 41;
    if (has_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 batch = 42;
    if (has_batch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch());
    }

    // optional int32 posX = 43;
    if (has_posx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posY = 44;
    if (has_posy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 maxHp = 45;
    if (has_maxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

  }
  // repeated .protos.common.Pos posList = 17;
  total_size += 2 * this->poslist_size();
  for (int i = 0; i < this->poslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Monster::MergeFrom(const Monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  poslist_.MergeFrom(from.poslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_atkinterval()) {
      set_atkinterval(from.atkinterval());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_renew()) {
      set_renew(from.renew());
    }
    if (from.has_minround()) {
      set_minround(from.minround());
    }
    if (from.has_maxround()) {
      set_maxround(from.maxround());
    }
    if (from.has_addhurtrate()) {
      set_addhurtrate(from.addhurtrate());
    }
    if (from.has_cuthurtrate()) {
      set_cuthurtrate(from.cuthurtrate());
    }
    if (from.has_thumb()) {
      set_thumb(from.thumb());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_zoom()) {
      set_zoom(from.zoom());
    }
    if (from.has_move1()) {
      set_move1(from.move1());
    }
    if (from.has_move2()) {
      set_move2(from.move2());
    }
    if (from.has_move3()) {
      set_move3(from.move3());
    }
    if (from.has_move4()) {
      set_move4(from.move4());
    }
    if (from.has_move5()) {
      set_move5(from.move5());
    }
    if (from.has_skill1()) {
      mutable_skill1()->::protos::common::Skill::MergeFrom(from.skill1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_skill2()) {
      mutable_skill2()->::protos::common::Skill::MergeFrom(from.skill2());
    }
    if (from.has_skill3()) {
      mutable_skill3()->::protos::common::Skill::MergeFrom(from.skill3());
    }
    if (from.has_foe()) {
      set_foe(from.foe());
    }
    if (from.has_hasitem()) {
      set_hasitem(from.hasitem());
    }
    if (from.has_monstertype()) {
      set_monstertype(from.monstertype());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_isboss()) {
      set_isboss(from.isboss());
    }
    if (from.has_buff()) {
      set_buff(from.buff());
    }
    if (from.has_iscall()) {
      set_iscall(from.iscall());
    }
    if (from.has_initcost()) {
      set_initcost(from.initcost());
    }
    if (from.has_addcost()) {
      set_addcost(from.addcost());
    }
    if (from.has_movecost()) {
      set_movecost(from.movecost());
    }
    if (from.has_maxcost()) {
      set_maxcost(from.maxcost());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_batch()) {
      set_batch(from.batch());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Monster::CopyFrom(const Monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monster::IsInitialized() const {

  for (int i = 0; i < poslist_size(); i++) {
    if (!this->poslist(i).IsInitialized()) return false;
  }
  return true;
}

void Monster::Swap(Monster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(name_, other->name_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(atkinterval_, other->atkinterval_);
    std::swap(hp_, other->hp_);
    std::swap(crit_, other->crit_);
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(renew_, other->renew_);
    std::swap(minround_, other->minround_);
    std::swap(maxround_, other->maxround_);
    std::swap(addhurtrate_, other->addhurtrate_);
    std::swap(cuthurtrate_, other->cuthurtrate_);
    std::swap(thumb_, other->thumb_);
    poslist_.Swap(&other->poslist_);
    std::swap(zoom_, other->zoom_);
    std::swap(move1_, other->move1_);
    std::swap(move2_, other->move2_);
    std::swap(move3_, other->move3_);
    std::swap(move4_, other->move4_);
    std::swap(move5_, other->move5_);
    std::swap(skill1_, other->skill1_);
    std::swap(skill2_, other->skill2_);
    std::swap(skill3_, other->skill3_);
    std::swap(foe_, other->foe_);
    std::swap(hasitem_, other->hasitem_);
    std::swap(monstertype_, other->monstertype_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(isboss_, other->isboss_);
    std::swap(buff_, other->buff_);
    std::swap(iscall_, other->iscall_);
    std::swap(initcost_, other->initcost_);
    std::swap(addcost_, other->addcost_);
    std::swap(movecost_, other->movecost_);
    std::swap(maxcost_, other->maxcost_);
    std::swap(delay_, other->delay_);
    std::swap(batch_, other->batch_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Monster_descriptor_;
  metadata.reflection = Monster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pos::kXFieldNumber;
const int Pos::kYFieldNumber;
#endif  // !_MSC_VER

Pos::Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pos::InitAsDefaultInstance() {
}

Pos::Pos(const Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pos::~Pos() {
  SharedDtor();
}

void Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pos_descriptor_;
}

const Pos& Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2fmonster_5fcommon_2eproto();
  return *default_instance_;
}

Pos* Pos::default_instance_ = NULL;

Pos* Pos::New() const {
  return new Pos;
}

void Pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pos::Swap(Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pos_descriptor_;
  metadata.reflection = Pos_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protos

// @@protoc_insertion_point(global_scope)
