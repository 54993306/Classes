// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_protocol.proto

#ifndef PROTOBUF_system_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_system_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/prize_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_system_5fprotocol_2eproto();
void protobuf_AssignDesc_system_5fprotocol_2eproto();
void protobuf_ShutdownFile_system_5fprotocol_2eproto();

class Disconnect;
class Bulletin;
class CardExchangeReq;
class CardExchangeRes;
class GameTips;

// ===================================================================

class Disconnect : public ::google::protobuf::Message {
 public:
  Disconnect();
  virtual ~Disconnect();

  Disconnect(const Disconnect& from);

  inline Disconnect& operator=(const Disconnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Disconnect& default_instance();

  void Swap(Disconnect* other);

  // implements Message ----------------------------------------------

  Disconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Disconnect& from);
  void MergeFrom(const Disconnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.Disconnect)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_system_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_system_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Disconnect* default_instance_;
};
// -------------------------------------------------------------------

class Bulletin : public ::google::protobuf::Message {
 public:
  Bulletin();
  virtual ~Bulletin();

  Bulletin(const Bulletin& from);

  inline Bulletin& operator=(const Bulletin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bulletin& default_instance();

  void Swap(Bulletin* other);

  // implements Message ----------------------------------------------

  Bulletin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bulletin& from);
  void MergeFrom(const Bulletin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:protos.Bulletin)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_system_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_system_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Bulletin* default_instance_;
};
// -------------------------------------------------------------------

class CardExchangeReq : public ::google::protobuf::Message {
 public:
  CardExchangeReq();
  virtual ~CardExchangeReq();

  CardExchangeReq(const CardExchangeReq& from);

  inline CardExchangeReq& operator=(const CardExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardExchangeReq& default_instance();

  void Swap(CardExchangeReq* other);

  // implements Message ----------------------------------------------

  CardExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardExchangeReq& from);
  void MergeFrom(const CardExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string card_no = 1;
  inline bool has_card_no() const;
  inline void clear_card_no();
  static const int kCardNoFieldNumber = 1;
  inline const ::std::string& card_no() const;
  inline void set_card_no(const ::std::string& value);
  inline void set_card_no(const char* value);
  inline void set_card_no(const char* value, size_t size);
  inline ::std::string* mutable_card_no();
  inline ::std::string* release_card_no();
  inline void set_allocated_card_no(::std::string* card_no);

  // @@protoc_insertion_point(class_scope:protos.CardExchangeReq)
 private:
  inline void set_has_card_no();
  inline void clear_has_card_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* card_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_system_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_system_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static CardExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

class CardExchangeRes : public ::google::protobuf::Message {
 public:
  CardExchangeRes();
  virtual ~CardExchangeRes();

  CardExchangeRes(const CardExchangeRes& from);

  inline CardExchangeRes& operator=(const CardExchangeRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardExchangeRes& default_instance();

  void Swap(CardExchangeRes* other);

  // implements Message ----------------------------------------------

  CardExchangeRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardExchangeRes& from);
  void MergeFrom(const CardExchangeRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .protos.common.Prize prize_list = 2;
  inline int prize_list_size() const;
  inline void clear_prize_list();
  static const int kPrizeListFieldNumber = 2;
  inline const ::protos::common::Prize& prize_list(int index) const;
  inline ::protos::common::Prize* mutable_prize_list(int index);
  inline ::protos::common::Prize* add_prize_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
      prize_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
      mutable_prize_list();

  // @@protoc_insertion_point(class_scope:protos.CardExchangeRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protos::common::Prize > prize_list_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_system_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_system_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_system_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static CardExchangeRes* default_instance_;
};
// -------------------------------------------------------------------

class GameTips : public ::google::protobuf::Message {
 public:
  GameTips();
  virtual ~GameTips();

  GameTips(const GameTips& from);

  inline GameTips& operator=(const GameTips& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameTips& default_instance();

  void Swap(GameTips* other);

  // implements Message ----------------------------------------------

  GameTips* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameTips& from);
  void MergeFrom(const GameTips& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool mailTips = 1;
  inline bool has_mailtips() const;
  inline void clear_mailtips();
  static const int kMailTipsFieldNumber = 1;
  inline bool mailtips() const;
  inline void set_mailtips(bool value);

  // optional bool taskTips = 2;
  inline bool has_tasktips() const;
  inline void clear_tasktips();
  static const int kTaskTipsFieldNumber = 2;
  inline bool tasktips() const;
  inline void set_tasktips(bool value);

  // optional bool lotteryTips = 3;
  inline bool has_lotterytips() const;
  inline void clear_lotterytips();
  static const int kLotteryTipsFieldNumber = 3;
  inline bool lotterytips() const;
  inline void set_lotterytips(bool value);

  // optional bool heroTips = 4;
  inline bool has_herotips() const;
  inline void clear_herotips();
  static const int kHeroTipsFieldNumber = 4;
  inline bool herotips() const;
  inline void set_herotips(bool value);

  // optional bool farmTips = 5;
  inline bool has_farmtips() const;
  inline void clear_farmtips();
  static const int kFarmTipsFieldNumber = 5;
  inline bool farmtips() const;
  inline void set_farmtips(bool value);

  // optional bool strenTips = 6;
  inline bool has_strentips() const;
  inline void clear_strentips();
  static const int kStrenTipsFieldNumber = 6;
  inline bool strentips() const;
  inline void set_strentips(bool value);

  // optional bool actTips = 7;
  inline bool has_acttips() const;
  inline void clear_acttips();
  static const int kActTipsFieldNumber = 7;
  inline bool acttips() const;
  inline void set_acttips(bool value);

  // optional bool shopTips = 8;
  inline bool has_shoptips() const;
  inline void clear_shoptips();
  static const int kShopTipsFieldNumber = 8;
  inline bool shoptips() const;
  inline void set_shoptips(bool value);

  // optional bool bountyTips = 9;
  inline bool has_bountytips() const;
  inline void clear_bountytips();
  static const int kBountyTipsFieldNumber = 9;
  inline bool bountytips() const;
  inline void set_bountytips(bool value);

  // optional bool risingTips = 10;
  inline bool has_risingtips() const;
  inline void clear_risingtips();
  static const int kRisingTipsFieldNumber = 10;
  inline bool risingtips() const;
  inline void set_risingtips(bool value);

  // @@protoc_insertion_point(class_scope:protos.GameTips)
 private:
  inline void set_has_mailtips();
  inline void clear_has_mailtips();
  inline void set_has_tasktips();
  inline void clear_has_tasktips();
  inline void set_has_lotterytips();
  inline void clear_has_lotterytips();
  inline void set_has_herotips();
  inline void clear_has_herotips();
  inline void set_has_farmtips();
  inline void clear_has_farmtips();
  inline void set_has_strentips();
  inline void clear_has_strentips();
  inline void set_has_acttips();
  inline void clear_has_acttips();
  inline void set_has_shoptips();
  inline void clear_has_shoptips();
  inline void set_has_bountytips();
  inline void clear_has_bountytips();
  inline void set_has_risingtips();
  inline void clear_has_risingtips();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool mailtips_;
  bool tasktips_;
  bool lotterytips_;
  bool herotips_;
  bool farmtips_;
  bool strentips_;
  bool acttips_;
  bool shoptips_;
  bool bountytips_;
  bool risingtips_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_system_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_system_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_system_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static GameTips* default_instance_;
};
// ===================================================================


// ===================================================================

// Disconnect

// required int32 reason = 1;
inline bool Disconnect::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Disconnect::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Disconnect::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Disconnect::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 Disconnect::reason() const {
  return reason_;
}
inline void Disconnect::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// Bulletin

// required string text = 1;
inline bool Bulletin::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bulletin::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bulletin::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bulletin::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Bulletin::text() const {
  return *text_;
}
inline void Bulletin::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Bulletin::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Bulletin::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bulletin::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Bulletin::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bulletin::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CardExchangeReq

// required string card_no = 1;
inline bool CardExchangeReq::has_card_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardExchangeReq::set_has_card_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardExchangeReq::clear_has_card_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardExchangeReq::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& CardExchangeReq::card_no() const {
  return *card_no_;
}
inline void CardExchangeReq::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void CardExchangeReq::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void CardExchangeReq::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardExchangeReq::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* CardExchangeReq::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CardExchangeReq::set_allocated_card_no(::std::string* card_no) {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (card_no) {
    set_has_card_no();
    card_no_ = card_no;
  } else {
    clear_has_card_no();
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CardExchangeRes

// required int32 result = 1;
inline bool CardExchangeRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardExchangeRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardExchangeRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardExchangeRes::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CardExchangeRes::result() const {
  return result_;
}
inline void CardExchangeRes::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .protos.common.Prize prize_list = 2;
inline int CardExchangeRes::prize_list_size() const {
  return prize_list_.size();
}
inline void CardExchangeRes::clear_prize_list() {
  prize_list_.Clear();
}
inline const ::protos::common::Prize& CardExchangeRes::prize_list(int index) const {
  return prize_list_.Get(index);
}
inline ::protos::common::Prize* CardExchangeRes::mutable_prize_list(int index) {
  return prize_list_.Mutable(index);
}
inline ::protos::common::Prize* CardExchangeRes::add_prize_list() {
  return prize_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >&
CardExchangeRes::prize_list() const {
  return prize_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::common::Prize >*
CardExchangeRes::mutable_prize_list() {
  return &prize_list_;
}

// -------------------------------------------------------------------

// GameTips

// optional bool mailTips = 1;
inline bool GameTips::has_mailtips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameTips::set_has_mailtips() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameTips::clear_has_mailtips() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameTips::clear_mailtips() {
  mailtips_ = false;
  clear_has_mailtips();
}
inline bool GameTips::mailtips() const {
  return mailtips_;
}
inline void GameTips::set_mailtips(bool value) {
  set_has_mailtips();
  mailtips_ = value;
}

// optional bool taskTips = 2;
inline bool GameTips::has_tasktips() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameTips::set_has_tasktips() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameTips::clear_has_tasktips() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameTips::clear_tasktips() {
  tasktips_ = false;
  clear_has_tasktips();
}
inline bool GameTips::tasktips() const {
  return tasktips_;
}
inline void GameTips::set_tasktips(bool value) {
  set_has_tasktips();
  tasktips_ = value;
}

// optional bool lotteryTips = 3;
inline bool GameTips::has_lotterytips() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameTips::set_has_lotterytips() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameTips::clear_has_lotterytips() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameTips::clear_lotterytips() {
  lotterytips_ = false;
  clear_has_lotterytips();
}
inline bool GameTips::lotterytips() const {
  return lotterytips_;
}
inline void GameTips::set_lotterytips(bool value) {
  set_has_lotterytips();
  lotterytips_ = value;
}

// optional bool heroTips = 4;
inline bool GameTips::has_herotips() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameTips::set_has_herotips() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameTips::clear_has_herotips() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameTips::clear_herotips() {
  herotips_ = false;
  clear_has_herotips();
}
inline bool GameTips::herotips() const {
  return herotips_;
}
inline void GameTips::set_herotips(bool value) {
  set_has_herotips();
  herotips_ = value;
}

// optional bool farmTips = 5;
inline bool GameTips::has_farmtips() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameTips::set_has_farmtips() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameTips::clear_has_farmtips() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameTips::clear_farmtips() {
  farmtips_ = false;
  clear_has_farmtips();
}
inline bool GameTips::farmtips() const {
  return farmtips_;
}
inline void GameTips::set_farmtips(bool value) {
  set_has_farmtips();
  farmtips_ = value;
}

// optional bool strenTips = 6;
inline bool GameTips::has_strentips() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameTips::set_has_strentips() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameTips::clear_has_strentips() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameTips::clear_strentips() {
  strentips_ = false;
  clear_has_strentips();
}
inline bool GameTips::strentips() const {
  return strentips_;
}
inline void GameTips::set_strentips(bool value) {
  set_has_strentips();
  strentips_ = value;
}

// optional bool actTips = 7;
inline bool GameTips::has_acttips() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameTips::set_has_acttips() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameTips::clear_has_acttips() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameTips::clear_acttips() {
  acttips_ = false;
  clear_has_acttips();
}
inline bool GameTips::acttips() const {
  return acttips_;
}
inline void GameTips::set_acttips(bool value) {
  set_has_acttips();
  acttips_ = value;
}

// optional bool shopTips = 8;
inline bool GameTips::has_shoptips() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameTips::set_has_shoptips() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameTips::clear_has_shoptips() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameTips::clear_shoptips() {
  shoptips_ = false;
  clear_has_shoptips();
}
inline bool GameTips::shoptips() const {
  return shoptips_;
}
inline void GameTips::set_shoptips(bool value) {
  set_has_shoptips();
  shoptips_ = value;
}

// optional bool bountyTips = 9;
inline bool GameTips::has_bountytips() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameTips::set_has_bountytips() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameTips::clear_has_bountytips() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameTips::clear_bountytips() {
  bountytips_ = false;
  clear_has_bountytips();
}
inline bool GameTips::bountytips() const {
  return bountytips_;
}
inline void GameTips::set_bountytips(bool value) {
  set_has_bountytips();
  bountytips_ = value;
}

// optional bool risingTips = 10;
inline bool GameTips::has_risingtips() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameTips::set_has_risingtips() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameTips::clear_has_risingtips() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameTips::clear_risingtips() {
  risingtips_ = false;
  clear_has_risingtips();
}
inline bool GameTips::risingtips() const {
  return risingtips_;
}
inline void GameTips::set_risingtips(bool value) {
  set_has_risingtips();
  risingtips_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_5fprotocol_2eproto__INCLUDED
