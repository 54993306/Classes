// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_protocol.proto

#ifndef PROTOBUF_friend_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_friend_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friend_5fprotocol_2eproto();
void protobuf_AssignDesc_friend_5fprotocol_2eproto();
void protobuf_ShutdownFile_friend_5fprotocol_2eproto();

class FriendListRequest;
class FriendListResponse;
class AddFriend;
class RemoveFriend;
class FriendRes;
class AcceptFriend;
class Friend;

// ===================================================================

class FriendListRequest : public ::google::protobuf::Message {
 public:
  FriendListRequest();
  virtual ~FriendListRequest();

  FriendListRequest(const FriendListRequest& from);

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListRequest& default_instance();

  void Swap(FriendListRequest* other);

  // implements Message ----------------------------------------------

  FriendListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListRequest& from);
  void MergeFrom(const FriendListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mark = 1;
  inline bool has_mark() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 1;
  inline ::google::protobuf::int32 mark() const;
  inline void set_mark(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:protos.FriendListRequest)
 private:
  inline void set_has_mark();
  inline void clear_has_mark();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 mark_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_friend_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_friend_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static FriendListRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendListResponse : public ::google::protobuf::Message {
 public:
  FriendListResponse();
  virtual ~FriendListResponse();

  FriendListResponse(const FriendListResponse& from);

  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListResponse& default_instance();

  void Swap(FriendListResponse* other);

  // implements Message ----------------------------------------------

  FriendListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListResponse& from);
  void MergeFrom(const FriendListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protos.Friend friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::protos::Friend& friends(int index) const;
  inline ::protos::Friend* mutable_friends(int index);
  inline ::protos::Friend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::protos::Friend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::protos::Friend >*
      mutable_friends();

  // optional int32 friendLimit = 2;
  inline bool has_friendlimit() const;
  inline void clear_friendlimit();
  static const int kFriendLimitFieldNumber = 2;
  inline ::google::protobuf::int32 friendlimit() const;
  inline void set_friendlimit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.FriendListResponse)
 private:
  inline void set_has_friendlimit();
  inline void clear_has_friendlimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protos::Friend > friends_;
  ::google::protobuf::int32 friendlimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_friend_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_friend_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static FriendListResponse* default_instance_;
};
// -------------------------------------------------------------------

class AddFriend : public ::google::protobuf::Message {
 public:
  AddFriend();
  virtual ~AddFriend();

  AddFriend(const AddFriend& from);

  inline AddFriend& operator=(const AddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriend& default_instance();

  void Swap(AddFriend* other);

  // implements Message ----------------------------------------------

  AddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriend& from);
  void MergeFrom(const AddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.AddFriend)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_friend_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_friend_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static AddFriend* default_instance_;
};
// -------------------------------------------------------------------

class RemoveFriend : public ::google::protobuf::Message {
 public:
  RemoveFriend();
  virtual ~RemoveFriend();

  RemoveFriend(const RemoveFriend& from);

  inline RemoveFriend& operator=(const RemoveFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveFriend& default_instance();

  void Swap(RemoveFriend* other);

  // implements Message ----------------------------------------------

  RemoveFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveFriend& from);
  void MergeFrom(const RemoveFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 friendId = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.RemoveFriend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 friendid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_friend_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_friend_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static RemoveFriend* default_instance_;
};
// -------------------------------------------------------------------

class FriendRes : public ::google::protobuf::Message {
 public:
  FriendRes();
  virtual ~FriendRes();

  FriendRes(const FriendRes& from);

  inline FriendRes& operator=(const FriendRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRes& default_instance();

  void Swap(FriendRes* other);

  // implements Message ----------------------------------------------

  FriendRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendRes& from);
  void MergeFrom(const FriendRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retval = 1;
  inline bool has_retval() const;
  inline void clear_retval();
  static const int kRetvalFieldNumber = 1;
  inline ::google::protobuf::int32 retval() const;
  inline void set_retval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.FriendRes)
 private:
  inline void set_has_retval();
  inline void clear_has_retval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_friend_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_friend_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static FriendRes* default_instance_;
};
// -------------------------------------------------------------------

class AcceptFriend : public ::google::protobuf::Message {
 public:
  AcceptFriend();
  virtual ~AcceptFriend();

  AcceptFriend(const AcceptFriend& from);

  inline AcceptFriend& operator=(const AcceptFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptFriend& default_instance();

  void Swap(AcceptFriend* other);

  // implements Message ----------------------------------------------

  AcceptFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptFriend& from);
  void MergeFrom(const AcceptFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required bool accept = 2;
  inline bool has_accept() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 2;
  inline bool accept() const;
  inline void set_accept(bool value);

  // @@protoc_insertion_point(class_scope:protos.AcceptFriend)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_accept();
  inline void clear_has_accept();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  bool accept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_friend_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_friend_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static AcceptFriend* default_instance_;
};
// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  void Swap(Friend* other);

  // implements Message ----------------------------------------------

  Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 friendId = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // required string friendName = 2;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 2;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bool online = 4;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 4;
  inline bool online() const;
  inline void set_online(bool value);

  // optional int32 combat = 5;
  inline bool has_combat() const;
  inline void clear_combat();
  static const int kCombatFieldNumber = 5;
  inline ::google::protobuf::int32 combat() const;
  inline void set_combat(::google::protobuf::int32 value);

  // optional uint64 loginTime = 6;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 logintime() const;
  inline void set_logintime(::google::protobuf::uint64 value);

  // optional int32 vip = 7;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 7;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int32 thumb = 8;
  inline bool has_thumb() const;
  inline void clear_thumb();
  static const int kThumbFieldNumber = 8;
  inline ::google::protobuf::int32 thumb() const;
  inline void set_thumb(::google::protobuf::int32 value);

  // optional int32 Fcoin = 9;
  inline bool has_fcoin() const;
  inline void clear_fcoin();
  static const int kFcoinFieldNumber = 9;
  inline ::google::protobuf::int32 fcoin() const;
  inline void set_fcoin(::google::protobuf::int32 value);

  // optional string fbId = 10;
  inline bool has_fbid() const;
  inline void clear_fbid();
  static const int kFbIdFieldNumber = 10;
  inline const ::std::string& fbid() const;
  inline void set_fbid(const ::std::string& value);
  inline void set_fbid(const char* value);
  inline void set_fbid(const char* value, size_t size);
  inline ::std::string* mutable_fbid();
  inline ::std::string* release_fbid();
  inline void set_allocated_fbid(::std::string* fbid);

  // @@protoc_insertion_point(class_scope:protos.Friend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_combat();
  inline void clear_has_combat();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_thumb();
  inline void clear_has_thumb();
  inline void set_has_fcoin();
  inline void clear_has_fcoin();
  inline void set_has_fbid();
  inline void clear_has_fbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* friendname_;
  ::google::protobuf::int32 friendid_;
  ::google::protobuf::int32 level_;
  bool online_;
  ::google::protobuf::int32 combat_;
  ::google::protobuf::uint64 logintime_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 thumb_;
  ::std::string* fbid_;
  ::google::protobuf::int32 fcoin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_friend_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_friend_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_friend_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Friend* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendListRequest

// required int32 mark = 1;
inline bool FriendListRequest::has_mark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendListRequest::set_has_mark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendListRequest::clear_has_mark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendListRequest::clear_mark() {
  mark_ = 0;
  clear_has_mark();
}
inline ::google::protobuf::int32 FriendListRequest::mark() const {
  return mark_;
}
inline void FriendListRequest::set_mark(::google::protobuf::int32 value) {
  set_has_mark();
  mark_ = value;
}

// optional string name = 2;
inline bool FriendListRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendListRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendListRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendListRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FriendListRequest::name() const {
  return *name_;
}
inline void FriendListRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendListRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendListRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendListRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FriendListRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendListRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendListResponse

// repeated .protos.Friend friends = 1;
inline int FriendListResponse::friends_size() const {
  return friends_.size();
}
inline void FriendListResponse::clear_friends() {
  friends_.Clear();
}
inline const ::protos::Friend& FriendListResponse::friends(int index) const {
  return friends_.Get(index);
}
inline ::protos::Friend* FriendListResponse::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::protos::Friend* FriendListResponse::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::Friend >&
FriendListResponse::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::protos::Friend >*
FriendListResponse::mutable_friends() {
  return &friends_;
}

// optional int32 friendLimit = 2;
inline bool FriendListResponse::has_friendlimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendListResponse::set_has_friendlimit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendListResponse::clear_has_friendlimit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendListResponse::clear_friendlimit() {
  friendlimit_ = 0;
  clear_has_friendlimit();
}
inline ::google::protobuf::int32 FriendListResponse::friendlimit() const {
  return friendlimit_;
}
inline void FriendListResponse::set_friendlimit(::google::protobuf::int32 value) {
  set_has_friendlimit();
  friendlimit_ = value;
}

// -------------------------------------------------------------------

// AddFriend

// required int32 roleId = 1;
inline bool AddFriend::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriend::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriend::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriend::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 AddFriend::roleid() const {
  return roleid_;
}
inline void AddFriend::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// RemoveFriend

// required int32 friendId = 1;
inline bool RemoveFriend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveFriend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveFriend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveFriend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 RemoveFriend::friendid() const {
  return friendid_;
}
inline void RemoveFriend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
}

// -------------------------------------------------------------------

// FriendRes

// required int32 retval = 1;
inline bool FriendRes::has_retval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRes::set_has_retval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRes::clear_has_retval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRes::clear_retval() {
  retval_ = 0;
  clear_has_retval();
}
inline ::google::protobuf::int32 FriendRes::retval() const {
  return retval_;
}
inline void FriendRes::set_retval(::google::protobuf::int32 value) {
  set_has_retval();
  retval_ = value;
}

// -------------------------------------------------------------------

// AcceptFriend

// required int32 roleId = 1;
inline bool AcceptFriend::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptFriend::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptFriend::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptFriend::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 AcceptFriend::roleid() const {
  return roleid_;
}
inline void AcceptFriend::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required bool accept = 2;
inline bool AcceptFriend::has_accept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptFriend::set_has_accept() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptFriend::clear_has_accept() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptFriend::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
inline bool AcceptFriend::accept() const {
  return accept_;
}
inline void AcceptFriend::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
}

// -------------------------------------------------------------------

// Friend

// required int32 friendId = 1;
inline bool Friend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 Friend::friendid() const {
  return friendid_;
}
inline void Friend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
}

// required string friendName = 2;
inline bool Friend::has_friendname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend::set_has_friendname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& Friend::friendname() const {
  return *friendname_;
}
inline void Friend::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void Friend::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void Friend::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* Friend::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool Friend::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Friend::level() const {
  return level_;
}
inline void Friend::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bool online = 4;
inline bool Friend::has_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Friend::set_has_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Friend::clear_has_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Friend::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool Friend::online() const {
  return online_;
}
inline void Friend::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional int32 combat = 5;
inline bool Friend::has_combat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Friend::set_has_combat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Friend::clear_has_combat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Friend::clear_combat() {
  combat_ = 0;
  clear_has_combat();
}
inline ::google::protobuf::int32 Friend::combat() const {
  return combat_;
}
inline void Friend::set_combat(::google::protobuf::int32 value) {
  set_has_combat();
  combat_ = value;
}

// optional uint64 loginTime = 6;
inline bool Friend::has_logintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Friend::set_has_logintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Friend::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Friend::clear_logintime() {
  logintime_ = GOOGLE_ULONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::uint64 Friend::logintime() const {
  return logintime_;
}
inline void Friend::set_logintime(::google::protobuf::uint64 value) {
  set_has_logintime();
  logintime_ = value;
}

// optional int32 vip = 7;
inline bool Friend::has_vip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Friend::set_has_vip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Friend::clear_has_vip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Friend::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 Friend::vip() const {
  return vip_;
}
inline void Friend::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional int32 thumb = 8;
inline bool Friend::has_thumb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Friend::set_has_thumb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Friend::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Friend::clear_thumb() {
  thumb_ = 0;
  clear_has_thumb();
}
inline ::google::protobuf::int32 Friend::thumb() const {
  return thumb_;
}
inline void Friend::set_thumb(::google::protobuf::int32 value) {
  set_has_thumb();
  thumb_ = value;
}

// optional int32 Fcoin = 9;
inline bool Friend::has_fcoin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Friend::set_has_fcoin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Friend::clear_has_fcoin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Friend::clear_fcoin() {
  fcoin_ = 0;
  clear_has_fcoin();
}
inline ::google::protobuf::int32 Friend::fcoin() const {
  return fcoin_;
}
inline void Friend::set_fcoin(::google::protobuf::int32 value) {
  set_has_fcoin();
  fcoin_ = value;
}

// optional string fbId = 10;
inline bool Friend::has_fbid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Friend::set_has_fbid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Friend::clear_has_fbid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Friend::clear_fbid() {
  if (fbid_ != &::google::protobuf::internal::kEmptyString) {
    fbid_->clear();
  }
  clear_has_fbid();
}
inline const ::std::string& Friend::fbid() const {
  return *fbid_;
}
inline void Friend::set_fbid(const ::std::string& value) {
  set_has_fbid();
  if (fbid_ == &::google::protobuf::internal::kEmptyString) {
    fbid_ = new ::std::string;
  }
  fbid_->assign(value);
}
inline void Friend::set_fbid(const char* value) {
  set_has_fbid();
  if (fbid_ == &::google::protobuf::internal::kEmptyString) {
    fbid_ = new ::std::string;
  }
  fbid_->assign(value);
}
inline void Friend::set_fbid(const char* value, size_t size) {
  set_has_fbid();
  if (fbid_ == &::google::protobuf::internal::kEmptyString) {
    fbid_ = new ::std::string;
  }
  fbid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_fbid() {
  set_has_fbid();
  if (fbid_ == &::google::protobuf::internal::kEmptyString) {
    fbid_ = new ::std::string;
  }
  return fbid_;
}
inline ::std::string* Friend::release_fbid() {
  clear_has_fbid();
  if (fbid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fbid_;
    fbid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_fbid(::std::string* fbid) {
  if (fbid_ != &::google::protobuf::internal::kEmptyString) {
    delete fbid_;
  }
  if (fbid) {
    set_has_fbid();
    fbid_ = fbid;
  } else {
    clear_has_fbid();
    fbid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_5fprotocol_2eproto__INCLUDED
